language: go_test.go
name: HumanEval_113_odd_count
results:
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var output []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        output = append(output, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return output\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        odd_count := 0\n \
    \       for _, c := range s {\n            if c % 2 == 1 {\n                odd_count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", odd_count, odd_count, odd_count,\
    \ odd_count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, ch := range str {\n            if ch % 2 == 1 {\n            \
    \    count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, str := range lst {\n        var count int\n   \
    \     for _, c := range str {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var ret []string\n    for _, str := range lst {\n        var count int\n   \
    \     for _, c := range str {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        ret = append(ret, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return ret\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, ch := range str {\n            if ch % 2 == 1 {\n            \
    \    count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ res := make([]string, len(lst))\n    for i, s := range lst {\n        count\
    \ := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n         \
    \       count++\n            }\n        }\n        res[i] = fmt.Sprintf(\"the\
    \ number of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i)\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpaprdkdbx_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpaprdkdbx_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpaprdkdbx_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for i, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n    }\n\
    \    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp1fmsj3l0_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp1fmsj3l0_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp1fmsj3l0_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if (c - '0') % 2 == 1 {\n          \
    \      count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for i, s := range lst {\n        odd_count := 0\n \
    \       for _, c := range s {\n            if c % 2 == 1 {\n                odd_count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", odd_count, i, i, i))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpvewolzvr_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpvewolzvr_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpvewolzvr_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ res := make([]string, len(lst))\n    for i, s := range lst {\n        count\
    \ := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n         \
    \       count++\n            }\n        }\n        res[i] = fmt.Sprintf(\"the\
    \ number of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i)\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpaprdkdbx_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpaprdkdbx_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpaprdkdbx_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var out []string\n    for _, v := range lst {\n        var count int\n     \
    \   for _, c := range v {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        out = append(out, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ // your code here\n    return lst\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp4t9q69x9_test.go:36: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[1234567]'\n    --- FAIL: TestOdd_Count/test_num__1\
    \ (0.00s)\n        tmp4t9q69x9_test.go:36: expected '[the number of odd elements\
    \ 1n the str1ng 1 of the 1nput. the number of odd elements 8n the str8ng 8 of\
    \ the 8nput.]', got '[3 11111111]'\n    --- FAIL: TestOdd_Count/test_num__2 (0.00s)\n\
    \        tmp4t9q69x9_test.go:36: expected '[the number of odd elements 2n the\
    \ str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of the 3nput.\
    \ the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[271 137 314]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, v := range lst {\n        var count int\n  \
    \      for _, vv := range v {\n            if vv % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var out []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        out = append(out, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var out []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        out = append(out, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for i, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n    }\n\
    \    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmplsm2gfwq_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmplsm2gfwq_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmplsm2gfwq_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for i, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpqvc_qf4b_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpqvc_qf4b_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpqvc_qf4b_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ res := make([]string, len(lst))\n    for i, s := range lst {\n        count\
    \ := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n         \
    \       count++\n            }\n        }\n        res[i] = fmt.Sprintf(\"the\
    \ number of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i)\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpaprdkdbx_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpaprdkdbx_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpaprdkdbx_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, v := range lst {\n        var count int\n  \
    \      for _, c := range v {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073741
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, str := range lst {\n        var count int\n   \
    \     for _, c := range str {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, str := range lst {\n        var count int\n   \
    \     for _, c := range str {\n            if c % 2 == 1 {\n                count\
    \ += 1\n            }\n        }\n        res = append(res, fmt.Sprintf(\"the\
    \ number of odd elements %dn the str%dng %d of the %dnput.\", count, count, count,\
    \ count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for i, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n    }\n\
    \    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmplsm2gfwq_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmplsm2gfwq_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmplsm2gfwq_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var odd_count int\n \
    \       for _, c := range s {\n            if c % 2 == 1 {\n                odd_count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", odd_count, odd_count, odd_count,\
    \ odd_count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ res := make([]string, len(lst))\n    for i, s := range lst {\n        odd_count\
    \ := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n         \
    \       odd_count++\n            }\n        }\n        res[i] = fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", odd_count, i+1,\
    \ i+1, i+1)\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n\
    \  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp23hr0wzj_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str1ng\
    \ 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp23hr0wzj_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str1ng 1 of the 1nput. the number of\
    \ odd elements 8n the str2ng 2 of the 2nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp23hr0wzj_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str1ng 1 of the 1nput. the number of odd elements\
    \ 3n the str2ng 2 of the 2nput. the number of odd elements 2n the str3ng 3 of\
    \ the 3nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        count := 0\n        for\
    \ _, c := range s {\n            if c % 2 == 1 {\n                count++\n  \
    \          }\n        }\n        res = append(res, fmt.Sprintf(\"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var out []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        out = append(out, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var odd_count int\n\
    \        for _, c := range s {\n            if c % 2 == 1 {\n                odd_count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", odd_count, odd_count, odd_count,\
    \ odd_count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.012s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, ch := range str {\n            if ch % 2 == 1 {\n            \
    \    count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var odd_count int\n\
    \        for _, c := range s {\n            if c % 2 == 1 {\n                odd_count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", odd_count, odd_count, odd_count,\
    \ odd_count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.012s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for i, str := range lst {\n        var cnt int\n     \
    \   for _, c := range str {\n            if c % 2 == 1 {\n                cnt++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", cnt, i, i, i))\n    }\n\
    \    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmptu05drda_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmptu05drda_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmptu05drda_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, ch := range str {\n            if ch % 2 == 1 {\n            \
    \    count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        odd := 0\n        for\
    \ _, c := range s {\n            if c % 2 == 1 {\n                odd++\n    \
    \        }\n        }\n        res = append(res, fmt.Sprintf(\"the number of odd\
    \ elements %dn the str%dng %d of the %dnput.\", odd, odd, odd, odd))\n    }\n\
    \    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c == '1' || c == '3' || c ==\
    \ '5' || c == '7' || c == '9' {\n                count++\n            }\n    \
    \    }\n        result = append(result, fmt.Sprintf(\"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\", count, count, count, count))\n    }\n \
    \   return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, str := range lst {\n        var count int\n   \
    \     for _, c := range str {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for i, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n    }\n\
    \    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmplsm2gfwq_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmplsm2gfwq_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmplsm2gfwq_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        count := 0\n        for\
    \ _, c := range s {\n            if c % 2 == 1 {\n                count++\n  \
    \          }\n        }\n        res = append(res, fmt.Sprintf(\"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c%2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, v := range lst {\n        var count int\n     \
    \   for _, vv := range v {\n            if vv % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var oddCount int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  oddCount++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", oddCount, oddCount,\
    \ oddCount, oddCount))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        count := 0\n   \
    \     for _, c := range str {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        count := 0\n        for\
    \ _, c := range s {\n            if c % 2 == 1 {\n                count++\n  \
    \          }\n        }\n        res = append(res, fmt.Sprintf(\"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        odd_count := 0\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  odd_count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", odd_count, odd_count,\
    \ odd_count, odd_count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, v := range lst {\n        var count int\n  \
    \      for _, vv := range v {\n            if vv%2 != 0 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if (c - '0') % 2 == 1 {\n          \
    \      count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, ch := range str {\n            if ch % 2 == 1 {\n            \
    \    count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for i, s := range lst {\n        var odd_count int\n\
    \        for _, c := range s {\n            if c % 2 == 1 {\n                odd_count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", odd_count, i, i, i))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpf_iaz2xm_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpf_iaz2xm_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpf_iaz2xm_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if (c - '0') % 2 == 1 {\n          \
    \      count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ result := make([]string, len(lst))\n    for i, s := range lst {\n        count\
    \ := 0\n        for _, c := range s {\n            if c % 2 == 1 {\n         \
    \       count++\n            }\n        }\n        result[i] = fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i)\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpcqg3zo33_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpcqg3zo33_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpcqg3zo33_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        odd_count := 0\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  odd_count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", odd_count, odd_count,\
    \ odd_count, odd_count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, v := range lst {\n        var count int\n  \
    \      for _, vv := range v {\n            if vv % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, ch := range str {\n            if ch % 2 == 1 {\n            \
    \    count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, v := range lst {\n        var count int\n  \
    \      for _, c := range v {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073741
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, v := range lst {\n        var count int\n  \
    \      for _, vv := range v {\n            if vv%2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, str := range lst {\n        var count int\n   \
    \     for _, c := range str {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, str := range lst {\n        var count int\n   \
    \     for _, c := range str {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, char := range str {\n            if char % 2 == 1 {\n        \
    \        count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ res := make([]string, len(lst))\n    for i, s := range lst {\n        odd :=\
    \ 0\n        for _, c := range s {\n            if c % 2 == 1 {\n            \
    \    odd++\n            }\n        }\n        res[i] = fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", odd, odd, odd, odd)\n \
    \   }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for i, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n    }\n\
    \    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp1fmsj3l0_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp1fmsj3l0_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp1fmsj3l0_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var odd_count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  odd_count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", odd_count, odd_count,\
    \ odd_count, odd_count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t\
    \ *testing.T) {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"1234567\"}), expected: []string{\"the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.\"} },\n     { actual: candidate([]string{\"3\"\
    , \"11111111\"}), expected: []string{\"the number of odd elements 1n the str1ng\
    \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
    } },\n     { actual: candidate([]string{\"271\", \"137\", \"314\"}), expected:\
    \ []string{\"the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the\
    \ number of odd elements 3n the str3ng 3 of the 3nput.\", \"the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var cnt int\n       \
    \ for _, c := range s {\n            if c%2 == 1 {\n                cnt++\n  \
    \          }\n        }\n        res = append(res, fmt.Sprintf(\"the number of\
    \ odd elements %dn the str%dng %d of the %dnput.\", cnt, cnt, cnt, cnt))\n   \
    \ }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var out []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        out = append(out, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, str := range lst {\n        var count int\n   \
    \     for _, c := range str {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, v := range lst {\n        var count int\n  \
    \      for _, c := range v {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073741
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, v := range lst {\n        var count int\n     \
    \   for _, c := range v {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var output []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        output = append(output, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return output\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, char := range str {\n            if char % 2 == 1 {\n        \
    \        count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var odd int\n       \
    \ for _, c := range s {\n            if c % 2 == 1 {\n                odd++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", odd, odd, odd, odd))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if int(c) % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, v := range lst {\n        var count int\n     \
    \   for _, vv := range v {\n            if vv % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for i, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n    }\n\
    \    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmplsm2gfwq_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmplsm2gfwq_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmplsm2gfwq_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for i, v := range lst {\n        odd := 0\n       \
    \ for _, c := range v {\n            if c % 2 == 1 {\n                odd++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", odd, i, i, i))\n    }\n\
    \    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmpmcckiarp_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmpmcckiarp_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmpmcckiarp_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ res := make([]string, len(lst))\n    for i, s := range lst {\n        odd :=\
    \ 0\n        for _, c := range s {\n            if c % 2 == 1 {\n            \
    \    odd++\n            }\n        }\n        res[i] = fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", odd, odd, odd, odd)\n \
    \   }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count += 1\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if (c - '0') % 2 == 1 {\n             \
    \   count++\n            }\n        }\n        res = append(res, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for i, v := range lst {\n        var count int\n  \
    \      for _, c := range v {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n    }\n\
    \    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmphmu26z12_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmphmu26z12_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmphmu26z12_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var out []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        out = append(out, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return out\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073740
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for i, str := range lst {\n        odd_count := 0\n\
    \        for _, c := range str {\n            if c == '1' || c == '3' || c ==\
    \ '5' || c == '7' || c == '9' {\n                odd_count++\n            }\n\
    \        }\n        result = append(result, fmt.Sprintf(\"the number of odd elements\
    \ %dn the str%dng %d of the %dnput.\", odd_count, i, i, i))\n    }\n    return\
    \ result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp0i7iharb_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp0i7iharb_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp0i7iharb_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073837
- exit_code: 1
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for i, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, i, i, i))\n    }\n\
    \    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate := odd_count\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestOdd_Count (0.00s)\n    --- FAIL: TestOdd_Count/test_num__0\
    \ (0.00s)\n        tmp1fmsj3l0_test.go:45: expected '[the number of odd elements\
    \ 4n the str4ng 4 of the 4nput.]', got '[the number of odd elements 4n the str0ng\
    \ 0 of the 0nput.]'\n    --- FAIL: TestOdd_Count/test_num__1 (0.00s)\n       \
    \ tmp1fmsj3l0_test.go:45: expected '[the number of odd elements 1n the str1ng\
    \ 1 of the 1nput. the number of odd elements 8n the str8ng 8 of the 8nput.]',\
    \ got '[the number of odd elements 1n the str0ng 0 of the 0nput. the number of\
    \ odd elements 8n the str1ng 1 of the 1nput.]'\n    --- FAIL: TestOdd_Count/test_num__2\
    \ (0.00s)\n        tmp1fmsj3l0_test.go:45: expected '[the number of odd elements\
    \ 2n the str2ng 2 of the 2nput. the number of odd elements 3n the str3ng 3 of\
    \ the 3nput. the number of odd elements 2n the str2ng 2 of the 2nput.]', got '[the\
    \ number of odd elements 2n the str0ng 0 of the 0nput. the number of odd elements\
    \ 3n the str1ng 1 of the 1nput. the number of odd elements 2n the str2ng 2 of\
    \ the 2nput.]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073740
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, str := range lst {\n        var count int\n\
    \        for _, c := range str {\n            if c % 2 == 1 {\n              \
    \  count++\n            }\n        }\n        result = append(result, fmt.Sprintf(\"\
    the number of odd elements %dn the str%dng %d of the %dnput.\", count, count,\
    \ count, count))\n    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T)\
    \ {\n  candidate := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    1234567\"}), expected: []string{\"the number of odd elements 4n the str4ng 4 of\
    \ the 4nput.\"} },\n     { actual: candidate([]string{\"3\", \"11111111\"}), expected:\
    \ []string{\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var result []string\n    for _, s := range lst {\n        var count int\n  \
    \      for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        result = append(result, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return result\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate\
    \ := odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
- exit_code: 0
  program: "package odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a list of strings, where each string consists of only digits, return\
    \ a list.\n// Each element i of the output should be \"the number of odd elements\
    \ in the\n// string i of the input.\" where all the i's should be replaced by\
    \ the number\n// of odd digits in the i'th string of the input.\n// >>> odd_count([]string{\"\
    1234567\"})\n// []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    }\n// >>> odd_count([]string{\"3\", \"11111111\"})\n// []string{\"the number of\
    \ odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n\
    \ the str8ng 8 of the 8nput.\"}\nfunc odd_count(lst []string) []string {\n   \
    \ var res []string\n    for _, s := range lst {\n        var count int\n     \
    \   for _, c := range s {\n            if c % 2 == 1 {\n                count++\n\
    \            }\n        }\n        res = append(res, fmt.Sprintf(\"the number\
    \ of odd elements %dn the str%dng %d of the %dnput.\", count, count, count, count))\n\
    \    }\n    return res\n}\n\nfunc TestOdd_Count(t *testing.T) {\n  candidate :=\
    \ odd_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]string{\"1234567\"}), expected:\
    \ []string{\"the number of odd elements 4n the str4ng 4 of the 4nput.\"} },\n\
    \     { actual: candidate([]string{\"3\", \"11111111\"}), expected: []string{\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"} },\n     { actual: candidate([]string{\"\
    271\", \"137\", \"314\"}), expected: []string{\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073736
