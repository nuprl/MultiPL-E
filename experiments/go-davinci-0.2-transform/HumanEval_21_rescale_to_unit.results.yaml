language: go_test.go
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    var\
    \ result []float64\n    for _, n := range numbers {\n        result = append(result,\
    \ (n - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var max, min float64\n    for _, n := range numbers {\n   \
    \     if n > max {\n            max = n\n        }\n        if n < min {\n   \
    \         min = n\n        }\n    }\n    var result []float64\n    for _, n :=\
    \ range numbers {\n        result = append(result, (n - min) / (max - min))\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpbmxn9__3_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpbmxn9__3_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpbmxn9__3_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpbmxn9__3_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpbmxn9__3_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, (number - min) / (max - min))\n    }\n    return result\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    range_ := max - min\n    result := make([]float64, len(numbers))\n  \
    \  for i, number := range numbers {\n        result[i] = (number - min) / range_\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min, max := numbers[0], numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    if\
    \ min == max {\n        return numbers\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for i, n := range numbers {\n   \
    \     if i == 0 {\n            min = n\n            max = n\n        } else {\n\
    \            if n < min {\n                min = n\n            }\n          \
    \  if n > max {\n                max = n\n            }\n        }\n    }\n  \
    \  var result []float64\n    for _, n := range numbers {\n        result = append(result,\
    \ (n - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074458
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    for i, n := range numbers\
    \ {\n        numbers[i] = (n - min) / (max - min)\n    }\n    return numbers\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // find min and max\n    var min, max float64\n    min = numbers[0]\n\
    \    max = numbers[0]\n    for _, n := range numbers {\n        if n < min {\n\
    \            min = n\n        }\n        if n > max {\n            max = n\n \
    \       }\n    }\n    // rescale\n    for i, n := range numbers {\n        numbers[i]\
    \ = (n - min) / (max - min)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"Need at least two numbers\
    \ to rescale\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    if min == max {\n        panic(\"All numbers are the same\")\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if min == max {\n        return numbers\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    if min == max {\n    \
    \    return numbers\n    }\n    for i, n := range numbers {\n        numbers[i]\
    \ = (n - min) / (max - min)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var (\n        min = numbers[0]\n        max = numbers[0]\n\
    \    )\n    for _, number := range numbers {\n        if number < min {\n    \
    \        min = number\n        }\n        if number > max {\n            max =\
    \ number\n        }\n    }\n    var result = make([]float64, len(numbers))\n \
    \   for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"Need at least two numbers\
    \ to rescale\")\n    }\n    var min = numbers[0]\n    var max = numbers[0]\n \
    \   for _, n := range numbers {\n        if n < min {\n            min = n\n \
    \       }\n        if n > max {\n            max = n\n        }\n    }\n    var\
    \ result = make([]float64, len(numbers))\n    for i, n := range numbers {\n  \
    \      result[i] = (n - min) / (max - min)\n    }\n    return result\n}\n\nfunc\
    \ TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected: []float64{0.0,\
    \ 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected: []float64{1.0,\
    \ 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected:\
    \ []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result = make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        result[i] = (number - min) / (max - min)\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"List must have at least\
    \ two elements\")\n    }\n    min, max := numbers[0], numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if min == max {\n        panic(\"List must have at least two different\
    \ elements\")\n    }\n    result := make([]float64, len(numbers))\n    for i,\
    \ number := range numbers {\n        result[i] = (number - min) / (max - min)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"List must have at least\
    \ two elements\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    if min == max {\n        panic(\"All numbers are equal\")\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    var\
    \ result []float64\n    for _, n := range numbers {\n        result = append(result,\
    \ (n - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result = make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        result[i] = (number - min) / (max - min)\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"Need at least two numbers\
    \ to rescale\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    if min == max {\n        panic(\"All numbers are the same\")\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var max float64 = numbers[0]\n    var min float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"rescale_to_unit: list\
    \ must have at least two elements\")\n    }\n    min, max := numbers[0], numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    if\
    \ min == max {\n        panic(\"rescale_to_unit: all elements are equal\")\n \
    \   }\n    for i, n := range numbers {\n        numbers[i] = (n - min) / (max\
    \ - min)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var max float64 = numbers[0]\n    var min float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result = make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        result[i] = (number - min) / (max - min)\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    var result []float64\n\n    for _, number := range numbers {\n        if\
    \ number < min {\n            min = number\n        }\n        if number > max\
    \ {\n            max = number\n        }\n    }\n\n    for _, number := range\
    \ numbers {\n        result = append(result, (number - min) / (max - min))\n \
    \   }\n\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var rescaled []float64\n    for _, number := range numbers\
    \ {\n        rescaled = append(rescaled, (number - min) / (max - min))\n    }\n\
    \    return rescaled\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, n := range numbers {\n   \
    \     if n < min {\n            min = n\n        }\n        if n > max {\n   \
    \         max = n\n        }\n    }\n    var result []float64\n    for _, n :=\
    \ range numbers {\n        result = append(result, (n - min) / (max - min))\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp_zced09y_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, v := range numbers {\n        if v < min {\n            min = v\n\
    \        }\n        if v > max {\n            max = v\n        }\n    }\n    var\
    \ result []float64\n    for _, v := range numbers {\n        result = append(result,\
    \ (v - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if max == min {\n        return numbers\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if max == min {\n        return numbers\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    var result []float64 = make([]float64, len(numbers))\n\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n\n    for i, number := range numbers {\n        result[i] = (number - min)\
    \ / (max - min)\n    }\n\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if min == max {\n        return numbers\n    }\n    for i, number :=\
    \ range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if min == max {\n        return numbers\n    }\n    for i, number :=\
    \ range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ n := range numbers {\n        if n < min {\n            min = n\n        }\n\
    \        if n > max {\n            max = n\n        }\n    }\n    var range_ =\
    \ max - min\n    var result = make([]float64, len(numbers))\n    for i, n := range\
    \ numbers {\n        result[i] = (n - min) / range_\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if min == max {\n        return numbers\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result = make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        result[i] = (number - min) / (max - min)\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    if max == min {\n \
    \       return numbers\n    }\n    for i, number := range numbers {\n        numbers[i]\
    \ = (number - min) / (max - min)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"At least two numbers\
    \ are required\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    if min == max {\n        panic(\"All numbers are equal\")\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min, max := numbers[0], numbers[0]\n    for _, number := range\
    \ numbers {\n        if number < min {\n            min = number\n        }\n\
    \        if number > max {\n            max = number\n        }\n    }\n    for\
    \ i, number := range numbers {\n        numbers[i] = (number - min) / (max - min)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min,\
    \ max := numbers[0], numbers[0]\n    for _, number := range numbers {\n      \
    \  if number < min {\n            min = number\n        }\n        if number >\
    \ max {\n            max = number\n        }\n    }\n    if min == max {\n   \
    \     return []float64{0.0, 0.0}\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if max == min {\n        return numbers\n    }\n    for i, number :=\
    \ range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"Need at least two numbers\
    \ to rescale\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    if min == max {\n        panic(\"All numbers are equal\")\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"rescale_to_unit: list\
    \ must have at least two elements\")\n    }\n    min := numbers[0]\n    max :=\
    \ numbers[0]\n    for _, n := range numbers {\n        if n < min {\n        \
    \    min = n\n        }\n        if n > max {\n            max = n\n        }\n\
    \    }\n    if min == max {\n        panic(\"rescale_to_unit: min and max are\
    \ equal\")\n    }\n    result := make([]float64, len(numbers))\n    for i, n :=\
    \ range numbers {\n        result[i] = (n - min) / (max - min)\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result = make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        result[i] = (number - min) / (max - min)\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if max == min {\n        return numbers\n    }\n    for i, number :=\
    \ range numbers {\n        numbers[i] = (number - min) / (max - min)\n    }\n\
    \    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"List of numbers must\
    \ have at least two elements\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    if min == max {\n        panic(\"All numbers in the list\
    \ are the same\")\n    }\n    result := make([]float64, len(numbers))\n    for\
    \ i, number := range numbers {\n        result[i] = (number - min) / (max - min)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, n := range numbers {\n   \
    \     if n < min {\n            min = n\n        }\n        if n > max {\n   \
    \         max = n\n        }\n    }\n    var result []float64\n    for _, n :=\
    \ range numbers {\n        result = append(result, (n - min) / (max - min))\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp_zced09y_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if min == max {\n        return numbers\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if min == max {\n        return numbers\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var max float64 = numbers[0]\n    var min float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    fmt.Printf(\"min: %f,\
    \ max: %f\\n\", min, max)\n    if max == min {\n        return numbers\n    }\n\
    \    for i, n := range numbers {\n        numbers[i] = (n - min) / (max - min)\n\
    \    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // find the min and max\n    min := numbers[0]\n    max :=\
    \ numbers[0]\n    for _, n := range numbers {\n        if n < min {\n        \
    \    min = n\n        }\n        if n > max {\n            max = n\n        }\n\
    \    }\n    // rescale\n    for i, n := range numbers {\n        numbers[i] =\
    \ (n - min) / (max - min)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"List of numbers must\
    \ have at least two elements\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    if min == max {\n        panic(\"List of numbers must have\
    \ at least two distinct elements\")\n    }\n    result := make([]float64, len(numbers))\n\
    \    for i, number := range numbers {\n        result[i] = (number - min) / (max\
    \ - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64 = numbers[0], numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, (number - min) / (max - min))\n    }\n    return result\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64 = numbers[0], numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, (number - min) / (max - min))\n    }\n    return result\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    if min == max {\n        return numbers\n    }\n    result := make([]float64,\
    \ len(numbers))\n    for i, number := range numbers {\n        result[i] = (number\
    \ - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var max float64 = numbers[0]\n    var min float64 = numbers[0]\n\
    \    for _, value := range numbers {\n        if value > max {\n            max\
    \ = value\n        }\n        if value < min {\n            min = value\n    \
    \    }\n    }\n    var result []float64\n    for _, value := range numbers {\n\
    \        result = append(result, (value - min) / (max - min))\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result = make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        result[i] = (number - min) / (max - min)\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"rescale_to_unit requires\
    \ at least two numbers\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    result\
    \ := make([]float64, len(numbers))\n    for i, n := range numbers {\n        result[i]\
    \ = (n - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"List must have at least\
    \ two elements\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    if min == max {\n        panic(\"All numbers are equal\")\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, n := range numbers {\n        if n < min {\n            min = n\n\
    \        }\n        if n > max {\n            max = n\n        }\n    }\n    var\
    \ result []float64\n    for _, n := range numbers {\n        result = append(result,\
    \ (n - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // find the minimum and maximum values\n    min := numbers[0]\n\
    \    max := numbers[0]\n    for _, num := range numbers {\n        if num < min\
    \ {\n            min = num\n        }\n        if num > max {\n            max\
    \ = num\n        }\n    }\n    // rescale the numbers\n    for i, num := range\
    \ numbers {\n        numbers[i] = (num - min) / (max - min)\n    }\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074525
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"Need at least two numbers\
    \ to rescale\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    if min == max {\n        panic(\"Need at least two different numbers\
    \ to rescale\")\n    }\n    result := make([]float64, len(numbers))\n    for i,\
    \ number := range numbers {\n        result[i] = (number - min) / (max - min)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074525
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result = make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        result[i] = (number - min) / (max - min)\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    range_ := max - min\n\
    \    result := make([]float64, len(numbers))\n    for i, n := range numbers {\n\
    \        result[i] = (n - min) / range_\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074525
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    // Find the smallest and largest numbers\n    var min, max\
    \ float64\n    for i, number := range numbers {\n        if i == 0 {\n       \
    \     min = number\n            max = number\n        } else {\n            if\
    \ number < min {\n                min = number\n            }\n            if\
    \ number > max {\n                max = number\n            }\n        }\n   \
    \ }\n\n    // Calculate the scale factor\n    var scale float64\n    if min ==\
    \ max {\n        scale = 1.0\n    } else {\n        scale = 1.0 / (max - min)\n\
    \    }\n\n    // Apply the scale factor to each number\n    for i, number := range\
    \ numbers {\n        numbers[i] = (number - min) * scale\n    }\n\n    return\
    \ numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074525
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"Need at least two numbers\
    \ to rescale\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    if min == max {\n        panic(\"All numbers are the same\")\n    }\n\
    \    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    var result []float64\n    for _, number := range numbers {\n        result\
    \ = append(result, (number - min) / (max - min))\n    }\n    return result\n}\n\
    \nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074524
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ v := range numbers {\n        if v < min {\n            min = v\n        }\n\
    \        if v > max {\n            max = v\n        }\n    }\n    var result =\
    \ make([]float64, len(numbers))\n    for i, v := range numbers {\n        result[i]\
    \ = (v - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074525
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        panic(\"Need at least two numbers\
    \ to rescale\")\n    }\n    min := numbers[0]\n    max := numbers[0]\n    for\
    \ _, number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    if min == max {\n        panic(\"Need at least two different numbers\
    \ to rescale\")\n    }\n    result := make([]float64, len(numbers))\n    for i,\
    \ number := range numbers {\n        result[i] = (number - min) / (max - min)\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074525
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, number\
    \ := range numbers {\n        if number < min {\n            min = number\n  \
    \      }\n        if number > max {\n            max = number\n        }\n   \
    \ }\n    result := make([]float64, len(numbers))\n    for i, number := range numbers\
    \ {\n        result[i] = (number - min) / (max - min)\n    }\n    return result\n\
    }\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    if max == min {\n    \
    \    return numbers\n    }\n    for i, n := range numbers {\n        numbers[i]\
    \ = (n - min) / (max - min)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074525
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var max float64 = numbers[0]\n    var min float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min = numbers[0]\n    var max = numbers[0]\n    for _,\
    \ number := range numbers {\n        if number < min {\n            min = number\n\
    \        }\n        if number > max {\n            max = number\n        }\n \
    \   }\n    var result = make([]float64, len(numbers))\n    for i, number := range\
    \ numbers {\n        result[i] = (number - min) / (max - min)\n    }\n    return\
    \ result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate := rescale_to_unit\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{2.0, 49.9}), expected:\
    \ []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0, 49.9}), expected:\
    \ []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0, 2.0, 3.0, 4.0,\
    \ 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0,\
    \ 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n  \
    \   { actual: candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    if max == min {\n    \
    \    return numbers\n    }\n    result := make([]float64, len(numbers))\n    for\
    \ i, n := range numbers {\n        result[i] = (n - min) / (max - min)\n    }\n\
    \    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074525
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, number := range numbers {\n\
    \        if number < min {\n            min = number\n        }\n        if number\
    \ > max {\n            max = number\n        }\n    }\n    var result []float64\n\
    \    for _, number := range numbers {\n        result = append(result, (number\
    \ - min) / (max - min))\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmpiy31l2tl_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmpiy31l2tl_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 1
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    for _, n := range numbers {\n   \
    \     if n < min {\n            min = n\n        }\n        if n > max {\n   \
    \         max = n\n        }\n    }\n    var result []float64\n    for _, n :=\
    \ range numbers {\n        result = append(result, (n - min) / (max - min))\n\
    \    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate\
    \ := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRescale_To_Unit (0.00s)\n    --- FAIL: TestRescale_To_Unit/test_num__0\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=0) %!s(float64=1)]',\
    \ got '[%!s(float64=0.04008016032064128) %!s(float64=1)]'\n    --- FAIL: TestRescale_To_Unit/test_num__1\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=1) %!s(float64=0)]',\
    \ got '[%!s(float64=1) %!s(float64=0.499)]'\n    --- FAIL: TestRescale_To_Unit/test_num__2\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=0) %!s(float64=0.25)\
    \ %!s(float64=0.5) %!s(float64=0.75) %!s(float64=1)]', got '[%!s(float64=0.2)\
    \ %!s(float64=0.4) %!s(float64=0.6) %!s(float64=0.8) %!s(float64=1)]'\n    ---\
    \ FAIL: TestRescale_To_Unit/test_num__3 (0.00s)\n        tmp_zced09y_test.go:46:\
    \ expected '[%!s(float64=0.25) %!s(float64=0) %!s(float64=1) %!s(float64=0.5)\
    \ %!s(float64=0.75)]', got '[%!s(float64=0.4) %!s(float64=0.2) %!s(float64=1)\
    \ %!s(float64=0.6) %!s(float64=0.8)]'\n    --- FAIL: TestRescale_To_Unit/test_num__4\
    \ (0.00s)\n        tmp_zced09y_test.go:46: expected '[%!s(float64=0.25) %!s(float64=0)\
    \ %!s(float64=1) %!s(float64=0.5) %!s(float64=0.75)]', got '[%!s(float64=0.8)\
    \ %!s(float64=0.7333333333333333) %!s(float64=1) %!s(float64=0.8666666666666667)\
    \ %!s(float64=0.9333333333333333)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074456
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min float64 = numbers[0]\n    var max float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var max = numbers[0]\n    var min = numbers[0]\n    for _,\
    \ v := range numbers {\n        if v > max {\n            max = v\n        }\n\
    \        if v < min {\n            min = v\n        }\n    }\n    var result =\
    \ make([]float64, len(numbers))\n    for i, v := range numbers {\n        result[i]\
    \ = (v - min) / (max - min)\n    }\n    return result\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074525
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var max float64 = numbers[0]\n    var min float64 = numbers[0]\n\
    \    for _, number := range numbers {\n        if number > max {\n           \
    \ max = number\n        }\n        if number < min {\n            min = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    var min, max float64\n    min = numbers[0]\n    max = numbers[0]\n\
    \    for _, number := range numbers {\n        if number < min {\n           \
    \ min = number\n        }\n        if number > max {\n            max = number\n\
    \        }\n    }\n    var result []float64\n    for _, number := range numbers\
    \ {\n        result = append(result, (number - min) / (max - min))\n    }\n  \
    \  return result\n}\n\nfunc TestRescale_To_Unit(t *testing.T) {\n  candidate :=\
    \ rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074453
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    min := numbers[0]\n    max := numbers[0]\n    for _, n := range\
    \ numbers {\n        if n < min {\n            min = n\n        }\n        if\
    \ n > max {\n            max = n\n        }\n    }\n    if max == min {\n    \
    \    return numbers\n    }\n    for i, n := range numbers {\n        numbers[i]\
    \ = (n - min) / (max - min)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t\
    \ *testing.T) {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{2.0, 49.9}), expected: []float64{0.0, 1.0} },\n     { actual:\
    \ candidate([]float64{100.0, 49.9}), expected: []float64{1.0, 0.0} },\n     {\
    \ actual: candidate([]float64{1.0, 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0,\
    \ 0.25, 0.5, 0.75, 1.0} },\n     { actual: candidate([]float64{2.0, 1.0, 5.0,\
    \ 3.0, 4.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n     { actual:\
    \ candidate([]float64{12.0, 11.0, 15.0, 13.0, 14.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074525
- exit_code: 0
  program: "package rescale_to_unit_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given list of numbers (of at least two elements), apply a linear transform\
    \ to that list,\n// such that the smallest number will become 0 and the largest\
    \ will become 1\n// >>> rescale_to_unit([]float64{1.0, 2.0, 3.0, 4.0, 5.0})\n\
    // []float64{0.0, 0.25, 0.5, 0.75, 1.0}\nfunc rescale_to_unit(numbers []float64)\
    \ []float64 {\n    if len(numbers) < 2 {\n        return numbers\n    }\n    min\
    \ := numbers[0]\n    max := numbers[0]\n    for _, n := range numbers {\n    \
    \    if n < min {\n            min = n\n        }\n        if n > max {\n    \
    \        max = n\n        }\n    }\n    if max == min {\n        return numbers\n\
    \    }\n    for i, n := range numbers {\n        numbers[i] = (n - min) / (max\
    \ - min)\n    }\n    return numbers\n}\n\nfunc TestRescale_To_Unit(t *testing.T)\
    \ {\n  candidate := rescale_to_unit\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{2.0,\
    \ 49.9}), expected: []float64{0.0, 1.0} },\n     { actual: candidate([]float64{100.0,\
    \ 49.9}), expected: []float64{1.0, 0.0} },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), expected: []float64{0.0, 0.25, 0.5, 0.75, 1.0} },\n  \
    \   { actual: candidate([]float64{2.0, 1.0, 5.0, 3.0, 4.0}), expected: []float64{0.25,\
    \ 0.0, 1.0, 0.5, 0.75} },\n     { actual: candidate([]float64{12.0, 11.0, 15.0,\
    \ 13.0, 14.0}), expected: []float64{0.25, 0.0, 1.0, 0.5, 0.75} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074525
