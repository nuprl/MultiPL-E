language: go_test.go
name: HumanEval_123_get_odd_collatz
results:
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var collatz []int\n    for n != 1 {\n        if n % 2 == 1\
    \ {\n            collatz = append(collatz, n)\n        }\n        if n % 2 ==\
    \ 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n  \
    \      }\n    }\n    collatz = append(collatz, 1)\n    return collatz\n}\n\nfunc\
    \ TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpylt2l92l_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpylt2l92l_test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpylt2l92l_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var collatz []int\n    for n > 1 {\n        collatz = append(collatz,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n  \
    \  var odd_collatz []int\n    for _, v := range collatz {\n        if v % 2 ==\
    \ 1 {\n            odd_collatz = append(odd_collatz, v)\n        }\n    }\n  \
    \  return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var collatz []int\n    collatz = append(collatz,\
    \ n)\n    for n != 1 {\n        if n % 2 == 0 {\n            n = n / 2\n     \
    \   } else {\n            n = 3 * n + 1\n        }\n        collatz = append(collatz,\
    \ n)\n    }\n    var odd_collatz []int\n    for _, v := range collatz {\n    \
    \    if v % 2 == 1 {\n            odd_collatz = append(odd_collatz, v)\n     \
    \   }\n    }\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpq8bstrd2_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpq8bstrd2_test.go:63: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpq8bstrd2_test.go:63: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var result []int\n    for n > 1 {\n \
    \       if n % 2 == 1 {\n            result = append(result, n)\n        }\n \
    \       if n % 2 == 0 {\n            n = n / 2\n        } else {\n           \
    \ n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    result :=\
    \ []int{}\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpfs9sv15a_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpfs9sv15a_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpfs9sv15a_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var odd_collatz\
    \ []int\n    for n != 1 {\n        if n % 2 == 1 {\n            odd_collatz =\
    \ append(odd_collatz, n)\n        }\n        if n % 2 == 0 {\n            n =\
    \ n / 2\n        } else {\n            n = 3 * n + 1\n        }\n    }\n    odd_collatz\
    \ = append(odd_collatz, 1)\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpi2_9exqs_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpi2_9exqs_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpi2_9exqs_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmplhhibrxa_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmplhhibrxa_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmplhhibrxa_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmplhhibrxa_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var odd_collatz []int\n    for n > 1\
    \ {\n        if n % 2 == 1 {\n            odd_collatz = append(odd_collatz, n)\n\
    \        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n\
    \            n = 3 * n + 1\n        }\n    }\n    odd_collatz = append(odd_collatz,\
    \ 1)\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n\
    \  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp397sijnn_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp397sijnn_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp397sijnn_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 2
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = collatz(n)\n \
    \   }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpppwu3uzo_test.go:27:13: undefined: collatz

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    if n == 1 {\n        result = append(result,\
    \ 1)\n        return result\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    result := []int{}\n    for n > 1 {\n        if n % 2 == 1\
    \ {\n            result = append(result, n)\n        }\n        n = n / 2\n  \
    \  }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpj4oxm9zo_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpj4oxm9zo_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpj4oxm9zo_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    result :=\
    \ []int{}\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpi2dwgku3_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpi2dwgku3_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpi2dwgku3_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var collatz []int\n    for n > 1 {\n        collatz = append(collatz,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n  \
    \  var odd_collatz []int\n    for _, v := range collatz {\n        if v % 2 ==\
    \ 1 {\n            odd_collatz = append(odd_collatz, v)\n        }\n    }\n  \
    \  return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n != 1 {\n        if n % 2 == 1\
    \ {\n            result = append(result, n)\n        }\n        if n % 2 == 0\
    \ {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n    \
    \    }\n    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n != 1 {\n        if n % 2 == 1\
    \ {\n            result = append(result, n)\n        }\n        if n % 2 == 0\
    \ {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n    \
    \    }\n    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n != 1 {\n        if n % 2 == 1\
    \ {\n            result = append(result, n)\n        }\n        if n % 2 == 0\
    \ {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n    \
    \    }\n    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    if n == 1 {\n        result = append(result,\
    \ 1)\n        return result\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var result []int\n    for n > 1 {\n \
    \       if n % 2 == 1 {\n            result = append(result, n)\n        }\n \
    \       if n % 2 == 0 {\n            n = n / 2\n        } else {\n           \
    \ n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var odd_collatz []int\n    for n > 1 {\n        if n % 2 ==\
    \ 1 {\n            odd_collatz = append(odd_collatz, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    odd_collatz = append(odd_collatz, 1)\n    return\
    \ odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpzgmeoxve_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpzgmeoxve_test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpzgmeoxve_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var result []int\n    for n != 1 {\n\
    \        if n % 2 == 1 {\n            result = append(result, n)\n        }\n\
    \        if n % 2 == 0 {\n            n = n / 2\n        } else {\n          \
    \  n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1lw3mpi3_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1lw3mpi3_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1lw3mpi3_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n != 1 {\n        if n % 2 == 1\
    \ {\n            result = append(result, n)\n        }\n        if n % 2 == 0\
    \ {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n    \
    \    }\n    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var res []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            res = append(res, n)\n        }\n        n = n / 2\n    }\n    res\
    \ = append(res, 1)\n    return res\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpny614cmm_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpny614cmm_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpny614cmm_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    if n == 1 {\n        result = append(result,\
    \ 1)\n        return result\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    var collatz\
    \ []int\n    for n > 1 {\n        collatz = append(collatz, n)\n        if n %\
    \ 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n\
    \        }\n    }\n    collatz = append(collatz, 1)\n    var odd_collatz []int\n\
    \    for _, v := range collatz {\n        if v % 2 == 1 {\n            odd_collatz\
    \ = append(odd_collatz, v)\n        }\n    }\n    return odd_collatz\n}\n\nfunc\
    \ TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmph6gtzv6c_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmph6gtzv6c_test.go:60: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmph6gtzv6c_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var collatz []int\n    for n > 1 {\n        collatz = append(collatz,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n  \
    \  var odd_collatz []int\n    for _, v := range collatz {\n        if v % 2 ==\
    \ 1 {\n            odd_collatz = append(odd_collatz, v)\n        }\n    }\n  \
    \  return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n != 1 {\n        if n % 2 == 1\
    \ {\n            result = append(result, n)\n        }\n        if n % 2 == 0\
    \ {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n    \
    \    }\n    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var odd_collatz []int\n    for n != 1\
    \ {\n        if n % 2 == 1 {\n            odd_collatz = append(odd_collatz, n)\n\
    \        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n\
    \            n = 3 * n + 1\n        }\n    }\n    odd_collatz = append(odd_collatz,\
    \ 1)\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n\
    \  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpbiuw3rbv_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpbiuw3rbv_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpbiuw3rbv_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var collatz\
    \ []int\n    for n != 1 {\n        collatz = append(collatz, n)\n        if n\
    \ % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n +\
    \ 1\n        }\n    }\n    collatz = append(collatz, 1)\n    var odd_collatz []int\n\
    \    for _, v := range collatz {\n        if v % 2 == 1 {\n            odd_collatz\
    \ = append(odd_collatz, v)\n        }\n    }\n    return odd_collatz\n}\n\nfunc\
    \ TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpjetmc55s_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpjetmc55s_test.go:60: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpjetmc55s_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var result []int\n    for n != 1 {\n\
    \        if n % 2 == 1 {\n            result = append(result, n)\n        }\n\
    \        if n % 2 == 0 {\n            n = n / 2\n        } else {\n          \
    \  n = n * 3 + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpq_bud3n7_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpq_bud3n7_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpq_bud3n7_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpckdbfyda_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpckdbfyda_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpckdbfyda_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmpckdbfyda_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var collatz\
    \ []int\n    for n > 1 {\n        collatz = append(collatz, n)\n        if n %\
    \ 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n\
    \        }\n    }\n    collatz = append(collatz, 1)\n    var odd_collatz []int\n\
    \    for _, v := range collatz {\n        if v % 2 == 1 {\n            odd_collatz\
    \ = append(odd_collatz, v)\n        }\n    }\n    return odd_collatz\n}\n\nfunc\
    \ TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphye7ay87_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphye7ay87_test.go:60: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphye7ay87_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = n * 3 + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpp24ylhzk_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpp24ylhzk_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpp24ylhzk_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    if n == 1 {\n        result = append(result,\
    \ 1)\n        return result\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    if n == 1 {\n        result = append(result,\
    \ 1)\n        return result\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var collatz []int\n    for n > 1 {\n        collatz = append(collatz,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n  \
    \  var odd_collatz []int\n    for _, v := range collatz {\n        if v % 2 ==\
    \ 1 {\n            odd_collatz = append(odd_collatz, v)\n        }\n    }\n  \
    \  return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var collatz\
    \ []int\n    for n != 1 {\n        collatz = append(collatz, n)\n        if n\
    \ % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n +\
    \ 1\n        }\n    }\n    collatz = append(collatz, 1)\n    var odd_collatz []int\n\
    \    for _, v := range collatz {\n        if v % 2 == 1 {\n            odd_collatz\
    \ = append(odd_collatz, v)\n        }\n    }\n    return odd_collatz\n}\n\nfunc\
    \ TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpjetmc55s_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpjetmc55s_test.go:60: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpjetmc55s_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var collatz []int\n    for n != 1 {\n        collatz = append(collatz,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n  \
    \  var odd_collatz []int\n    for _, v := range collatz {\n        if v % 2 !=\
    \ 0 {\n            odd_collatz = append(odd_collatz, v)\n        }\n    }\n  \
    \  return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpc2ibdxnk_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpc2ibdxnk_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpc2ibdxnk_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    if n == 1 {\n        result = append(result,\
    \ 1)\n        return result\n    }\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpm3hyveip_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpm3hyveip_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpm3hyveip_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = (n + 1) / 2\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpkeqv0nd0_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=1)]'\n    ---\
    \ FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpkeqv0nd0_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpkeqv0nd0_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var result []int\n    for n != 1 {\n\
    \        if n % 2 == 1 {\n            result = append(result, n)\n        }\n\
    \        if n % 2 == 0 {\n            n = n / 2\n        } else {\n          \
    \  n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp1lw3mpi3_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp1lw3mpi3_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp1lw3mpi3_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var collatz []int\n    for n != 1 {\n        if n % 2 == 1\
    \ {\n            collatz = append(collatz, n)\n        }\n        if n % 2 ==\
    \ 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n  \
    \      }\n    }\n    collatz = append(collatz, 1)\n    return collatz\n}\n\nfunc\
    \ TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpylt2l92l_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpylt2l92l_test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpylt2l92l_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var result []int\n    for n > 1 {\n \
    \       if n % 2 == 1 {\n            result = append(result, n)\n        }\n \
    \       if n % 2 == 0 {\n            n = n / 2\n        } else {\n           \
    \ n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    if n == 1 {\n        result = append(result,\
    \ 1)\n        return result\n    }\n    for n != 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp7t97q0td_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    if n <= 0 {\n        return result\n\
    \    }\n    result = append(result, n)\n    for n != 1 {\n        if n % 2 ==\
    \ 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n  \
    \      }\n        result = append(result, n)\n    }\n    return result\n}\n\n\
    func TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpcq0poldw_test.go:54: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpcq0poldw_test.go:54: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpcq0poldw_test.go:54: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var odd_collatz []int\n    for n > 1 {\n        if n % 2 ==\
    \ 1 {\n            odd_collatz = append(odd_collatz, n)\n        }\n        if\
    \ n % 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n\
    \ + 1\n        }\n    }\n    odd_collatz = append(odd_collatz, 1)\n    return\
    \ odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpzgmeoxve_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpzgmeoxve_test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpzgmeoxve_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var result []int\n    for n > 1 {\n \
    \       if n % 2 == 1 {\n            result = append(result, n)\n        }\n \
    \       if n % 2 == 0 {\n            n = n / 2\n        } else {\n           \
    \ n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var collatz []int\n    for n > 1 {\n        collatz = append(collatz,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n  \
    \  var odd_collatz []int\n    for _, v := range collatz {\n        if v % 2 ==\
    \ 1 {\n            odd_collatz = append(odd_collatz, v)\n        }\n    }\n  \
    \  return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var result []int\n    for n > 1 {\n \
    \       if n % 2 == 1 {\n            result = append(result, n)\n        }\n \
    \       if n % 2 == 0 {\n            n = n / 2\n        } else {\n           \
    \ n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    if n == 1 {\n        result = append(result,\
    \ 1)\n        return result\n    }\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        if n % 2 == 0 {\n\
    \            n = n / 2\n        } else {\n            n = 3 * n + 1\n        }\n\
    \    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpm3hyveip_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpm3hyveip_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpm3hyveip_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var ret []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            ret = append(ret, n)\n        }\n        n = n / 2\n    }\n    ret\
    \ = append(ret, 1)\n    return ret\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T)\
    \ {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphj39r_7y_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmphj39r_7y_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmphj39r_7y_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var collatz []int\n    for n != 1 {\n        collatz = append(collatz,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n  \
    \  var odd_collatz []int\n    for _, v := range collatz {\n        if v % 2 !=\
    \ 0 {\n            odd_collatz = append(odd_collatz, v)\n        }\n    }\n  \
    \  return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpc2ibdxnk_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpc2ibdxnk_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpc2ibdxnk_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var odd_collatz\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            odd_collatz = append(odd_collatz,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    odd_collatz = append(odd_collatz,\
    \ 1)\n    return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n\
    \  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14),\
    \ expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected:\
    \ []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n\
    \     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp9ugvw6uu_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp9ugvw6uu_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp9ugvw6uu_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n > 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpd0saibs2_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmp2_taz1lo_test.go:42:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__3\
    \ (0.00s)\n        tmp2_taz1lo_test.go:42: expected '[%!s(int=1)]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n != 1 {\n        if n % 2 == 1\
    \ {\n            result = append(result, n)\n        }\n        if n % 2 == 0\
    \ {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n    \
    \    }\n    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpr7w7i8r__test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmptbxizzdw_test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var result\
    \ []int\n    for n != 1 {\n        if n % 2 == 1 {\n            result = append(result,\
    \ n)\n        }\n        if n % 2 == 0 {\n            n = n / 2\n        } else\
    \ {\n            n = 3 * n + 1\n        }\n    }\n    result = append(result,\
    \ 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpt7q9or6y_test.go:56: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    if n % 2\
    \ == 0 {\n        return get_odd_collatz(n / 2)\n    }\n    return append(get_odd_collatz(3\
    \ * n + 1), n)\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate :=\
    \ get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=1) %!s(int=5) %!s(int=13)\
    \ %!s(int=17) %!s(int=11) %!s(int=7)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmppau9_xas_test.go:47: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n != 1 {\n        if n % 2 == 1\
    \ {\n            result = append(result, n)\n        }\n        if n % 2 == 0\
    \ {\n            n = n / 2\n        } else {\n            n = n * 3 + 1\n    \
    \    }\n    }\n    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpo8mb9a7t_test.go:53: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpo8mb9a7t_test.go:53: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpo8mb9a7t_test.go:53: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073998
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var collatz []int\n    for n > 1 {\n        collatz = append(collatz,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    collatz = append(collatz, 1)\n  \
    \  var odd_collatz []int\n    for _, v := range collatz {\n        if v % 2 ==\
    \ 1 {\n            odd_collatz = append(odd_collatz, v)\n        }\n    }\n  \
    \  return odd_collatz\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate\
    \ := get_odd_collatz\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(14), expected:\
    \ []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5), expected: []int{1,\
    \ 5} },\n     { actual: candidate(12), expected: []int{1, 3, 5} },\n     { actual:\
    \ candidate(1), expected: []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpgkvc83ge_test.go:57: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n == 1 {\n        return []int{1}\n    }\n    var collatz\
    \ []int\n    for n > 1 {\n        collatz = append(collatz, n)\n        if n %\
    \ 2 == 0 {\n            n = n / 2\n        } else {\n            n = 3 * n + 1\n\
    \        }\n    }\n    collatz = append(collatz, 1)\n    var odd_collatz []int\n\
    \    for _, v := range collatz {\n        if v % 2 == 1 {\n            odd_collatz\
    \ = append(odd_collatz, v)\n        }\n    }\n    return odd_collatz\n}\n\nfunc\
    \ TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11, 13, 17}\
    \ },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual: candidate(12),\
    \ expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected: []int{1}\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmphye7ay87_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmphye7ay87_test.go:60: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmphye7ay87_test.go:60: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n > 1 {\n        if n % 2 == 1 {\n\
    \            result = append(result, n)\n        }\n        n = n / 2\n    }\n\
    \    result = append(result, 1)\n    return result\n}\n\nfunc TestGet_Odd_Collatz(t\
    \ *testing.T) {\n  candidate := get_odd_collatz\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(14), expected: []int{1, 5, 7, 11, 13, 17} },\n     { actual: candidate(5),\
    \ expected: []int{1, 5} },\n     { actual: candidate(12), expected: []int{1, 3,\
    \ 5} },\n     { actual: candidate(1), expected: []int{1} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpeif049vw_test.go:49: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=3) %!s(int=1)]'\n\
    \    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n        tmpeif049vw_test.go:49:\
    \ expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL:\
    \ TestGet_Odd_Collatz/test_num__2 (0.00s)\n        tmpeif049vw_test.go:49: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=5)]', got '[%!s(int=3) %!s(int=1)]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n == 1\
    \ {\n        return []int{1}\n    }\n    var result []int\n    for n > 1 {\n \
    \       if n % 2 == 1 {\n            result = append(result, n)\n        }\n \
    \       if n % 2 == 0 {\n            n = n / 2\n        } else {\n           \
    \ n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=7) %!s(int=11) %!s(int=17)\
    \ %!s(int=13) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=5)]',\
    \ got '[%!s(int=5) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmp62dkmrdg_test.go:59: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=3) %!s(int=5) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073996
- exit_code: 1
  program: "package get_odd_collatz_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Given a positive integer n, return a sorted list that has the odd numbers\
    \ in collatz sequence.\n// The Collatz conjecture is a conjecture in mathematics\
    \ that concerns a sequence defined\n// as follows: start with any positive integer\
    \ n. Then each term is obtained from the \n// previous term as follows: if the\
    \ previous term is even, the next term is one half of \n// the previous term.\
    \ If the previous term is odd, the next term is 3 times the previous\n// term\
    \ plus 1. The conjecture is that no matter what value of n, the sequence will\
    \ always reach 1.\n// Note: \n// 1. Collatz(1) is [1].\n// 2. returned list sorted\
    \ in increasing order.\n// For example:\n// get_odd_collatz(5) returns [1, 5]\
    \ # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are\
    \ only 1, and 5.\n// >>> get_odd_collatz(5)\n// []int{1, 5}\nfunc get_odd_collatz(n\
    \ int) []int {\n    var result []int\n    for n != 1 {\n        result = append(result,\
    \ n)\n        if n % 2 == 0 {\n            n = n / 2\n        } else {\n     \
    \       n = 3 * n + 1\n        }\n    }\n    result = append(result, 1)\n    return\
    \ result\n}\n\nfunc TestGet_Odd_Collatz(t *testing.T) {\n  candidate := get_odd_collatz\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(14), expected: []int{1, 5, 7, 11,\
    \ 13, 17} },\n     { actual: candidate(5), expected: []int{1, 5} },\n     { actual:\
    \ candidate(12), expected: []int{1, 3, 5} },\n     { actual: candidate(1), expected:\
    \ []int{1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Odd_Collatz (0.00s)\n    --- FAIL: TestGet_Odd_Collatz/test_num__0\
    \ (0.00s)\n        tmpxljioui__test.go:51: expected '[%!s(int=1) %!s(int=5) %!s(int=7)\
    \ %!s(int=11) %!s(int=13) %!s(int=17)]', got '[%!s(int=14) %!s(int=7) %!s(int=22)\
    \ %!s(int=11) %!s(int=34) %!s(int=17) %!s(int=52) %!s(int=26) %!s(int=13) %!s(int=40)\
    \ %!s(int=20) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2)\
    \ %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__1 (0.00s)\n      \
    \  tmpxljioui__test.go:51: expected '[%!s(int=1) %!s(int=5)]', got '[%!s(int=5)\
    \ %!s(int=16) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestGet_Odd_Collatz/test_num__2\
    \ (0.00s)\n        tmpxljioui__test.go:51: expected '[%!s(int=1) %!s(int=3) %!s(int=5)]',\
    \ got '[%!s(int=12) %!s(int=6) %!s(int=3) %!s(int=10) %!s(int=5) %!s(int=16) %!s(int=8)\
    \ %!s(int=4) %!s(int=2) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074112
