language: go_test.go
name: HumanEval_101_words_string
results:
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // your code here\n  \
    \  return nil\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate := words_string\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpi3gonrdg_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmpi3gonrdg_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpi3gonrdg_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpi3gonrdg_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmpi3gonrdg_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   for _, word := range s {\n        if word == ' ' || word == ',' {\n      \
    \      continue\n        }\n        words = append(words, string(word))\n    }\n\
    \    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpsk4gleyl_test.go:44:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmpsk4gleyl_test.go:44: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, r := range s {\n        if r == ' ' || r == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(r)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, char := range s {\n        if char == ' ' || char\
    \ == ',' {\n            words = append(words, word)\n            word = \"\"\n\
    \        } else {\n            word += string(char)\n        }\n    }\n    words\
    \ = append(words, word)\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp7vbqdp0u_test.go:48: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmp7vbqdp0u_test.go:48: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp7vbqdp0u_test.go:48: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp7vbqdp0u_test.go:48:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmp7vbqdp0u_test.go:48:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   for _, word := range s {\n        if word == ' ' || word == ',' {\n      \
    \      continue\n        }\n        words = append(words, string(word))\n    }\n\
    \    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpsk4gleyl_test.go:44:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmpsk4gleyl_test.go:44: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, char := range s {\n        if char == ' ' || char\
    \ == ',' {\n            words = append(words, word)\n            word = \"\"\n\
    \        } else {\n            word += string(char)\n        }\n    }\n    words\
    \ = append(words, word)\n    return words\n}\n\nfunc TestWords_String(t *testing.T)\
    \ {\n  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp7vbqdp0u_test.go:48: expected '[Hi my name is John]', got\
    \ '[Hi  my name is John]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n\
    \        tmp7vbqdp0u_test.go:48: expected '[One two three four five six]', got\
    \ '[One  two  three  four  five  six]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp7vbqdp0u_test.go:48: expected '[Hi my name]', got '[Hi \
    \ my name]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp7vbqdp0u_test.go:48:\
    \ expected '[One two three four five six]', got '[One   two  three  four  five\
    \  six ]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n        tmp7vbqdp0u_test.go:48:\
    \ expected '[ahmed gamal]', got '[ahmed       gamal]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   for _, word := range s {\n        if word == ' ' || word == ',' {\n      \
    \      continue\n        }\n        words = append(words, string(word))\n    }\n\
    \    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpsk4gleyl_test.go:44:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmpsk4gleyl_test.go:44: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   for _, word := range s {\n        if word == ' ' || word == ',' {\n      \
    \      continue\n        }\n        words = append(words, string(word))\n    }\n\
    \    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpsk4gleyl_test.go:44:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmpsk4gleyl_test.go:44: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   for _, word := range s {\n        if word == ' ' || word == ',' {\n      \
    \      words = append(words, \"\")\n        } else {\n            words[len(words)-1]\
    \ += string(word)\n        }\n    }\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\npanic: runtime error: index out of\
    \ range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\n\
    goroutine 6 [running]:\ntesting.tRunner.func1.2({0x514800, 0xc000014360})\n\t\
    /home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x514800,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.words_string(...)\n\t/tmp/tmptbd5rils_test.go:21\n\
    command-line-arguments_test.TestWords_String(0x0?)\n\t/tmp/tmptbd5rils_test.go:34\
    \ +0x143b\ntesting.tRunner(0xc0001a0340, 0x52a1c0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    words := make([]string,\
    \ 0)\n    word := \"\"\n    for _, c := range s {\n        if c == ' ' || c ==\
    \ ',' {\n            if word != \"\" {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if word != \"\" {\n        words\
    \ = append(words, word)\n    }\n    return words\n}\n\nfunc TestWords_String(t\
    \ *testing.T) {\n  candidate := words_string\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"} },\n     { actual: candidate(\"One, two, three, four, five,\
    \ six\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\",\
    \ \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected: []string{\"\
    Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two, three, four,\
    \ five, six,\"), expected: []string{\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // TODO: implement\n \
    \   return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmplem10mfd_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmplem10mfd_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmplem10mfd_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmplem10mfd_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmplem10mfd_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    // TODO: implement me\n\
    \    return []string{}\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate\
    \ := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name\
    \ is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n\
    \     { actual: candidate(\"One, two, three, four, five, six\"), expected: []string{\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    Hi, my name\"), expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual:\
    \ candidate(\"One,, two, three, four, five, six,\"), expected: []string{\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\
    \"), expected: []string{} },\n     { actual: candidate(\"ahmed     , gamal\"),\
    \ expected: []string{\"ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmp20aa9ih3_test.go:38: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmp20aa9ih3_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmp20aa9ih3_test.go:38: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmp20aa9ih3_test.go:38:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmp20aa9ih3_test.go:38: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 0
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' || c == ','\
    \ {\n            if len(word) > 0 {\n                words = append(words, word)\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n\
    \  candidate := words_string\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    Hi, my name is John\"), expected: []string{\"Hi\", \"my\", \"name\", \"is\", \"\
    John\"} },\n     { actual: candidate(\"One, two, three, four, five, six\"), expected:\
    \ []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"} },\n    \
    \ { actual: candidate(\"Hi, my name\"), expected: []string{\"Hi\", \"my\", \"\
    name\"} },\n     { actual: candidate(\"One,, two, three, four, five, six,\"),\
    \ expected: []string{\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    } },\n     { actual: candidate(\"\"), expected: []string{} },\n     { actual:\
    \ candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\", \"gamal\"} },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    return nil\n}\n\nfunc\
    \ TestWords_String(t *testing.T) {\n  candidate := words_string\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"Hi, my name is John\"), expected: []string{\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"One, two,\
    \ three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\", \"\
    four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"One,, two,\
    \ three, four, five, six,\"), expected: []string{\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected: []string{}\
    \ },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"ahmed\"\
    , \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name is John]', got\
    \ '[]'\n    --- FAIL: TestWords_String/test_num__1 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[Hi my name]', got '[]'\n\
    \    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmptvqup9c4_test.go:37:\
    \ expected '[One two three four five six]', got '[]'\n    --- FAIL: TestWords_String/test_num__5\
    \ (0.00s)\n        tmptvqup9c4_test.go:37: expected '[ahmed gamal]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
- exit_code: 1
  program: "package words_string_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// You will be given a string of words separated by commas or spaces. Your\
    \ task is\n// to split the string into words and return an array of the words.\n\
    // For example:\n// >>> words_string(\"Hi, my name is John\")\n// []string{\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"}\n// >>> words_string(\"One, two, three,\
    \ four, five, six\")\n// []string{\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"}\nfunc words_string(s string) []string {\n    var words []string\n \
    \   for _, word := range s {\n        if word == ' ' || word == ',' {\n      \
    \      continue\n        }\n        words = append(words, string(word))\n    }\n\
    \    return words\n}\n\nfunc TestWords_String(t *testing.T) {\n  candidate :=\
    \ words_string\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"Hi, my name is John\"), expected:\
    \ []string{\"Hi\", \"my\", \"name\", \"is\", \"John\"} },\n     { actual: candidate(\"\
    One, two, three, four, five, six\"), expected: []string{\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"Hi, my name\"),\
    \ expected: []string{\"Hi\", \"my\", \"name\"} },\n     { actual: candidate(\"\
    One,, two, three, four, five, six,\"), expected: []string{\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"} },\n     { actual: candidate(\"\"), expected:\
    \ []string{} },\n     { actual: candidate(\"ahmed     , gamal\"), expected: []string{\"\
    ahmed\", \"gamal\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWords_String (0.00s)\n    --- FAIL: TestWords_String/test_num__0\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[Hi my name is John]', got\
    \ '[H i m y n a m e i s J o h n]'\n    --- FAIL: TestWords_String/test_num__1\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[One two three four five\
    \ six]', got '[O n e t w o t h r e e f o u r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__2\
    \ (0.00s)\n        tmpsk4gleyl_test.go:44: expected '[Hi my name]', got '[H i\
    \ m y n a m e]'\n    --- FAIL: TestWords_String/test_num__3 (0.00s)\n        tmpsk4gleyl_test.go:44:\
    \ expected '[One two three four five six]', got '[O n e t w o t h r e e f o u\
    \ r f i v e s i x]'\n    --- FAIL: TestWords_String/test_num__5 (0.00s)\n    \
    \    tmpsk4gleyl_test.go:44: expected '[ahmed gamal]', got '[a h m e d g a m a\
    \ l]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073877
