name: HumanEval_160_do_algebra
language: go_test.go
prompt: "package do_algebra_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given two lists operator, and operand. The first list has basic algebra operations,\
  \ and \n// the second list is a list of integers. Use the two given lists to build\
  \ the algebric \n// expression and return the evaluation of this expression.\n//\
  \ The basic algebra operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication\
  \ ( * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
  \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
  // => result = 9\n// Note:\n// The length of operator list is equal to the length\
  \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
  // Operator list has at least one operator, and operand list has at least two operands.\n\
  func do_algebra(operator []string, operand []int) int {\n"
tests: "func TestDo_Algebra(t *testing.T) {\n  candidate := do_algebra\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]string{\"**\", \"*\", \"+\"}, []int{2, 3,\
  \ 4, 5}), expected: 37 },\n     { actual: candidate([]string{\"+\", \"*\", \"-\"\
  }, []int{2, 3, 4, 5}), expected: 9 },\n     { actual: candidate([]string{\"//\"\
  , \"*\"}, []int{7, 3, 4}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result int\n    if len(operator) == 0 || len(operand) == 0\
    \ {\n        return 0\n    }\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    result = operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    var result\
    \ int\n    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n   \
    \     switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    var result int\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = result ^ operand[i+1]\n        }\n  \
    \  }\n    return result\n}\n", "    var result int\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n \
    \   }\n    var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    //\
    \ Write your code here\n    return 0\n}\n", "    // Write your code here\n   \
    \ return 0\n}\n", "    if len(operator) == 0 {\n        return operand[0]\n  \
    \  }\n    if len(operand) == 0 {\n        return 0\n    }\n    result := operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = result ^ operand[i+1]\n        }\n  \
    \  }\n    return result\n}\n", "    if len(operator) == 0 || len(operand) == 0\
    \ {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n   \
    \     return 0\n    }\n    result := operand[0]\n    for i, op := range operator\
    \ {\n        switch op {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 1 {\n     \
    \   return operand[0]\n    }\n    if len(operator) != len(operand) - 1 {\n   \
    \     return 0\n    }\n    var result int\n    for i, op := range operator {\n\
    \        switch op {\n        case \"+\":\n            result += operand[i] +\
    \ operand[i+1]\n        case \"-\":\n            result += operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result += operand[i] * operand[i+1]\n      \
    \  case \"//\":\n            result += operand[i] / operand[i+1]\n        case\
    \ \"**\":\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n\
    \    return result\n}\n", "    var result int\n    result = operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand) ==\
    \ 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operator) == 2 {\n        return do_algebra_2(operator[0],\
    \ operand[0], operand[1])\n    }\n    if len(operator) == 3 {\n        return\
    \ do_algebra_3(operator[0], operand[0], operator[1], operand[1], operand[2])\n\
    \    }\n    if len(operator) == 4 {\n        return do_algebra_4(operator[0],\
    \ operand[0], operator[1], operand[1], operator[2], operand[2], operand[3])\n\
    \    }\n    if len(operator) == 5 {\n        return do_algebra_5(operator[0],\
    \ operand[0], operator[1], operand[1], operator[2], operand[2], operator[3], operand[3],\
    \ operand[4])\n    }\n    return 0\n}\n", "    if len(operator) == 0 {\n     \
    \   return operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 2 {\n        switch operator[0] {\n           \
    \ case \"+\":\n                return operand[0] + operand[1]\n            case\
    \ \"-\":\n                return operand[0] - operand[1]\n            case \"\
    *\":\n                return operand[0] * operand[1]\n            case \"//\"\
    :\n                return operand[0] / operand[1]\n            case \"**\":\n\
    \                return operand[0] ^ operand[1]\n        }\n    }\n    return\
    \ 0\n}\n", "    var result int\n    if len(operator) == 0 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 0 {\n        return 0\n    }\n    result = operand[0]\n\
    \    for i, op := range operator {\n        switch op {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n \
    \   }\n    var result int\n    for i := 0; i < len(operator); i++ {\n        if\
    \ operator[i] == \"+\" {\n            result = operand[i] + operand[i+1]\n   \
    \     } else if operator[i] == \"-\" {\n            result = operand[i] - operand[i+1]\n\
    \        } else if operator[i] == \"*\" {\n            result = operand[i] * operand[i+1]\n\
    \        } else if operator[i] == \"//\" {\n            result = operand[i] /\
    \ operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = operand[i] ^ operand[i+1]\n        }\n        operand[i+1] = result\n    }\n\
    \    return result\n}\n", "    var result int\n    result = operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n  \
    \  }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n  \
    \  }\n    if len(operator) != len(operand) - 1 {\n        return 0\n    }\n  \
    \  result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        if\
    \ operator[i] == \"+\" {\n            result += operand[i+1]\n        } else if\
    \ operator[i] == \"-\" {\n            result -= operand[i+1]\n        } else if\
    \ operator[i] == \"*\" {\n            result *= operand[i+1]\n        } else if\
    \ operator[i] == \"//\" {\n            result /= operand[i+1]\n        } else\
    \ if operator[i] == \"**\" {\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n    var result int\n    for\
    \ i, op := range operator {\n        switch op {\n        case \"+\":\n      \
    \      result += operand[i] + operand[i+1]\n        case \"-\":\n            result\
    \ += operand[i] - operand[i+1]\n        case \"*\":\n            result += operand[i]\
    \ * operand[i+1]\n        case \"//\":\n            result += operand[i] / operand[i+1]\n\
    \        case \"**\":\n            result += operand[i] ^ operand[i+1]\n     \
    \   }\n    }\n    return result\n}\n", "    var result int = operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    for i, op\
    \ := range operator {\n        switch op {\n        case \"+\":\n            result\
    \ += operand[i] + operand[i+1]\n        case \"-\":\n            result += operand[i]\
    \ - operand[i+1]\n        case \"*\":\n            result += operand[i] * operand[i+1]\n\
    \        case \"//\":\n            result += operand[i] / operand[i+1]\n     \
    \   case \"**\":\n            result += operand[i] ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand) ==\
    \ 0 {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n \
    \       return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    result = operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n  \
    \  return result\n}\n", "    if len(operator) == 0 || len(operand) == 0 {\n  \
    \      return 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 {\n   \
    \     return operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 2 {\n        return operand[0] + operand[1]\n \
    \   }\n    if len(operator) == 1 {\n        return operand[0] + operand[1]\n \
    \   }\n    if len(operator) == 2 {\n        return operand[0] + operand[1] + operand[2]\n\
    \    }\n    return 0\n}\n", "    var result int\n    for i, op := range operator\
    \ {\n        switch op {\n        case \"+\":\n            result += operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            result += operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result += operand[i] * operand[i+1]\n      \
    \  case \"//\":\n            result += operand[i] / operand[i+1]\n        case\
    \ \"**\":\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n\
    \    return result\n}\n", "    var result int\n    if len(operator) == 0 || len(operand)\
    \ < 2 {\n        return 0\n    }\n    result = operand[0]\n    for i := 0; i <\
    \ len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    var result int\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result = operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result = operand[i] - operand[i+1]\n       \
    \ case \"*\":\n            result = operand[i] * operand[i+1]\n        case \"\
    //\":\n            result = operand[i] / operand[i+1]\n        case \"**\":\n\
    \            result = operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    result\
    \ := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n            case \"+\":\n                result += operand[i+1]\n       \
    \     case \"-\":\n                result -= operand[i+1]\n            case \"\
    *\":\n                result *= operand[i+1]\n            case \"//\":\n     \
    \           result /= operand[i+1]\n            case \"**\":\n               \
    \ result = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", " \
    \   if len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n  \
    \  if len(operator) != len(operand) - 1 {\n        return 0\n    }\n    result\
    \ := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand) ==\
    \ 0 {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n \
    \       return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    var result int\n    for i, op := range operator\
    \ {\n        switch op {\n        case \"+\":\n            result += operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            result += operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result += operand[i] * operand[i+1]\n      \
    \  case \"//\":\n            result += operand[i] / operand[i+1]\n        case\
    \ \"**\":\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n\
    \    return result\n}\n", "    // Write your code here\n    return 0\n}\n", " \
    \   if len(operator) == 0 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   if operator[0] == \"+\" {\n            return operand[0] + operand[1]\n  \
    \      } else if operator[0] == \"-\" {\n            return operand[0] - operand[1]\n\
    \        } else if operator[0] == \"*\" {\n            return operand[0] * operand[1]\n\
    \        } else if operator[0] == \"//\" {\n            return operand[0] / operand[1]\n\
    \        } else if operator[0] == \"**\" {\n            return operand[0] ^ operand[1]\n\
    \        }\n    }\n    return 0\n}\n", "    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n \
    \   }\n    if len(operand) == 2 {\n        return do_algebra_helper(operator[0],\
    \ operand[0], operand[1])\n    }\n    if len(operator) == 1 {\n        return\
    \ do_algebra_helper(operator[0], operand[0], do_algebra(operator, operand[1:]))\n\
    \    }\n    return do_algebra_helper(operator[0], operand[0], do_algebra(operator[1:],\
    \ operand[1:]))\n}\n", "    if len(operator) == 0 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 2 {\n        switch operator[0] {\n            case \"+\":\n            \
    \    return operand[0] + operand[1]\n            case \"-\":\n               \
    \ return operand[0] - operand[1]\n            case \"*\":\n                return\
    \ operand[0] * operand[1]\n            case \"//\":\n                return operand[0]\
    \ / operand[1]\n            case \"**\":\n                return operand[0] ^\
    \ operand[1]\n        }\n    }\n    if len(operand) == 3 {\n        switch operator[0]\
    \ {\n            case \"+\":\n                return operand[0] + operand[1] +\
    \ operand[2]\n            case \"-\":\n                return operand[0] - operand[1]\
    \ - operand[2]\n            case \"*\":\n                return operand[0] * operand[1]\
    \ * operand[2]\n            case \"//\":\n                return operand[0] /\
    \ operand[1] / operand[2]\n            case \"**\":\n                return operand[0]\
    \ ^ operand[1] ^ operand[2]\n        }\n    }\n    return 0\n}\n", "    if len(operator)\
    \ == 0 {\n        return operand[0]\n    }\n    if len(operand) == 0 {\n     \
    \   return 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n            case \"+\":\n                result\
    \ += operand[i+1]\n            case \"-\":\n                result -= operand[i+1]\n\
    \            case \"*\":\n                result *= operand[i+1]\n           \
    \ case \"//\":\n                result /= operand[i+1]\n            case \"**\"\
    :\n                result = result ^ operand[i+1]\n            default:\n    \
    \            return 0\n        }\n    }\n    return result\n}\n", "    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    for i :=\
    \ 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\"\
    :\n            result = operand[i] + operand[i+1]\n        case \"-\":\n     \
    \       result = operand[i] - operand[i+1]\n        case \"*\":\n            result\
    \ = operand[i] * operand[i+1]\n        case \"//\":\n            result = operand[i]\
    \ / operand[i+1]\n        case \"**\":\n            result = operand[i] ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    // Write your code here\n   \
    \ return 0\n}\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n   \
    \ }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    var result\
    \ int\n    switch operator[0] {\n    case \"+\":\n        result = operand[0]\
    \ + operand[1]\n    case \"-\":\n        result = operand[0] - operand[1]\n  \
    \  case \"*\":\n        result = operand[0] * operand[1]\n    case \"//\":\n \
    \       result = operand[0] / operand[1]\n    case \"**\":\n        result = operand[0]\
    \ ^ operand[1]\n    }\n    return result + do_algebra(operator[1:], operand[1:])\n\
    }\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n  \
    \  }\n    if len(operator) != len(operand) - 1 {\n        return 0\n    }\n  \
    \  result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   switch operator[0] {\n            case \"+\":\n                return operand[0]\
    \ + operand[1]\n            case \"-\":\n                return operand[0] - operand[1]\n\
    \            case \"*\":\n                return operand[0] * operand[1]\n   \
    \         case \"//\":\n                return operand[0] / operand[1]\n     \
    \       case \"**\":\n                return operand[0] ^ operand[1]\n       \
    \ }\n    }\n    return 0\n}\n", "    var result int\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = result ^ operand[i+1]\n        }\n  \
    \  }\n    return result\n}\n", "    if len(operator) == 0 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 0 {\n        return 0\n    }\n    var result int\n\
    \    switch operator[0] {\n        case \"+\":\n            result = operand[0]\
    \ + operand[1]\n        case \"-\":\n            result = operand[0] - operand[1]\n\
    \        case \"*\":\n            result = operand[0] * operand[1]\n        case\
    \ \"//\":\n            result = operand[0] / operand[1]\n        case \"**\":\n\
    \            result = operand[0] ^ operand[1]\n    }\n    return do_algebra(operator[1:],\
    \ append([]int{result}, operand[2:]...))\n}\n", "    var result int\n    for i,\
    \ op := range operator {\n        switch op {\n        case \"+\":\n         \
    \   result += operand[i] + operand[i+1]\n        case \"-\":\n            result\
    \ += operand[i] - operand[i+1]\n        case \"*\":\n            result += operand[i]\
    \ * operand[i+1]\n        case \"//\":\n            result += operand[i] / operand[i+1]\n\
    \        case \"**\":\n            result += operand[i] ^ operand[i+1]\n     \
    \   }\n    }\n    return result\n}\n", "    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n \
    \   }\n    if len(operand) == 2 {\n        switch operator[0] {\n            case\
    \ \"+\":\n                return operand[0] + operand[1]\n            case \"\
    -\":\n                return operand[0] - operand[1]\n            case \"*\":\n\
    \                return operand[0] * operand[1]\n            case \"//\":\n  \
    \              return operand[0] / operand[1]\n            case \"**\":\n    \
    \            return operand[0] ^ operand[1]\n        }\n    }\n    return 0\n\
    }\n", "    if len(operator) == 0 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   switch operator[0] {\n            case \"+\": return operand[0] + operand[1]\n\
    \            case \"-\": return operand[0] - operand[1]\n            case \"*\"\
    : return operand[0] * operand[1]\n            case \"//\": return operand[0] /\
    \ operand[1]\n            case \"**\": return operand[0] ^ operand[1]\n      \
    \  }\n    }\n    return 0\n}\n", "    var result int\n    if len(operator) ==\
    \ 0 || len(operand) == 0 {\n        return result\n    }\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \        case \"+\":\n                result += operand[i+1]\n            case\
    \ \"-\":\n                result -= operand[i+1]\n            case \"*\":\n  \
    \              result *= operand[i+1]\n            case \"//\":\n            \
    \    result /= operand[i+1]\n            case \"**\":\n                result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n \
    \   for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n     \
    \   case \"+\":\n            result += operand[i+1]\n        case \"-\":\n   \
    \         result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n  \
    \  }\n    if len(operator) != len(operand) - 1 {\n        return 0\n    }\n  \
    \  if len(operator) == 1 {\n        return operand[0]\n    }\n    result := operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \        case \"+\":\n                result += operand[i+1]\n            case\
    \ \"-\":\n                result -= operand[i+1]\n            case \"*\":\n  \
    \              result *= operand[i+1]\n            case \"//\":\n            \
    \    result /= operand[i+1]\n            case \"**\":\n                result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n            default:\n\
    \                return 0\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n    if len(operator) == 1 {\n\
    \        return operand[0]\n    }\n    var result int\n    for i := 0; i < len(operator);\
    \ i++ {\n        if i == 0 {\n            result = operand[i]\n        }\n   \
    \     switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand)\
    \ < 2 {\n        return 0\n    }\n    result := operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n            case \"+\"\
    :\n                result += operand[i+1]\n            case \"-\":\n         \
    \       result -= operand[i+1]\n            case \"*\":\n                result\
    \ *= operand[i+1]\n            case \"//\":\n                result /= operand[i+1]\n\
    \            case \"**\":\n                result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    for i, op := range operator {\n        switch op {\n       \
    \ case \"+\":\n            result += operand[i] + operand[i+1]\n        case \"\
    -\":\n            result += operand[i] - operand[i+1]\n        case \"*\":\n \
    \           result += operand[i] * operand[i+1]\n        case \"//\":\n      \
    \      result += operand[i] / operand[i+1]\n        case \"**\":\n           \
    \ result += operand[i] ^ operand[i+1]\n        }\n    }\n    return result\n}\n",
  "    if len(operator) == 0 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n \
    \   }\n    if len(operator) == 2 {\n        return operand[0] + operand[1]\n \
    \   }\n    if len(operand) == 2 {\n        return operand[0] + operand[1]\n  \
    \  }\n    if len(operator) == 3 {\n        return operand[0] + operand[1] + operand[2]\n\
    \    }\n    if len(operand) == 3 {\n        return operand[0] + operand[1] + operand[2]\n\
    \    }\n    return 0\n}\n", "    if len(operator) == 0 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 0 {\n        return 0\n    }\n    result := operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \        case \"+\":\n                result += operand[i+1]\n            case\
    \ \"-\":\n                result -= operand[i+1]\n            case \"*\":\n  \
    \              result *= operand[i+1]\n            case \"//\":\n            \
    \    result /= operand[i+1]\n            case \"**\":\n                result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n", "    var result int\n    result = operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n    var result int\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i] + operand[i+1]\n        case \"-\"\
    :\n            result += operand[i] - operand[i+1]\n        case \"*\":\n    \
    \        result += operand[i] * operand[i+1]\n        case \"//\":\n         \
    \   result += operand[i] / operand[i+1]\n        case \"**\":\n            result\
    \ += operand[i] ^ operand[i+1]\n        }\n    }\n    return result\n}\n", " \
    \   var result int = operand[0]\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operand) == 2 {\n     \
    \   return do_algebra_helper(operator[0], operand[0], operand[1])\n    }\n   \
    \ return do_algebra_helper(operator[0], operand[0], do_algebra(operator[1:], operand[1:]))\n\
    }\n", "    // Write your code here\n    return 0\n}\n", "    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n  \
    \  }\n    if len(operator) != len(operand) - 1 {\n        return 0\n    }\n  \
    \  result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    //\
    \ Write your code here\n    return 0\n}\n", "    // Write your code here\n   \
    \ return 0\n}\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = pow(result, operand[i+1])\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 {\n   \
    \     return operand[0]\n    }\n    if len(operand) == 0 {\n        return 0\n\
    \    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    if\
    \ len(operand) == 1 {\n        return operand[0]\n    }\n    if len(operator)\
    \ == 2 {\n        return operand[0] + operand[1]\n    }\n    if len(operand) ==\
    \ 2 {\n        return operand[0] + operand[1]\n    }\n    return 0\n}\n", "  \
    \  var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operator) == 2 {\n    \
    \    return do_algebra_op(operator[0], operand[0], operand[1])\n    }\n    if\
    \ len(operator) == 3 {\n        return do_algebra_op(operator[1], do_algebra_op(operator[0],\
    \ operand[0], operand[1]), operand[2])\n    }\n    if len(operator) == 4 {\n \
    \       return do_algebra_op(operator[2], do_algebra_op(operator[1], do_algebra_op(operator[0],\
    \ operand[0], operand[1]), operand[2]), operand[3])\n    }\n    return 0\n}\n",
  "    // Write your code here\n    return 0\n}\n", "    var result int\n    result\
    \ = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    var result int\n    var op string\n    var\
    \ op1 int\n    var op2 int\n    var op_index int\n    var op_index_max int\n \
    \   var op_index_min int\n    var op_index_tmp int\n    var op_index_tmp_max int\n\
    \    var op_index_tmp_min int\n    var op_index_tmp_max_index int\n    var op_index_tmp_min_index\
    \ int\n    var op_index_tmp_max_index_tmp int\n    var op_index_tmp_min_index_tmp\
    \ int\n    var op_index_tmp_max_index_tmp_max int\n    var op_index_tmp_min_index_tmp_min\
    \ int\n    var op_index_tmp_max_index_tmp_max_index int\n    var op_index_tmp_min_index_tmp_min_index\
    \ int\n    var op_index_tmp_max_index_tmp_max_index_tmp int\n    var op_index_tmp_min_index_tmp_min_index_tmp\
    \ int\n    var op_index_tmp_max_index_tmp_max_index_tmp_max int\n    var op_index_tmp_min_index_tmp_min_index_tmp_min\
    \ int\n    var op_index_tmp_max_index_tmp_max_index_tmp_max_index int\n    var\
    \ op_index_tmp_min_index_tmp_min_index_tmp_min_index int\n    var op_index_tmp_max_index_tmp_max_index_tmp_max_index_tmp\
    \ int\n    var op_index_tmp_min_index_tmp_min_index_tmp_min_index_tmp int\n  \
    \  var op_index_tmp_max_index_tmp_max_index_tmp_max_index_tmp_max int\n    var\
    \ op_index_tmp_min_index_tmp_min_index_tmp_min_index_tmp_min int\n    var op_index_tmp_max_index_tmp_max_index_tmp_max_index_tmp_max_index\
    \ int\n    var op_index_tmp_min_index_tmp_min_index_tmp_min_index_", "    if len(operator)\
    \ == 0 {\n        return operand[0]\n    }\n    if len(operand) == 0 {\n     \
    \   return 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return\
    \ 0\n    }\n    var result int\n    for i, op := range operator {\n        switch\
    \ op {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result += operand[i] - operand[i+1]\n      \
    \  case \"*\":\n            result += operand[i] * operand[i+1]\n        case\
    \ \"//\":\n            result += operand[i] / operand[i+1]\n        case \"**\"\
    :\n            result += operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n", "    // Write your code here\n    return 0\n}\n", "    var result\
    \ int\n    if len(operator) == 0 {\n        return operand[0]\n    }\n    result\
    \ = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    var result int\n    if len(operator) ==\
    \ 0 {\n        return operand[0]\n    }\n    result = operand[0]\n    for i :=\
    \ 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\"\
    :\n            result += operand[i+1]\n        case \"-\":\n            result\
    \ -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n \
    \       case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n  \
    \  }\n    if len(operator) != len(operand) - 1 {\n        return 0\n    }\n  \
    \  result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    result = operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if len(operator)\
    \ == 0 || len(operand) < 2 {\n        return 0\n    }\n    result := operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        if operator[i] == \"+\" {\n\
    \            result += operand[i+1]\n        } else if operator[i] == \"-\" {\n\
    \            result -= operand[i+1]\n        } else if operator[i] == \"*\" {\n\
    \            result *= operand[i+1]\n        } else if operator[i] == \"//\" {\n\
    \            result /= operand[i+1]\n        } else if operator[i] == \"**\" {\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    var result int\n    if len(operator) ==\
    \ 0 {\n        return operand[0]\n    }\n    if len(operand) == 0 {\n        return\
    \ 0\n    }\n    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n            case \"+\":\n                result\
    \ += operand[i+1]\n            case \"-\":\n                result -= operand[i+1]\n\
    \            case \"*\":\n                result *= operand[i+1]\n           \
    \ case \"//\":\n                result /= operand[i+1]\n            case \"**\"\
    :\n                result = result ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n", "    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n", "    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    result = operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    for i, op\
    \ := range operator {\n        switch op {\n        case \"+\":\n            result\
    \ += operand[i] + operand[i+1]\n        case \"-\":\n            result += operand[i]\
    \ - operand[i+1]\n        case \"*\":\n            result += operand[i] * operand[i+1]\n\
    \        case \"//\":\n            result += operand[i] / operand[i+1]\n     \
    \   case \"**\":\n            result += operand[i] ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    var result int\n    if len(operator) ==\
    \ 0 {\n        return operand[0]\n    }\n    switch operator[0] {\n    case \"\
    +\":\n        result = operand[0] + operand[1]\n    case \"-\":\n        result\
    \ = operand[0] - operand[1]\n    case \"*\":\n        result = operand[0] * operand[1]\n\
    \    case \"//\":\n        result = operand[0] / operand[1]\n    case \"**\":\n\
    \        result = operand[0] ^ operand[1]\n    }\n    return result + do_algebra(operator[1:],\
    \ operand[2:])\n}\n", "    var result int\n    var op string\n    var op1 int\n\
    \    var op2 int\n    var op_index int\n\n    result = operand[0]\n    op_index\
    \ = 0\n    for i := 1; i < len(operand); i++ {\n        op = operator[op_index]\n\
    \        op1 = result\n        op2 = operand[i]\n        op_index++\n        switch\
    \ op {\n        case \"+\":\n            result = op1 + op2\n        case \"-\"\
    :\n            result = op1 - op2\n        case \"*\":\n            result = op1\
    \ * op2\n        case \"//\":\n            result = op1 / op2\n        case \"\
    **\":\n            result = op1 ^ op2\n        }\n    }\n    return result\n}\n",
  "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n   \
    \ if len(operator) == 1 {\n        return operand[0]\n    }\n    if len(operator)\
    \ == 2 {\n        return do_algebra_2(operator[0], operand[0], operand[1])\n \
    \   }\n    if len(operator) == 3 {\n        return do_algebra_3(operator[0], operand[0],\
    \ operator[1], operand[1], operand[2])\n    }\n    if len(operator) == 4 {\n \
    \       return do_algebra_4(operator[0], operand[0], operator[1], operand[1],\
    \ operator[2], operand[2], operand[3])\n    }\n    return 0\n}\n", "    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    // Write your code here\n    return 0\n}\n", "    var result int =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    // Write your code here\n   \
    \ return 0\n}\n", "    var result int\n    result = operand[0]\n    for i := 0;\
    \ i < len(operator); i++ {\n        switch operator[i] {\n            case \"\
    +\":\n                result += operand[i+1]\n            case \"-\":\n      \
    \          result -= operand[i+1]\n            case \"*\":\n                result\
    \ *= operand[i+1]\n            case \"//\":\n                result /= operand[i+1]\n\
    \            case \"**\":\n                result = result ^ operand[i+1]\n  \
    \      }\n    }\n    return result\n}\n", "    var result int\n    result = operand[0]\n\
    \    for i, op := range operator {\n        switch op {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    var result int\n    if len(operator) == 0 {\n        return operand[0]\n\
    \    }\n    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    var op string\n\
    \    for i := 0; i < len(operator); i++ {\n        op = operator[i]\n        switch\
    \ op {\n        case \"+\":\n            result = operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result = operand[i] - operand[i+1]\n       \
    \ case \"*\":\n            result = operand[i] * operand[i+1]\n        case \"\
    //\":\n            result = operand[i] / operand[i+1]\n        case \"**\":\n\
    \            result = operand[i] ^ operand[i+1]\n        }\n        operand[i+1]\
    \ = result\n    }\n    return result\n}\n", "    var result int\n    var op string\n\
    \    if len(operator) == 0 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    op = operator[0]\n    switch op {\n   \
    \ case \"+\":\n        result = operand[0] + operand[1]\n    case \"-\":\n   \
    \     result = operand[0] - operand[1]\n    case \"*\":\n        result = operand[0]\
    \ * operand[1]\n    case \"//\":\n        result = operand[0] / operand[1]\n \
    \   case \"**\":\n        result = operand[0] ^ operand[1]\n    }\n    return\
    \ result\n}\n", "    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    result = operand[0]\n    for i, op := range\
    \ operator {\n        switch op {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n  \
    \  return result\n}\n", "    var result int = operand[0]\n    for i := 0; i <\
    \ len(operator); i++ {\n        switch operator[i] {\n        case \"+\":\n  \
    \          result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    if len(operator)\
    \ == 0 {\n        return operand[0]\n    }\n    for i, op := range operator {\n\
    \        switch op {\n        case \"+\":\n            result = operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result = operand[i] - operand[i+1]\n       \
    \ case \"*\":\n            result = operand[i] * operand[i+1]\n        case \"\
    //\":\n            result = operand[i] / operand[i+1]\n        case \"**\":\n\
    \            result = operand[i] ^ operand[i+1]\n        }\n        operand[i+1]\
    \ = result\n    }\n    return result\n}\n", "    // Write your code here\n   \
    \ return 0\n}\n", "    // Write your code here\n    return 0\n}\n", "    // Write\
    \ your code here\n    return 0\n}\n", "    if len(operator) == 0 || len(operand)\
    \ < 2 {\n        return 0\n    }\n    result := operand[0]\n    for i := 0; i\
    \ < len(operator); i++ {\n        switch operator[i] {\n            case \"+\"\
    :\n                result += operand[i+1]\n            case \"-\":\n         \
    \       result -= operand[i+1]\n            case \"*\":\n                result\
    \ *= operand[i+1]\n            case \"//\":\n                result /= operand[i+1]\n\
    \            case \"**\":\n                result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    return\
    \ 0\n}\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n\
    \    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n    if\
    \ len(operator) == 2 {\n        return do_algebra_2(operator[0], operand[0], operand[1])\n\
    \    }\n    if len(operator) == 3 {\n        return do_algebra_3(operator[0],\
    \ operand[0], operator[1], operand[1], operand[2])\n    }\n    return 0\n}\n",
  "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n   \
    \ if len(operator) != len(operand) - 1 {\n        return 0\n    }\n    if len(operator)\
    \ == 1 {\n        switch operator[0] {\n        case \"+\":\n            return\
    \ operand[0] + operand[1]\n        case \"-\":\n            return operand[0]\
    \ - operand[1]\n        case \"*\":\n            return operand[0] * operand[1]\n\
    \        case \"//\":\n            return operand[0] / operand[1]\n        case\
    \ \"**\":\n            return operand[0] ^ operand[1]\n        }\n    }\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"**\":\n            operand[i] = operand[i] ^ operand[i+1]\n            operand\
    \ = append(operand[:i+1], operand[i+2:]...)\n            operator = append(operator[:i],\
    \ operator[i+1:]...)\n            i--\n        }\n    }\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"*\":\n            operand[i]\
    \ = operand[i] * operand[i+1]\n            operand = append(operand[:i+1], operand[i+2:]...)\n\
    \            operator = append(operator[:i], operator[i+1:]...)\n            i--\n\
    \        case \"//\":\n            operand[i] = operand[i] / operand[i+1]\n  \
    \          operand = append(operand[:i+1], operand[i+2:]...)\n            operator\
    \ = append(operator[:i], operator[i+1:]...)\n            i--\n        }\n    }\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            operand[i] = operand[i] + operand[i+1]\n       \
    \     operand = append(operand[:i+1], oper", "    // TODO: Implement this function\n\
    \    return 0\n}\n", "    var result int\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result = operand[i]\
    \ + operand[i+1]\n        case \"-\":\n            result = operand[i] - operand[i+1]\n\
    \        case \"*\":\n            result = operand[i] * operand[i+1]\n       \
    \ case \"//\":\n            result = operand[i] / operand[i+1]\n        case \"\
    **\":\n            result = operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n", "    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return result\n    }\n    result = operand[0]\n    for i :=\
    \ 1; i < len(operand); i++ {\n        switch operator[i-1] {\n        case \"\
    +\":\n            result += operand[i]\n        case \"-\":\n            result\
    \ -= operand[i]\n        case \"*\":\n            result *= operand[i]\n     \
    \   case \"//\":\n            result /= operand[i]\n        case \"**\":\n   \
    \         result = result ^ operand[i]\n        }\n    }\n    return result\n\
    }\n", "    // Write your code here\n    return 0\n}\n", "    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    var result int\n    if len(operator) == 0 {\n        return operand[0]\n\
    \    }\n    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n \
    \   }\n    if len(operator) == len(operand) - 1 {\n        return operand[0]\n\
    \    }\n    var result int\n    for i := 0; i < len(operator); i++ {\n       \
    \ if operator[i] == \"+\" {\n            result = operand[i] + operand[i+1]\n\
    \        } else if operator[i] == \"-\" {\n            result = operand[i] - operand[i+1]\n\
    \        } else if operator[i] == \"*\" {\n            result = operand[i] * operand[i+1]\n\
    \        } else if operator[i] == \"//\" {\n            result = operand[i] /\
    \ operand[i+1]\n        } else if operator[i] == \"**\" {\n            result\
    \ = operand[i] ^ operand[i+1]\n        }\n        operand[i+1] = result\n    }\n\
    \    return result\n}\n", "    if len(operator) == 0 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n    var result int\n    result\
    \ = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand) ==\
    \ 0 {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n \
    \       return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    result = operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n            case \"+\":\n                result\
    \ += operand[i+1]\n            case \"-\":\n                result -= operand[i+1]\n\
    \            case \"*\":\n                result *= operand[i+1]\n           \
    \ case \"//\":\n                result /= operand[i+1]\n            case \"**\"\
    :\n                result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n\
    \        return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    var op string\n\
    \    for i, v := range operand {\n        if i == 0 {\n            result = v\n\
    \            continue\n        }\n        op = operator[i-1]\n        switch op\
    \ {\n        case \"+\":\n            result += v\n        case \"-\":\n     \
    \       result -= v\n        case \"*\":\n            result *= v\n        case\
    \ \"//\":\n            result /= v\n        case \"**\":\n            result =\
    \ result ^ v\n        }\n    }\n    return result\n}\n", "    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    // Write your code here\n    return 0\n}\n", "    if len(operator)\
    \ == 0 || len(operand) < 2 {\n        return 0\n    }\n    result := operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n            case \"+\":\n                result += operand[i+1]\n       \
    \     case \"-\":\n                result -= operand[i+1]\n            case \"\
    *\":\n                result *= operand[i+1]\n            case \"//\":\n     \
    \           result /= operand[i+1]\n            case \"**\":\n               \
    \ result = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", " \
    \   var result int = operand[0]\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    result = operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n        case \"+\":\n            result +=\
    \ operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n    \
    \    case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n \
    \           result /= operand[i+1]\n        case \"**\":\n            result =\
    \ result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    var result int\n    for i :=\
    \ 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\"\
    :\n            result += operand[i] + operand[i+1]\n        case \"-\":\n    \
    \        result += operand[i] - operand[i+1]\n        case \"*\":\n          \
    \  result += operand[i] * operand[i+1]\n        case \"//\":\n            result\
    \ += operand[i] / operand[i+1]\n        case \"**\":\n            result += operand[i]\
    \ ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    // Write your\
    \ code here\n    return 0\n}\n", "    if len(operator) == 0 || len(operand) ==\
    \ 0 {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n \
    \       return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) != len(operand) - 1 {\n        return 0\n    }\n    if len(operator)\
    \ == 0 || len(operand) < 2 {\n        return 0\n    }\n    result := operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \        case \"+\":\n                result += operand[i + 1]\n            case\
    \ \"-\":\n                result -= operand[i + 1]\n            case \"*\":\n\
    \                result *= operand[i + 1]\n            case \"//\":\n        \
    \        result /= operand[i + 1]\n            case \"**\":\n                result\
    \ = result ^ operand[i + 1]\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    result = operand[0]\n    for i := 0; i < len(operator); i++\
    \ {\n        switch operator[i] {\n            case \"+\":\n                result\
    \ += operand[i+1]\n            case \"-\":\n                result -= operand[i+1]\n\
    \            case \"*\":\n                result *= operand[i+1]\n           \
    \ case \"//\":\n                result /= operand[i+1]\n            case \"**\"\
    :\n                result = result ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n", "    if len(operator) == 0 || len(operand) < 2 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 {\n        return operand[0]\n    }\n    if len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n\
    \        return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n            case \"+\":\n             \
    \   result += operand[i+1]\n            case \"-\":\n                result -=\
    \ operand[i+1]\n            case \"*\":\n                result *= operand[i+1]\n\
    \            case \"//\":\n                result /= operand[i+1]\n          \
    \  case \"**\":\n                result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \            default:\n                return 0\n        }\n    }\n    return\
    \ result\n}\n", "    var result int = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n", "    if len(operator) == 0 || len(operand) == 0 {\n\
    \        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n       \
    \ return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    //\
    \ Write your code here\n    return 0\n}\n", "    var result int\n    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return result\n    }\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    // Write your code here\n   \
    \ return 0\n}\n", "    var result int\n    var op string\n    var op1 int\n  \
    \  var op2 int\n    var i int\n    var j int\n    var k int\n    var l int\n \
    \   var m int\n    var n int\n    var o int\n    var p int\n    var q int\n  \
    \  var r int\n    var s int\n    var t int\n    var u int\n    var v int\n   \
    \ var w int\n    var x int\n    var y int\n    var z int\n    var aa int\n   \
    \ var bb int\n    var cc int\n    var dd int\n    var ee int\n    var ff int\n\
    \    var gg int\n    var hh int\n    var ii int\n    var jj int\n    var kk int\n\
    \    var ll int\n    var mm int\n    var nn int\n    var oo int\n    var pp int\n\
    \    var qq int\n    var rr int\n    var ss int\n    var tt int\n    var uu int\n\
    \    var vv int\n    var ww int\n    var xx int\n    var yy int\n    var zz int\n\
    \    var aaa int\n    var bbb int\n    var ccc int\n    var ddd int\n    var eee\
    \ int\n    var fff int\n    var ggg int\n    var hhh int\n    var iii int\n  \
    \  var jjj int\n    var kkk int\n    var lll int\n    var mmm int\n    var nnn\
    \ int\n    var ooo int\n    var ppp int\n    var qqq int\n    var rrr int\n  \
    \  var sss int\n    var ttt int\n    var uuu int\n    var vvv int\n    var www\
    \ int\n    var xxx int\n    var yyy int\n    var zzz int\n    var aaaa int\n \
    \   var bbbb int\n    var cccc int\n    var dddd int\n    var eeee int\n    var\
    \ ffff int\n    var gggg int\n    var hhhh int\n    var iiii int\n    var jjjj\
    \ int\n    var kkkk int\n    var llll int\n    var mmmm int\n    var nnnn int\n\
    \    var oooo int\n", "    if len(operator) == 0 || len(operand) < 2 {\n     \
    \   return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n            case \"+\":\n             \
    \   result += operand[i+1]\n            case \"-\":\n                result -=\
    \ operand[i+1]\n            case \"*\":\n                result *= operand[i+1]\n\
    \            case \"//\":\n                result /= operand[i+1]\n          \
    \  case \"**\":\n                result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n\
    \        return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operator) == 2 {\n    \
    \    return do_algebra_2(operator[0], operand[0], operand[1])\n    }\n    if len(operator)\
    \ == 3 {\n        return do_algebra_3(operator[0], operand[0], operator[1], operand[1],\
    \ operand[2])\n    }\n    if len(operator) == 4 {\n        return do_algebra_4(operator[0],\
    \ operand[0], operator[1], operand[1], operator[2], operand[2], operand[3])\n\
    \    }\n    if len(operator) == 5 {\n        return do_algebra_5(operator[0],\
    \ operand[0], operator[1], operand[1], operator[2], operand[2], operator[3], operand[3],\
    \ operand[4])\n    }\n    return 0\n}\n", "    // Write your code here\n    return\
    \ 0\n}\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n\
    \    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n \
    \       switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n \
    \   for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n     \
    \   case \"+\":\n            result += operand[i+1]\n        case \"-\":\n   \
    \         result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return 0\n  \
    \  }\n    if len(operator) != len(operand) - 1 {\n        return 0\n    }\n  \
    \  result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 {\n   \
    \     return operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 2 {\n        switch operator[0] {\n           \
    \ case \"+\":\n                return operand[0] + operand[1]\n            case\
    \ \"-\":\n                return operand[0] - operand[1]\n            case \"\
    *\":\n                return operand[0] * operand[1]\n            case \"//\"\
    :\n                return operand[0] / operand[1]\n            case \"**\":\n\
    \                return operand[0] ^ operand[1]\n        }\n    }\n    var result\
    \ int\n    switch operator[0] {\n        case \"+\":\n            result = operand[0]\
    \ + operand[1]\n        case \"-\":\n            result = operand[0] - operand[1]\n\
    \        case \"*\":\n            result = operand[0] * operand[1]\n        case\
    \ \"//\":\n            result = operand[0] / operand[1]\n        case \"**\":\n\
    \            result = operand[0] ^ operand[1]\n    }\n    return do_algebra(operator[1:],\
    \ append([]int{result}, operand[2:]...))\n}\n", "    if len(operator) == 0 {\n\
    \        return operand[0]\n    }\n    if len(operand) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 2 {\n        return operand[0] + operand[1]\n\
    \    }\n    if len(operator) == 1 {\n        return operand[0] + operand[1]\n\
    \    }\n    return operand[0] + operand[1]\n}\n", "    var result int\n    if\
    \ len(operator) == 0 || len(operand) < 2 {\n        return result\n    }\n   \
    \ result = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    var\
    \ result int\n    var op string\n    for i, v := range operand {\n        if i\
    \ == 0 {\n            result = v\n            continue\n        }\n        op\
    \ = operator[i-1]\n        switch op {\n        case \"+\":\n            result\
    \ += v\n        case \"-\":\n            result -= v\n        case \"*\":\n  \
    \          result *= v\n        case \"//\":\n            result /= v\n      \
    \  case \"**\":\n            result = result ^ v\n        }\n    }\n    return\
    \ result\n}\n", "    if len(operator) == 0 || len(operand) == 0 {\n        return\
    \ 0\n    }\n    if len(operator) == 1 {\n        return operand[0]\n    }\n  \
    \  if len(operator) == 2 {\n        return do_algebra_helper(operator[0], operand[0],\
    \ operand[1])\n    }\n    if len(operator) == 3 {\n        return do_algebra_helper(operator[0],\
    \ operand[0], do_algebra_helper(operator[1], operand[1], operand[2]))\n    }\n\
    \    return 0\n}\n", "    var result int\n    if len(operator) == 0 {\n      \
    \  return operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n\
    \    }\n    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n  \
    \      switch operator[i] {\n        case \"+\":\n            result += operand[i+1]\n\
    \        case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n\
    \            result *= operand[i+1]\n        case \"//\":\n            result\
    \ /= operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return 0\n    }\n    if len(operator) == 1 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n \
    \   }\n    if len(operator) == len(operand) - 1 {\n        return do_algebra_recursive(operator,\
    \ operand)\n    }\n    return 0\n}\n", "    var result int\n    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return 0\n    }\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = result ^ operand[i+1]\n        }\n  \
    \  }\n    return result\n}\n", "    if len(operator) == 0 || len(operand) == 0\
    \ {\n        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n   \
    \     return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n", "    var result int\n    if len(operator) == 0 || len(operand)\
    \ == 0 {\n        return result\n    }\n    result = operand[0]\n    for i :=\
    \ 0; i < len(operator); i++ {\n        switch operator[i] {\n            case\
    \ \"+\":\n                result += operand[i+1]\n            case \"-\":\n  \
    \              result -= operand[i+1]\n            case \"*\":\n             \
    \   result *= operand[i+1]\n            case \"//\":\n                result /=\
    \ operand[i+1]\n            case \"**\":\n                result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    // Write your code here\n   \
    \ return 0\n}\n", "    // TODO: implement this function\n    return 0\n}\n", " \
    \   var result int\n    result = operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n            case \"+\":\n             \
    \   result += operand[i+1]\n            case \"-\":\n                result -=\
    \ operand[i+1]\n            case \"*\":\n                result *= operand[i+1]\n\
    \            case \"//\":\n                result /= operand[i+1]\n          \
    \  case \"**\":\n                result = result ^ operand[i+1]\n        }\n \
    \   }\n    return result\n}\n", "    if len(operator) == 0 {\n        return operand[0]\n\
    \    }\n    if len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n \
    \   for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n     \
    \       case \"+\":\n                result += operand[i+1]\n            case\
    \ \"-\":\n                result -= operand[i+1]\n            case \"*\":\n  \
    \              result *= operand[i+1]\n            case \"//\":\n            \
    \    result /= operand[i+1]\n            case \"**\":\n                result\
    \ = result ^ operand[i+1]\n            default:\n                return 0\n  \
    \      }\n    }\n    return result\n}\n", "    var result int\n    for i, op :=\
    \ range operator {\n        switch op {\n        case \"+\":\n            result\
    \ += operand[i] + operand[i+1]\n        case \"-\":\n            result += operand[i]\
    \ - operand[i+1]\n        case \"*\":\n            result += operand[i] * operand[i+1]\n\
    \        case \"//\":\n            result += operand[i] / operand[i+1]\n     \
    \   case \"**\":\n            result += operand[i] ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    if len(operator) == 0 {\n        return\
    \ operand[0]\n    }\n    if len(operand) == 1 {\n        return operand[0]\n \
    \   }\n    if len(operand) == 2 {\n        return operand[0] + operand[1]\n  \
    \  }\n    if len(operator) == 1 {\n        return operand[0] + operand[1]\n  \
    \  }\n    return 0\n}\n", "    if len(operator) == 0 || len(operand) == 0 {\n\
    \        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n       \
    \ return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = int(math.Pow(float64(result), float64(operand[i+1])))\n        }\n    }\n\
    \    return result\n}\n", "    if len(operator) == 0 || len(operand) == 0 {\n\
    \        return 0\n    }\n    if len(operator) != len(operand) - 1 {\n       \
    \ return 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator);\
    \ i++ {\n        switch operator[i] {\n        case \"+\":\n            result\
    \ += operand[i+1]\n        case \"-\":\n            result -= operand[i+1]\n \
    \       case \"*\":\n            result *= operand[i+1]\n        case \"//\":\n\
    \            result /= operand[i+1]\n        case \"**\":\n            result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ == 1 {\n        return operand[0]\n    }\n    if len(operator) == 2 {\n    \
    \    switch operator[0] {\n        case \"+\":\n            return operand[0]\
    \ + operand[1]\n        case \"-\":\n            return operand[0] - operand[1]\n\
    \        case \"*\":\n            return operand[0] * operand[1]\n        case\
    \ \"//\":\n            return operand[0] / operand[1]\n        case \"**\":\n\
    \            return operand[0] ^ operand[1]\n        }\n    }\n    return 0\n\
    }\n", "    // Write your code here\n    return 0\n}\n", "    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator) !=\
    \ len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n    for\
    \ i := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case\
    \ \"+\":\n            result += operand[i+1]\n        case \"-\":\n          \
    \  result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n            case \"+\":\n                result += operand[i+1]\n       \
    \     case \"-\":\n                result -= operand[i+1]\n            case \"\
    *\":\n                result *= operand[i+1]\n            case \"//\":\n     \
    \           result /= operand[i+1]\n            case \"**\":\n               \
    \ result = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", " \
    \   if len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n  \
    \  if len(operator) != len(operand) - 1 {\n        return 0\n    }\n    result\
    \ := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    var result int\n    if len(operator) ==\
    \ 0 || len(operand) == 0 {\n        return result\n    }\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = result ^ operand[i+1]\n        }\n  \
    \  }\n    return result\n}\n", "    var result int\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \        case \"+\":\n                result += operand[i+1]\n            case\
    \ \"-\":\n                result -= operand[i+1]\n            case \"*\":\n  \
    \              result *= operand[i+1]\n            case \"//\":\n            \
    \    result /= operand[i+1]\n            case \"**\":\n                result\
    \ = result ^ operand[i+1]\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n \
    \   for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n     \
    \   case \"+\":\n            result += operand[i+1]\n        case \"-\":\n   \
    \         result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return result\n    }\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 {\n   \
    \     return operand[0]\n    }\n    if len(operand) == 0 {\n        return 0\n\
    \    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n    }\n\
    \    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n            case \"+\":\n                result += operand[i+1]\n\
    \            case \"-\":\n                result -= operand[i+1]\n           \
    \ case \"*\":\n                result *= operand[i+1]\n            case \"//\"\
    :\n                result /= operand[i+1]\n            case \"**\":\n        \
    \        result = int(math.Pow(float64(result), float64(operand[i+1])))\n    \
    \        default:\n                return 0\n        }\n    }\n    return result\n\
    }\n", "    var result int\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result = operand[i] + operand[i+1]\n\
    \        case \"-\":\n            result = operand[i] - operand[i+1]\n       \
    \ case \"*\":\n            result = operand[i] * operand[i+1]\n        case \"\
    //\":\n            result = operand[i] / operand[i+1]\n        case \"**\":\n\
    \            result = operand[i] ^ operand[i+1]\n        }\n    }\n    return\
    \ result\n}\n", "    if len(operator) == 0 {\n        return operand[0]\n    }\n\
    \    if len(operand) == 1 {\n        return operand[0]\n    }\n    result := operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    var op string\n\
    \    var op1 int\n    var op2 int\n    for i := 0; i < len(operator); i++ {\n\
    \        op = operator[i]\n        op1 = operand[i]\n        op2 = operand[i+1]\n\
    \        switch op {\n        case \"+\":\n            result = op1 + op2\n  \
    \      case \"-\":\n            result = op1 - op2\n        case \"*\":\n    \
    \        result = op1 * op2\n        case \"//\":\n            result = op1 /\
    \ op2\n        case \"**\":\n            result = op1 ^ op2\n        }\n     \
    \   operand[i+1] = result\n    }\n    return result\n}\n", "    var result int\n\
    \    result = operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n        case \"+\":\n            result += operand[i+1]\n   \
    \     case \"-\":\n            result -= operand[i+1]\n        case \"*\":\n \
    \           result *= operand[i+1]\n        case \"//\":\n            result /=\
    \ operand[i+1]\n        case \"**\":\n            result = result ^ operand[i+1]\n\
    \        }\n    }\n    return result\n}\n", "    if len(operator) == 0 {\n   \
    \     return operand[0]\n    }\n    if len(operand) == 0 {\n        return 0\n\
    \    }\n    if len(operator) != len(operand) - 1 {\n        return 0\n    }\n\
    \    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch\
    \ operator[i] {\n            case \"+\":\n                result += operand[i+1]\n\
    \            case \"-\":\n                result -= operand[i+1]\n           \
    \ case \"*\":\n                result *= operand[i+1]\n            case \"//\"\
    :\n                result /= operand[i+1]\n            case \"**\":\n        \
    \        result = result ^ operand[i+1]\n            default:\n              \
    \  return 0\n        }\n    }\n    return result\n}\n", "    if len(operator)\
    \ == 0 {\n        return operand[0]\n    }\n    if len(operand) == 0 {\n     \
    \   return 0\n    }\n    if len(operator) != len(operand) - 1 {\n        return\
    \ 0\n    }\n    result := operand[0]\n    for i := 0; i < len(operator); i++ {\n\
    \        if operator[i] == \"+\" {\n            result += operand[i+1]\n     \
    \   } else if operator[i] == \"-\" {\n            result -= operand[i+1]\n   \
    \     } else if operator[i] == \"*\" {\n            result *= operand[i+1]\n \
    \       } else if operator[i] == \"//\" {\n            result /= operand[i+1]\n\
    \        } else if operator[i] == \"**\" {\n            result = int(math.Pow(float64(result),\
    \ float64(operand[i+1])))\n        }\n    }\n    return result\n}\n", "    if\
    \ len(operator) == 0 || len(operand) == 0 {\n        return 0\n    }\n    if len(operator)\
    \ != len(operand) - 1 {\n        return 0\n    }\n    result := operand[0]\n \
    \   for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n     \
    \   case \"+\":\n            result += operand[i+1]\n        case \"-\":\n   \
    \         result -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n\
    \        case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    if len(operator)\
    \ == 0 {\n        return operand[0]\n    }\n    result = operand[0]\n    for i\
    \ := 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"\
    +\":\n            result += operand[i+1]\n        case \"-\":\n            result\
    \ -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n \
    \       case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    if len(operator)\
    \ == 0 || len(operand) == 0 {\n        return 0\n    }\n    result = operand[0]\n\
    \    for i, op := range operator {\n        switch op {\n        case \"+\":\n\
    \            result += operand[i+1]\n        case \"-\":\n            result -=\
    \ operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n    \
    \    case \"//\":\n            result /= operand[i+1]\n        case \"**\":\n\
    \            result = int(math.Pow(float64(result), float64(operand[i+1])))\n\
    \        }\n    }\n    return result\n}\n", "    var result int\n    result =\
    \ operand[0]\n    for i := 0; i < len(operator); i++ {\n        switch operator[i]\
    \ {\n        case \"+\":\n            result += operand[i+1]\n        case \"\
    -\":\n            result -= operand[i+1]\n        case \"*\":\n            result\
    \ *= operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n\
    \        case \"**\":\n            result = result ^ operand[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    var result int\n    result = operand[0]\n\
    \    for i := 0; i < len(operator); i++ {\n        switch operator[i] {\n    \
    \    case \"+\":\n            result += operand[i+1]\n        case \"-\":\n  \
    \          result -= operand[i+1]\n        case \"*\":\n            result *=\
    \ operand[i+1]\n        case \"//\":\n            result /= operand[i+1]\n   \
    \     case \"**\":\n            result = result ^ operand[i+1]\n        }\n  \
    \  }\n    return result\n}\n", "    var result int = operand[0]\n    for i :=\
    \ 0; i < len(operator); i++ {\n        switch operator[i] {\n        case \"+\"\
    :\n            result += operand[i+1]\n        case \"-\":\n            result\
    \ -= operand[i+1]\n        case \"*\":\n            result *= operand[i+1]\n \
    \       case \"//\":\n            result /= operand[i+1]\n        case \"**\"\
    :\n            result = result ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n", "    var result int\n    for i, op := range operator {\n        switch op\
    \ {\n        case \"+\":\n            result += operand[i] + operand[i+1]\n  \
    \      case \"-\":\n            result += operand[i] - operand[i+1]\n        case\
    \ \"*\":\n            result += operand[i] * operand[i+1]\n        case \"//\"\
    :\n            result += operand[i] / operand[i+1]\n        case \"**\":\n   \
    \         result += operand[i] ^ operand[i+1]\n        }\n    }\n    return result\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
