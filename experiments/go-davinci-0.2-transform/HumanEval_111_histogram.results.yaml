language: go_test.go
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpxp0i5msp_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpxp0i5msp_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpxp0i5msp_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpxp0i5msp_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpxp0i5msp_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpxp0i5msp_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpxp0i5msp_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpafgpza95_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpafgpza95_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpafgpza95_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpafgpza95_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpeugvz30e_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpeugvz30e_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpeugvz30e_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpeugvz30e_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpeugvz30e_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpeugvz30e_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement the function\n\
    \    return map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnbivhr_4_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpnbivhr_4_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpnbivhr_4_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpnbivhr_4_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpnbivhr_4_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpnbivhr_4_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpnbivhr_4_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // Your code here\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp7r2vypt__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp7r2vypt__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp7r2vypt__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp7r2vypt__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp7r2vypt__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp7r2vypt__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp7r2vypt__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpeiifjhqc_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpeiifjhqc_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpeiifjhqc_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpeiifjhqc_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpeiifjhqc_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpeiifjhqc_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpeiifjhqc_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkh_9upq1_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpkh_9upq1_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpkh_9upq1_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpkh_9upq1_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkh_9upq1_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpkh_9upq1_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpapdhgjxa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpapdhgjxa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    m := make(map[string]int)\n\
    \    for _, v := range test {\n        m[string(v)]++\n    }\n    return m\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpzs78xnh8_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpzs78xnh8_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpzs78xnh8_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpzs78xnh8_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpzs78xnh8_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpzs78xnh8_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp68il59d2_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp68il59d2_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpapdhgjxa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpapdhgjxa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \        if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \        }\n    }\n    var result = make(map[string]int)\n    for key, value :=\
    \ range histogram {\n        if value == max {\n            result[key] = value\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkbp1z1o5_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpkbp1z1o5_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpkbp1z1o5_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpkbp1z1o5_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkbp1z1o5_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpkbp1z1o5_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpp6rddlk__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpp6rddlk__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpp6rddlk__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpp6rddlk__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpxp0i5msp_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpxp0i5msp_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpxp0i5msp_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpxp0i5msp_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpxp0i5msp_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpxp0i5msp_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpxp0i5msp_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)] += 1\n    }\n\
    \    return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpdbqnp6zg_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpdbqnp6zg_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpdbqnp6zg_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpdbqnp6zg_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpdbqnp6zg_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpdbqnp6zg_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result map[string]int =\
    \ make(map[string]int)\n    var max int = 0\n    for _, letter := range test {\n\
    \        result[string(letter)]++\n        if result[string(letter)] > max {\n\
    \            max = result[string(letter)]\n        }\n    }\n    for key, value\
    \ := range result {\n        if value != max {\n            delete(result, key)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpve3hr6lu_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpve3hr6lu_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpve3hr6lu_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpve3hr6lu_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpve3hr6lu_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpve3hr6lu_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpafgpza95_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpafgpza95_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpafgpza95_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpafgpza95_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpav5y358o_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4__og9yk_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4__og9yk_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var dict = make(map[string]int)\n\
    \    var max = 0\n    var max_keys []string\n    for _, letter := range test {\n\
    \        dict[string(letter)] += 1\n        if dict[string(letter)] > max {\n\
    \            max = dict[string(letter)]\n            max_keys = []string{string(letter)}\n\
    \        } else if dict[string(letter)] == max {\n            max_keys = append(max_keys,\
    \ string(letter))\n        }\n    }\n    var result = make(map[string]int)\n \
    \   for _, key := range max_keys {\n        result[key] = max\n    }\n    return\
    \ result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpm7wwgqin_test.go:62: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpm7wwgqin_test.go:62: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpm7wwgqin_test.go:62: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpm7wwgqin_test.go:62: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpm7wwgqin_test.go:62: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpm7wwgqin_test.go:62: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpabo9qkik_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpabo9qkik_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpabo9qkik_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpabo9qkik_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpabo9qkik_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpabo9qkik_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me!\n   \
    \ return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpjrqnc05p_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpjrqnc05p_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpjrqnc05p_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpjrqnc05p_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpjrqnc05p_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpjrqnc05p_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpjrqnc05p_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpp6rddlk__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpp6rddlk__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp68il59d2_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp68il59d2_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpbsqdt30__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpbsqdt30__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpbsqdt30__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpbsqdt30__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpbsqdt30__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpbsqdt30__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpbsqdt30__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    for _, v := range test {\n        if _, ok := result[string(v)];\
    \ ok {\n            result[string(v)] += 1\n        } else {\n            result[string(v)]\
    \ = 1\n        }\n        if result[string(v)] > max {\n            max = result[string(v)]\n\
    \        }\n    }\n    for k, v := range result {\n        if v != max {\n   \
    \         delete(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4pnccmiy_test.go:63: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp4pnccmiy_test.go:63: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp4pnccmiy_test.go:63: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4pnccmiy_test.go:63: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp4pnccmiy_test.go:63: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp4pnccmiy_test.go:63: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp8zztjijv_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp8zztjijv_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp8zztjijv_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp8zztjijv_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp8zztjijv_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp8zztjijv_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpapdhgjxa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpapdhgjxa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement me\n    return\
    \ map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpmuhctz6l_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpmuhctz6l_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpmuhctz6l_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpmuhctz6l_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpmuhctz6l_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpmuhctz6l_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpmuhctz6l_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpp6rddlk__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpp6rddlk__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpp6rddlk__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpp6rddlk__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var maxLetters []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxLetters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            maxLetters = append(maxLetters, string(letter))\n        }\n\
    \    }\n\n    for _, letter := range maxLetters {\n        histogram[letter] =\
    \ max\n    }\n\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplou0zwnn_test.go:64: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplou0zwnn_test.go:64:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var maxLetters []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxLetters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            maxLetters = append(maxLetters, string(letter))\n        }\n\
    \    }\n\n    for _, letter := range maxLetters {\n        histogram[letter] =\
    \ max\n    }\n\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplou0zwnn_test.go:64: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplou0zwnn_test.go:64:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp8zztjijv_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp8zztjijv_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp8zztjijv_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp8zztjijv_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp8zztjijv_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp8zztjijv_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpy9gtidrx_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpy9gtidrx_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpy9gtidrx_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpy9gtidrx_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpy9gtidrx_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpy9gtidrx_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_keys []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_keys =\
    \ []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_keys = append(max_keys, string(letter))\n        }\n    }\n\
    \n    var result = make(map[string]int)\n    for _, key := range max_keys {\n\
    \        result[key] = max\n    }\n\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp1xastd2q_test.go:65: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp1xastd2q_test.go:65: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp1xastd2q_test.go:65: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp1xastd2q_test.go:65: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp1xastd2q_test.go:65: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp1xastd2q_test.go:65: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpfrhoxxp__test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpfrhoxxp__test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpfrhoxxp__test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpfrhoxxp__test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpfrhoxxp__test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpfrhoxxp__test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var maxLetters []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxLetters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            maxLetters = append(maxLetters, string(letter))\n        }\n\
    \    }\n\n    var result = make(map[string]int)\n    for _, letter := range maxLetters\
    \ {\n        result[letter] = max\n    }\n\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpd846nk45_test.go:65: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpd846nk45_test.go:65: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpd846nk45_test.go:65: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpd846nk45_test.go:65: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpd846nk45_test.go:65: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpd846nk45_test.go:65: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result map[string]int =\
    \ make(map[string]int)\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpilu8d5m5_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpilu8d5m5_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpilu8d5m5_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpilu8d5m5_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpilu8d5m5_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpilu8d5m5_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // your code here\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpv9f2me3x_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpv9f2me3x_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpv9f2me3x_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpv9f2me3x_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpv9f2me3x_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpv9f2me3x_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpv9f2me3x_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpabo9qkik_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpabo9qkik_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpabo9qkik_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpabo9qkik_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpabo9qkik_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpabo9qkik_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpav5y358o_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp5gmco8mi_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp5gmco8mi_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp5gmco8mi_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp5gmco8mi_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp5gmco8mi_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp5gmco8mi_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpapdhgjxa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpapdhgjxa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpapdhgjxa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpapdhgjxa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement me\n    return\
    \ map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpmuhctz6l_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpmuhctz6l_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpmuhctz6l_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpmuhctz6l_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpmuhctz6l_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpmuhctz6l_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpmuhctz6l_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, v := range test {\n        result[string(v)]++\n\
    \    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpes38h5mm_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpes38h5mm_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpes38h5mm_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpes38h5mm_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpes38h5mm_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpes38h5mm_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpfrhoxxp__test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpfrhoxxp__test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpfrhoxxp__test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpfrhoxxp__test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpfrhoxxp__test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpfrhoxxp__test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpapdhgjxa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpapdhgjxa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4__og9yk_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4__og9yk_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpxp0i5msp_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpxp0i5msp_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpxp0i5msp_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpxp0i5msp_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpxp0i5msp_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpxp0i5msp_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpxp0i5msp_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074621
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)] += 1\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpm7k7rjms_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpm7k7rjms_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpm7k7rjms_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpm7k7rjms_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpm7k7rjms_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpm7k7rjms_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp68il59d2_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp68il59d2_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptvspff0q_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptvspff0q_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \        if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \        }\n    }\n    var result = make(map[string]int)\n    for letter, count\
    \ := range histogram {\n        if count == max {\n            result[letter]\
    \ = count\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp0tno3z6n_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp0tno3z6n_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp0tno3z6n_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp0tno3z6n_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp0tno3z6n_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp0tno3z6n_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp4q2r6wws_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp4q2r6wws_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result map[string]int =\
    \ make(map[string]int)\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpss1hm_wm_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpss1hm_wm_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpss1hm_wm_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpss1hm_wm_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpss1hm_wm_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpss1hm_wm_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        if _, ok := result[string(v)];\
    \ ok {\n            result[string(v)] += 1\n        } else {\n            result[string(v)]\
    \ = 1\n        }\n        if result[string(v)] > max {\n            max = result[string(v)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp40dczlwc_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp40dczlwc_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp40dczlwc_test.go:64: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp40dczlwc_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp40dczlwc_test.go:64: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp40dczlwc_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp4q2r6wws_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp4q2r6wws_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpapdhgjxa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpapdhgjxa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        if _, ok := result[string(v)];\
    \ ok {\n            result[string(v)]++\n        } else {\n            result[string(v)]\
    \ = 1\n        }\n        if result[string(v)] > max {\n            max = result[string(v)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpcd2xmeh8_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpcd2xmeh8_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpcd2xmeh8_test.go:64: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpcd2xmeh8_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpcd2xmeh8_test.go:64: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpcd2xmeh8_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp8j2q4x2w_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp8j2q4x2w_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp8j2q4x2w_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp8j2q4x2w_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp8j2q4x2w_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp8j2q4x2w_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me!\n   \
    \ return map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpi17wiiqo_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpi17wiiqo_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpi17wiiqo_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpi17wiiqo_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpi17wiiqo_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpi17wiiqo_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpi17wiiqo_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpp6rddlk__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpp6rddlk__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // Your code here\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp7r2vypt__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp7r2vypt__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp7r2vypt__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp7r2vypt__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp7r2vypt__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp7r2vypt__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp7r2vypt__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpp6rddlk__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpp6rddlk__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpav5y358o_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result map[string]int =\
    \ make(map[string]int)\n    var max int = 0\n    for _, value := range test {\n\
    \        if _, ok := result[string(value)]; ok {\n            result[string(value)]++\n\
    \        } else {\n            result[string(value)] = 1\n        }\n        if\
    \ result[string(value)] > max {\n            max = result[string(value)]\n   \
    \     }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpvo72tciw_test.go:63: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpvo72tciw_test.go:63: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpvo72tciw_test.go:63: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpvo72tciw_test.go:63: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpvo72tciw_test.go:63: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpvo72tciw_test.go:63: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var maxLetters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxLetters\
    \ = make(map[string]int)\n            maxLetters[string(letter)] = max\n     \
    \   } else if histogram[string(letter)] == max {\n            maxLetters[string(letter)]\
    \ = max\n        }\n    }\n    return maxLetters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpibbf7ob0_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpibbf7ob0_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpibbf7ob0_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpibbf7ob0_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpibbf7ob0_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpibbf7ob0_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement me\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqm7fwa8g_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpqm7fwa8g_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpqm7fwa8g_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpqm7fwa8g_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp68il59d2_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp68il59d2_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptvspff0q_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptvspff0q_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, value := range test {\n        result[string(value)]++\n\
    \        if result[string(value)] > max {\n            max = result[string(value)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpmdc4oh7i_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpmdc4oh7i_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpmdc4oh7i_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpmdc4oh7i_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpmdc4oh7i_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpmdc4oh7i_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpapdhgjxa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpapdhgjxa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptvspff0q_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptvspff0q_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptvspff0q_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpeiifjhqc_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpeiifjhqc_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpeiifjhqc_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpeiifjhqc_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpeiifjhqc_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpeiifjhqc_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpeiifjhqc_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpapdhgjxa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpapdhgjxa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpp6rddlk__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpp6rddlk__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpabo9qkik_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpabo9qkik_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpabo9qkik_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpabo9qkik_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpabo9qkik_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpabo9qkik_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, c := range test {\n        hist[string(c)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpeoonkhqa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpeoonkhqa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpeoonkhqa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpeoonkhqa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpeoonkhqa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpeoonkhqa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max int\n    var maxLetters []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxLetters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            maxLetters = append(maxLetters, string(letter))\n        }\n\
    \    }\n\n    for _, letter := range maxLetters {\n        histogram[letter] =\
    \ max\n    }\n\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmplou0zwnn_test.go:64: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmplou0zwnn_test.go:64:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmplou0zwnn_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpapdhgjxa_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpapdhgjxa_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpapdhgjxa_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp96hg7dq5_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp96hg7dq5_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp96hg7dq5_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp96hg7dq5_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp96hg7dq5_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp96hg7dq5_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement the function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_ih5kjak_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_ih5kjak_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_ih5kjak_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_ih5kjak_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_ih5kjak_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_ih5kjak_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_ih5kjak_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result map[string]int\n\
    \    result = make(map[string]int)\n    for _, value := range test {\n       \
    \ result[string(value)]++\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp5_gbegjg_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp5_gbegjg_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp5_gbegjg_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp5_gbegjg_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp5_gbegjg_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp5_gbegjg_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make([]string, 0)\n    for _, letter :=\
    \ range test {\n        result[string(letter)] += 1\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n            max_letters =\
    \ []string{string(letter)}\n        } else if result[string(letter)] == max {\n\
    \            max_letters = append(max_letters, string(letter))\n        }\n  \
    \  }\n    for _, letter := range max_letters {\n        result[letter] = max\n\
    \    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyaiya6_4_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyaiya6_4_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyaiya6_4_test.go:61: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyaiya6_4_test.go:61:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyaiya6_4_test.go:61: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyaiya6_4_test.go:61: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp68il59d2_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp68il59d2_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        if _, ok := result[string(letter)];\
    \ ok {\n            result[string(letter)] += 1\n        } else {\n          \
    \  result[string(letter)] = 1\n        }\n        if result[string(letter)] >\
    \ max {\n            max = result[string(letter)]\n        }\n    }\n    var final\
    \ = make(map[string]int)\n    for letter, count := range result {\n        if\
    \ count == max {\n            final[letter] = count\n        }\n    }\n    return\
    \ final\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpsle_qcn__test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpsle_qcn__test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpsle_qcn__test.go:64: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpsle_qcn__test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpsle_qcn__test.go:64: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpsle_qcn__test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    letters := make(map[string]int)\n\
    \    for _, letter := range test {\n        letters[string(letter)] += 1\n   \
    \ }\n    return letters\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmppu15gy5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmppu15gy5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmppu15gy5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmppu15gy5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmppu15gy5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmppu15gy5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4__og9yk_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4__og9yk_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpy9gtidrx_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpy9gtidrx_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpy9gtidrx_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpy9gtidrx_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpy9gtidrx_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpy9gtidrx_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var maxKeys []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxKeys =\
    \ []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            maxKeys = append(maxKeys, string(letter))\n        }\n    }\n\
    \n    var result = make(map[string]int)\n    for _, key := range maxKeys {\n \
    \       result[key] = max\n    }\n\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkwep3pz0_test.go:65: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpkwep3pz0_test.go:65: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpkwep3pz0_test.go:65: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpkwep3pz0_test.go:65: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkwep3pz0_test.go:65: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpkwep3pz0_test.go:65: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var hist = make(map[string]int)\n\
    \    var max = 0\n    for _, c := range test {\n        hist[string(c)]++\n  \
    \      if hist[string(c)] > max {\n            max = hist[string(c)]\n       \
    \ }\n    }\n    var result = make(map[string]int)\n    for k, v := range hist\
    \ {\n        if v == max {\n            result[k] = v\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp9fk9azuc_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp9fk9azuc_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp9fk9azuc_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp9fk9azuc_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp9fk9azuc_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp9fk9azuc_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement the function\n\
    \    return map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnqml3qto_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpnqml3qto_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpnqml3qto_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpnqml3qto_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpnqml3qto_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpnqml3qto_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpnqml3qto_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpav5y358o_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpav5y358o_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, char := range test {\n        result[string(char)]++\n\
    \        if result[string(char)] > max {\n            max = result[string(char)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp7e86a4tl_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp7e86a4tl_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp7e86a4tl_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp7e86a4tl_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp7e86a4tl_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp7e86a4tl_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4__og9yk_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4__og9yk_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpafgpza95_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpafgpza95_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpafgpza95_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpafgpza95_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmptggwee5f_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmptggwee5f_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmptggwee5f_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max int\n    var max_keys []string\n    for _, v := range test {\n  \
    \      result[string(v)]++\n        if result[string(v)] > max {\n           \
    \ max = result[string(v)]\n            max_keys = []string{string(v)}\n      \
    \  } else if result[string(v)] == max {\n            max_keys = append(max_keys,\
    \ string(v))\n        }\n    }\n    for _, v := range max_keys {\n        result[v]\
    \ = max\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n \
    \ candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkkl4x4kr_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpkkl4x4kr_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpkkl4x4kr_test.go:61: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpkkl4x4kr_test.go:61:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkkl4x4kr_test.go:61: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpkkl4x4kr_test.go:61: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // Your code here\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp7r2vypt__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp7r2vypt__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp7r2vypt__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp7r2vypt__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp7r2vypt__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp7r2vypt__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp7r2vypt__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var maxKeys []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxKeys =\
    \ []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            maxKeys = append(maxKeys, string(letter))\n        }\n    }\n\
    \n    var result = make(map[string]int)\n    for _, key := range maxKeys {\n \
    \       result[key] = max\n    }\n\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn_lqaggz_test.go:65: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpn_lqaggz_test.go:65: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpn_lqaggz_test.go:65: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn_lqaggz_test.go:65: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpn_lqaggz_test.go:65: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpn_lqaggz_test.go:65: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp8zztjijv_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp8zztjijv_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp8zztjijv_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp8zztjijv_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp8zztjijv_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp8zztjijv_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpav5y358o_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpfrhoxxp__test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpfrhoxxp__test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpfrhoxxp__test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpfrhoxxp__test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpfrhoxxp__test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpfrhoxxp__test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // Write your code here\n  \
    \  return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp285h12tb_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp285h12tb_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp285h12tb_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp285h12tb_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp285h12tb_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp285h12tb_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp285h12tb_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpp6rddlk__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpp6rddlk__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make([]string, 0)\n    for _, letter :=\
    \ range test {\n        result[string(letter)] += 1\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n            max_letters =\
    \ []string{string(letter)}\n        } else if result[string(letter)] == max {\n\
    \            max_letters = append(max_letters, string(letter))\n        }\n  \
    \  }\n    for _, letter := range max_letters {\n        result[letter] = max\n\
    \    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpyaiya6_4_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpyaiya6_4_test.go:61: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpyaiya6_4_test.go:61: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpyaiya6_4_test.go:61:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpyaiya6_4_test.go:61: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpyaiya6_4_test.go:61: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpp6rddlk__test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpp6rddlk__test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpp6rddlk__test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpp6rddlk__test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4__og9yk_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4__og9yk_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4__og9yk_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4__og9yk_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)] += 1\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpqbon5um4_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpqbon5um4_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpqbon5um4_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpqbon5um4_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpqbon5um4_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpqbon5um4_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    if len(test) == 0 {\n      \
    \  return map[string]int{}\n    }\n    hist := make(map[string]int)\n    for _,\
    \ letter := range test {\n        hist[string(letter)]++\n    }\n    return hist\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpnpf37fo7_test.go:53: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpnpf37fo7_test.go:53: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpnpf37fo7_test.go:53: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpnpf37fo7_test.go:53:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpnpf37fo7_test.go:53: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpnpf37fo7_test.go:53: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpafgpza95_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpafgpza95_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpafgpza95_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpafgpza95_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpafgpza95_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram map[string]int\n\
    \    histogram = make(map[string]int)\n    for _, letter := range test {\n   \
    \     histogram[string(letter)] += 1\n    }\n    return histogram\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpdnr08mbb_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmpdnr08mbb_test.go:51: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmpdnr08mbb_test.go:51: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmpdnr08mbb_test.go:51:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpdnr08mbb_test.go:51: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmpdnr08mbb_test.go:51: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        if _, ok := result[string(letter)];\
    \ ok {\n            result[string(letter)] += 1\n        } else {\n          \
    \  result[string(letter)] = 1\n        }\n        if result[string(letter)] >\
    \ max {\n            max = result[string(letter)]\n        }\n    }\n    var final\
    \ = make(map[string]int)\n    for key, value := range result {\n        if value\
    \ == max {\n            final[key] = value\n        }\n    }\n    return final\n\
    }\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp1n4pco94_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp1n4pco94_test.go:64: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp1n4pco94_test.go:64: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp1n4pco94_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp1n4pco94_test.go:64: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp1n4pco94_test.go:64: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4__og9yk_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4__og9yk_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement this function\n\
    \    return map[string]int{}\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp68il59d2_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp68il59d2_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp68il59d2_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp68il59d2_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpav5y358o_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, value := range test {\n        result[string(value)]++\n\
    \        if result[string(value)] > max {\n            max = result[string(value)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp0_ajhx_2_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmp0_ajhx_2_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmp0_ajhx_2_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp0_ajhx_2_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp0_ajhx_2_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmp0_ajhx_2_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return nil\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp4__og9yk_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp4__og9yk_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp4__og9yk_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp4__og9yk_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    var max_letters = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_letters\
    \ = make(map[string]int)\n            max_letters[string(letter)] = max\n    \
    \    } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n\nfunc TestHistogram(t *testing.T)\
    \ {\n  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpr2avxie0_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpr2avxie0_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpr2avxie0_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpr2avxie0_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpr2avxie0_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpr2avxie0_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, c := range test {\n        result[string(c)]++\n\
    \        if result[string(c)] > max {\n            max = result[string(c)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n\nfunc TestHistogram(t\
    \ *testing.T) {\n  candidate := histogram\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n  \
    \   { actual: candidate(\"a b c a b\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpseaa539p_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpseaa539p_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpseaa539p_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpseaa539p_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpseaa539p_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpseaa539p_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    return map[string]int{}\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmprfapdszq_test.go:46: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmprfapdszq_test.go:46: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmprfapdszq_test.go:46:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmprfapdszq_test.go:46: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpav5y358o_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpav5y358o_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpav5y358o_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpav5y358o_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: Implement the function\n\
    \    return nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp_ih5kjak_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmp_ih5kjak_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmp_ih5kjak_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmp_ih5kjak_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmp_ih5kjak_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmp_ih5kjak_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmp_ih5kjak_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660074626
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO\n    return nil\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpxy8b1v7n_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpxy8b1v7n_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpxy8b1v7n_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpxy8b1v7n_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpxy8b1v7n_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpxy8b1v7n_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpxy8b1v7n_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \        if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \        }\n    }\n    var result = make(map[string]int)\n    for key, value :=\
    \ range histogram {\n        if value == max {\n            result[key] = value\n\
    \        }\n    }\n    return result\n}\n\nfunc TestHistogram(t *testing.T) {\n\
    \  candidate := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a b\
    \ b a\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual: candidate(\"\
    a b c a b\"), expected: map[string]int{\"a\": 2, \"b\": 2} },\n     { actual:\
    \ candidate(\"a b c d g\"), expected: map[string]int{\"a\": 1, \"b\": 1, \"c\"\
    : 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"r t g\"), expected: map[string]int{\"\
    r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"b b b b a\"), expected:\
    \ map[string]int{\"b\": 4} },\n     { actual: candidate(\"r t g\"), expected:\
    \ map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    \"), expected: map[string]int{} },\n     { actual: candidate(\"a\"), expected:\
    \ map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpkbp1z1o5_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpkbp1z1o5_test.go:60: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpkbp1z1o5_test.go:60: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpkbp1z1o5_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpkbp1z1o5_test.go:60: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpkbp1z1o5_test.go:60: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \   }\n    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate\
    \ := histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp8j2q4x2w_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp8j2q4x2w_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp8j2q4x2w_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp8j2q4x2w_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp8j2q4x2w_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp8j2q4x2w_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    histogram := make(map[string]int)\n\
    \    for _, char := range test {\n        histogram[string(char)]++\n    }\n \
    \   return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4lwjfx8v_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp4lwjfx8v_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp4lwjfx8v_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp4lwjfx8v_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp4lwjfx8v_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp4lwjfx8v_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp4q2r6wws_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp4q2r6wws_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, value := range test {\n        result[string(value)]\
    \ += 1\n        if result[string(value)] > max {\n            max = result[string(value)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n\
    \nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\": 2, \"\
    b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpbckgp6wq_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3)]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n \
    \       tmpbckgp6wq_test.go:59: expected 'map[a:%!s(int=2) b:%!s(int=2)]', got\
    \ 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__2 (0.00s)\n     \
    \   tmpbckgp6wq_test.go:59: expected 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1)\
    \ d:%!s(int=1) g:%!s(int=1)]', got 'map[ :%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpbckgp6wq_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmpbckgp6wq_test.go:59: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5 (0.00s)\n\
    \        tmpbckgp6wq_test.go:59: expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]',\
    \ got 'map[ :%!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074627
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    // TODO: implement\n    return\
    \ nil\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[]'\n    --- FAIL: TestHistogram/test_num__1 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[a:%!s(int=2) b:%!s(int=2)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__2\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[a:%!s(int=1) b:%!s(int=1)\
    \ c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__3\
    \ (0.00s)\n        tmpn6pcyigy_test.go:47: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[]'\n    --- FAIL: TestHistogram/test_num__4 (0.00s)\n\
    \        tmpn6pcyigy_test.go:47: expected 'map[b:%!s(int=4)]', got 'map[]'\n \
    \   --- FAIL: TestHistogram/test_num__5 (0.00s)\n        tmpn6pcyigy_test.go:47:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[]'\n    ---\
    \ FAIL: TestHistogram/test_num__7 (0.00s)\n        tmpn6pcyigy_test.go:47: expected\
    \ 'map[a:%!s(int=1)]', got 'map[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074622
- exit_code: 1
  program: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a string representing a space separated lowercase letters, return a dictionary\n\
    // of the letter with the most repetition and containing the corresponding count.\n\
    // If several letters have the same occurrence, return all of them.\n// Example:\n\
    // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n\
    // >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
    a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b\
    \ b a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
    func histogram(test string) map[string]int {\n    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n\nfunc TestHistogram(t *testing.T) {\n  candidate :=\
    \ histogram\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
    a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
    a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
    r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
    \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
    \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1}\
    \ },\n     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual:\
    \ candidate(\"a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestHistogram (0.00s)\n    --- FAIL: TestHistogram/test_num__0\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=3) a:%!s(int=2) b:%!s(int=2)]'\n    --- FAIL: TestHistogram/test_num__1\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[a:%!s(int=2) b:%!s(int=2)]',\
    \ got 'map[ :%!s(int=4) a:%!s(int=2) b:%!s(int=2) c:%!s(int=1)]'\n    --- FAIL:\
    \ TestHistogram/test_num__2 (0.00s)\n        tmp4q2r6wws_test.go:50: expected\
    \ 'map[a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]', got\
    \ 'map[ :%!s(int=4) a:%!s(int=1) b:%!s(int=1) c:%!s(int=1) d:%!s(int=1) g:%!s(int=1)]'\n\
    \    --- FAIL: TestHistogram/test_num__3 (0.00s)\n        tmp4q2r6wws_test.go:50:\
    \ expected 'map[g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]', got 'map[ :%!s(int=2)\
    \ g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n    --- FAIL: TestHistogram/test_num__4\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[b:%!s(int=4)]', got 'map[\
    \ :%!s(int=4) a:%!s(int=1) b:%!s(int=4)]'\n    --- FAIL: TestHistogram/test_num__5\
    \ (0.00s)\n        tmp4q2r6wws_test.go:50: expected 'map[g:%!s(int=1) r:%!s(int=1)\
    \ t:%!s(int=1)]', got 'map[ :%!s(int=2) g:%!s(int=1) r:%!s(int=1) t:%!s(int=1)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074624
