name: HumanEval_63_fibfib
language: go_test.go
prompt: "package fibfib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// The\
  \ FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's\
  \ defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n\
  // fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n// >>>\
  \ fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunc fibfib(n\
  \ int) int {\n"
tests: "func TestFibfib(t *testing.T) {\n  candidate := fibfib\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(2), expected: 1 },\n     { actual: candidate(1), expected:\
  \ 0 },\n     { actual: candidate(5), expected: 4 },\n     { actual: candidate(8),\
  \ expected: 24 },\n     { actual: candidate(10), expected: 81 },\n     { actual:\
  \ candidate(12), expected: 274 },\n     { actual: candidate(14), expected: 927 },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n       \
    \ return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\
    \ else if n == 1 {\n        return 0\n    } else if n == 2 {\n        return 1\n\
    \    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n    }\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n   \
    \ if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n   \
    \     return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return\
    \ 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n\
    \    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n ==\
    \ 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n   \
    \ if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n == 1\
    \ {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n        return\
    \ 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n == 2 {\n      \
    \  return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return 0\n \
    \   }\n    if n == 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n ==\
    \ 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n   \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n   \
    \     return 0\n    } else if n == 1 {\n        return 0\n    } else if n == 2\
    \ {\n        return 1\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n    }\n}\n", "    if n == 0 {\n        return 0\n    }\n    if\
    \ n == 1 {\n        return 0\n    }\n    if n == 2 {\n        return 1\n    }\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 0\n    }\n    if n ==\
    \ 2 {\n        return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
