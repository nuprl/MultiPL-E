language: go_test.go
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var myPrefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        myPrefixes = append(myPrefixes, myString[:i])\n    }\n    return\
    \ myPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i+1])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i+1])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    prefixes := []string{}\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075155
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i+1])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075155
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var myList []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        myList = append(myList, myString[:i+1])\n    }\n    return myList\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075155
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i+1])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    result := []string{}\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075155
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var myPrefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        myPrefixes = append(myPrefixes, myString[:i])\n    }\n    return\
    \ myPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075155
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 1
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    // TODO\n    return []string{}\n}\n\nfunc TestAll_Prefixes(t\
    \ *testing.T) {\n  candidate := all_prefixes\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(\"\"), expected: []string{} },\n     { actual: candidate(\"asdfgh\"\
    ), expected: []string{\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    } },\n     { actual: candidate(\"WWW\"), expected: []string{\"W\", \"WW\", \"\
    WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestAll_Prefixes (0.00s)\n    --- FAIL: TestAll_Prefixes/test_num__1\
    \ (0.00s)\n        tmpww8iglbl_test.go:31: expected '[a as asd asdf asdfg asdfgh]',\
    \ got '[]'\n    --- FAIL: TestAll_Prefixes/test_num__2 (0.00s)\n        tmpww8iglbl_test.go:31:\
    \ expected '[W WW WWW]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660075155
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i+1])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var myPrefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        myPrefixes = append(myPrefixes, myString[:i])\n    }\n    return\
    \ myPrefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i+1])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        result = append(result, myString[:i+1])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var prefixes []string\n    for i := 0; i < len(myString);\
    \ i++ {\n        prefixes = append(prefixes, myString[:i+1])\n    }\n    return\
    \ prefixes\n}\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n\
    \     { actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\"\
    , \"asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075111
- exit_code: 0
  program: "package all_prefixes_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Return list of all prefixes from shortest to longest of the input string\n\
    // >>> all_prefixes(\"abc\")\n// []string{\"a\", \"ab\", \"abc\"}\nfunc all_prefixes(myString\
    \ string) []string {\n    var result []string\n    for i := 1; i <= len(myString);\
    \ i++ {\n        result = append(result, myString[:i])\n    }\n    return result\n\
    }\n\nfunc TestAll_Prefixes(t *testing.T) {\n  candidate := all_prefixes\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"\"), expected: []string{} },\n     {\
    \ actual: candidate(\"asdfgh\"), expected: []string{\"a\", \"as\", \"asd\", \"\
    asdf\", \"asdfg\", \"asdfgh\"} },\n     { actual: candidate(\"WWW\"), expected:\
    \ []string{\"W\", \"WW\", \"WWW\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075111
