language: go_test.go
name: HumanEval_41_car_race_collision
results:
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving right to left.\n    // We then iterate through the cars that are moving\
    \ left to right, and check if they\n    // collide with any of the cars that are\
    \ moving right to left.\n    // The hash table is implemented as a slice of bools.\n\
    \    // The key is the position of the car.\n    // The value is true if the car\
    \ is moving right to left, and false otherwise.\n    // The size of the hash table\
    \ is 2n, because the cars can be at most 2n positions.\n    // The hash table\
    \ is initialized to all false.\n    hash_table := make([]bool, 2*n)\n    for i\
    \ := 0; i < 2*n; i++ {\n        hash_table[i] = false\n    }\n    // We now populate\
    \ the hash table with the cars that are moving right to left.\n    // The cars\
    \ are at positions n, n+1, ..., 2n-1.\n    for i := n; i < 2*n; i++ {\n      \
    \  hash_table[i] = true\n    }\n    // We now iterate through the cars that are\
    \ moving left to right, and check if they\n    // collide with any of the cars\
    \ that are moving right to left.\n    // The cars are at positions 0, 1, ...,\
    \ n-1.\n    collisions := 0\n    for i := 0; i < n; i++ {\n        if hash_table[i]\
    \ {\n            collisions++\n        }\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpotcddkec_test.go:63: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpotcddkec_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpotcddkec_test.go:63: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpotcddkec_test.go:63:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpotcddkec_test.go:63: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ left to right\n    // that are to the left of a car that's moving right to left.\n\
    \    // We can use a binary search tree to keep track of the cars that are moving\n\
    \    // right to left.\n    // We can use a simple array to keep track of the\
    \ cars that are moving left to right.\n    // We can use a simple array to keep\
    \ track of the cars that are moving right to left.\n    // We can use a simple\
    \ array to keep track of the cars that are moving right to left.\n    // We can\
    \ use a simple array to keep track of the cars that are moving right to left.\n\
    \    // We can use a simple array to keep track of the cars that are moving right\
    \ to left.\n    // We can use a simple array to keep track of the cars that are\
    \ moving right to left.\n    // We can use a simple array to keep track of the\
    \ cars that are moving right to left.\n    // We can use a simple array to keep\
    \ track of the cars that are moving right to left.\n    // We can use a simple\
    \ array to keep track of the cars that are moving right to left.\n    // We can\
    \ use a simple array to keep track of the cars that are moving right to left.\n\
    \    // We can use a simple array to keep track of the cars that are moving right\
    \ to left.\n    // We can use a simple array to keep track of the cars that are\
    \ moving right to left.\n    // We can use a simple array to keep track of the\
    \ cars that are moving right to left.\n    // We can use a simple array to keep\
    \ track of the cars that are moving right to left.\n    // We can use a simple\
    \ array to keep track of the cars that are moving right to left.\n    // We can\
    \ use a simple array to keep track of the cars that are moving right to left.\n\
    \    // We can use a simple array to keep track of the cars that are moving right\
    \ to left.\n    // We can use a simple array to keep track of the cars that are\
    \ moving right to left.\n    // We can use a simple array to keep track of the\
    \ cars that are moving right to left.\n    // We can use a simple array to keep\
    \ track of the cars that are moving right to left.\n    // We can use a simple\
    \ array to\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpky_8rgzc_test.go:42:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // We iterate through the cars that are moving right\
    \ to left.  For each car, we\n    // check if there's a car in the hash table\
    \ that has the same position.  If so,\n    // we increment the collision counter.\
    \  We then remove the car from the hash table.\n    // This is because we only\
    \ want to count each collision once.\n    //\n    // The hash table is implemented\
    \ as a map.  The key is the position of the car.\n    // The value is the number\
    \ of cars at that position.\n    //\n    // The time complexity is O(n) and the\
    \ space complexity is O(n).\n    collisions := 0\n    cars := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        cars[i] = 1\n    }\n    for i := n; i <\
    \ 2 * n; i++ {\n        if cars[i] > 0 {\n            collisions++\n         \
    \   cars[i]--\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp8_g637rz_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp8_g637rz_test.go:58:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp8_g637rz_test.go:58: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp8_g637rz_test.go:58:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp8_g637rz_test.go:58: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n-1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmppz8o183n_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmppz8o183n_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073159
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n*(n-1)/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // We will use\
    \ a map to keep track of the cars that are moving left to right.\n    // The key\
    \ of the map is the car number.\n    // The value of the map is the position of\
    \ the car.\n    // The position is measured from the left end of the road.\n \
    \   // Initially, all cars are at position 0.\n    left_to_right := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        left_to_right[i] = 0\n    }\n\n    // We\
    \ will use a map to keep track of the cars that are moving right to left.\n  \
    \  // The key of the map is the car number.\n    // The value of the map is the\
    \ position of the car.\n    // The position is measured from the right end of\
    \ the road.\n    // Initially, all cars are at position 0.\n    right_to_left\
    \ := make(map[int]int)\n    for i := 0; i < n; i++ {\n        right_to_left[i]\
    \ = 0\n    }\n\n    // We will use a map to keep track of the cars that are moving\
    \ left to right.\n    // The key of the map is the car number.\n    // The value\
    \ of the map is the position of the car.\n    // The position is measured from\
    \ the left end of the road.\n    // Initially, all cars are at position 0.\n \
    \   left_to_right_collision := make(map[int]int)\n    for i := 0; i < n; i++ {\n\
    \        left_to_right_collision[i] = 0\n    }\n\n    // We will use a map to\
    \ keep track of the cars that are moving right to left.\n    // The key of the\
    \ map is the car number.\n    // The value of the map is the position of the car.\n\
    \    // The position is measured from the right end of the road.\n    // Initially,\
    \ all cars are at position 0.\n    right_to_left_collision := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        right_to_left_collision[i] = 0\n    }\n\
    \n   \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpi3pq5w8n_test.go:59:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to keep track of\
    \ the cars.\n    // The left subtree of a node contains all cars that are moving\
    \ left to right\n    // and are to the left of the car represented by the node.\n\
    \    // The right subtree of a node contains all cars that are moving right to\
    \ left\n    // and are to the right of the car represented by the node.\n    //\
    \ The root node represents the car that's in the middle of the road.\n    // The\
    \ cars are numbered from 0 to n-1.\n    // The car numbered 0 is the car that's\
    \ the farthest to the left.\n    // The car numbered n-1 is the car that's the\
    \ farthest to the right.\n    // The cars are inserted into the tree in the order\
    \ of their numbers.\n    // The cars are inserted into the tree in the following\
    \ order:\n    // 0, 1, 2, ..., n-1.\n    // The cars are inserted into the tree\
    \ in the following order:\n    // n-1, n-2, ..., 0.\n    // The cars are inserted\
    \ into the tree in the following order:\n    // 0, n-1, 1, n-2, 2, n-3, ...\n\
    \    // The cars are inserted into the tree in the following order:\n    // n-1,\
    \ 0, n-2, 1, n-3, 2, ...\n    // The cars are inserted into the tree in the following\
    \ order:\n    // 0, n-1, 1, n-2, 2, n-3, ..., n/2, n/2-1, ..., n/2+1\n    // The\
    \ cars are inserted into the tree in the following order:\n    // n-1, 0, n-2,\
    \ 1, n-3, 2, ..., n/2-1, n/2, ..., n/2+1\n    // The cars are inserted into the\
    \ tree in the following order:\n    // 0, n-1, 1, n-2, 2, n-3, ..., n/2, n/2-1,\
    \ ..., n/2+1, n/2+2, ..., n-1\n    // The cars are inserted into the tree in the\
    \ following order:\n    // n-1, 0\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppezae0b7_test.go:43:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // number of cars that are at that position.  We start\
    \ with the cars that are\n    // moving left to right.  We then go through the\
    \ cars that are moving right to left.\n    // For each car that's moving right\
    \ to left, we look up the hash table to see\n    // if there are any cars that\
    \ are moving left to right that are at the same position.\n    // If so, we increment\
    \ the collision count by the number of cars that are moving\n    // left to right\
    \ at that position.  We then decrement the number of cars that are\n    // moving\
    \ left to right at that position by 1.  We then move on to the next car\n    //\
    \ that's moving right to left.\n    // We then return the collision count.\n \
    \   //\n    // The time complexity is O(n), where n is the number of cars.\n \
    \   // The space complexity is O(n), where n is the number of cars.\n    //\n\
    \    // Note that the cars that are moving left to right and the cars that are\
    \ moving\n    // right to left are not the same cars.  They are two different\
    \ sets of cars.\n    //\n    // Note that the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    // in their trajectory as if they did\
    \ not collide.\n    //\n    // Note that the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    // in their trajectory as if they did\
    \ not collide.\n    //\n    // Note that the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    // in their trajectory as if they did\
    \ not collide.\n    //\n    // Note that the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    // in their trajectory as if they did\
    \ not collide.\n    //\n    // Note that the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    // in their trajectory as if they did\
    \ not collide.\n    //\n    // Note that the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    // in their trajectory as if they did\
    \ not collide.\n    //\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpixp6n2___test.go:54:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving left to right.\n    // The key is the position of the car. \
    \ The value is the number of cars at that position.\n    // We start with an empty\
    \ hash table.  We then iterate through the cars that are moving\n    // right\
    \ to left.  For each car, we check if there is a car moving left to right at the\n\
    \    // same position.  If there is, we increment the number of collisions.  We\
    \ then add\n    // the car to the hash table.\n    //\n    // The time complexity\
    \ is O(n).  The space complexity is O(n).\n    //\n    // Note that the cars are\
    \ infinitely sturdy and strong; as a result, they continue moving\n    // in their\
    \ trajectory as if they did not collide.  This means that we don't have to\n \
    \   // remove the cars from the hash table.\n    collisions := 0\n    cars :=\
    \ make(map[int]int)\n    for i := 0; i < n; i++ {\n        if _, ok := cars[i];\
    \ ok {\n            collisions++\n        }\n        cars[i]++\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpdmwhwpa7_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpdmwhwpa7_test.go:57:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpdmwhwpa7_test.go:57: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpdmwhwpa7_test.go:57:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpdmwhwpa7_test.go:57: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to keep track of\
    \ the cars that are\n    // moving left to right.  We will use a BST that is sorted\
    \ by the position of the\n    // car.  We will insert the cars into the BST as\
    \ they move from left to right.\n    // As we insert a car, we will check if there\
    \ is a car to the left of it.  If there\n    // is, then we have a collision.\
    \  We will keep track of the number of collisions.\n    // We will also keep track\
    \ of the number of cars that are moving right to left.\n    // When we insert\
    \ a car into the BST, we will check if there are any cars moving\n    // right\
    \ to left.  If there are, then we have a collision.  We will keep track of\n \
    \   // the number of collisions.\n    // We will use a BST that is sorted by the\
    \ position of the car.  We will insert\n    // the cars into the BST as they move\
    \ from left to right.  As we insert a car,\n    // we will check if there is a\
    \ car to the left of it.  If there is, then we have\n    // a collision.  We will\
    \ keep track of the number of collisions.  We will also\n    // keep track of\
    \ the number of cars that are moving right to left.  When we insert\n    // a\
    \ car into the BST, we will check if there are any cars moving right to left.\n\
    \    // If there are, then we have a collision.  We will keep track of the number\
    \ of\n    // collisions.\n    // We will use a BST that is sorted by the position\
    \ of the car.  We will insert\n    // the cars into the BST as they move from\
    \ left to right.  As we insert a car,\n    // we will check if there is a car\
    \ to the left of it.  If there is, then we have\n    // a collision.  We will\
    \ keep track of the number of collisions.  We will also\n    // keep track of\
    \ the number of cars that are moving right to left.  When we insert\n    // a\
    \ car into the BST, we will check if there are any cars moving right to left.\n\
    \    // If there are, then we have a collision.  We will keep track of the number\
    \ of\n    // collisions.\n    // We will\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp27s4t4wl_test.go:43:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a hash table to store the cars that are moving left\
    \ to right.\n    // The key is the position of the car, and the value is the number\
    \ of cars\n    // at that position.\n    left_to_right := make(map[int]int)\n\
    \    // We use a hash table to store the cars that are moving right to left.\n\
    \    // The key is the position of the car, and the value is the number of cars\n\
    \    // at that position.\n    right_to_left := make(map[int]int)\n    // We use\
    \ a hash table to store the cars that are moving left to right.\n    // The key\
    \ is the position of the car, and the value is the number of cars\n    // at that\
    \ position.\n    collisions := 0\n    // We put the cars that are moving left\
    \ to right in the hash table.\n    for i := 0; i < n; i++ {\n        left_to_right[i]\
    \ = 1\n    }\n    // We put the cars that are moving right to left in the hash\
    \ table.\n    for i := 0; i < n; i++ {\n        right_to_left[-i] = 1\n    }\n\
    \    // We iterate through all the cars that are moving left to right.\n    for\
    \ position, _ := range left_to_right {\n        // We check if there is a car\
    \ that is moving right to left at the same position.\n        if right_to_left[position]\
    \ > 0 {\n            // If there is, we increment the number of collisions.\n\
    \            collisions++\n        }\n    }\n    return collisions\n}\n\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpdl7e54ku_test.go:65: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpdl7e54ku_test.go:65:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpdl7e54ku_test.go:65: expected '%!s(int=16)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpdl7e54ku_test.go:65:\
    \ expected '%!s(int=64)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpdl7e54ku_test.go:65: expected '%!s(int=100)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // The cars moving\
    \ left to right are numbered 0 to n-1.\n    // The cars moving right to left are\
    \ numbered n to 2n-1.\n    // We will use a map to keep track of the cars.\n \
    \   // The key is the car number.\n    // The value is the distance of the car\
    \ from the origin.\n    // Initially, the cars moving left to right are at distance\
    \ 0.\n    // Initially, the cars moving right to left are at distance 2n.\n  \
    \  // The cars move at the same speed.  As a result, the distance of a car\n \
    \   // from the origin increases by 1 every second.\n    // We will simulate the\
    \ movement of the cars for 2n seconds.\n    // At the end of the simulation, we\
    \ will count the number of collisions.\n    // We will use a map to keep track\
    \ of the cars.\n    // The key is the car number.\n    // The value is the distance\
    \ of the car from the origin.\n    cars := make(map[int]int)\n    for i := 0;\
    \ i < n; i++ {\n        cars[i] = 0\n        cars[i+n] = 2*n\n    }\n    // Simulate\
    \ the movement of the cars for 2n seconds.\n    for t := 0; t < 2*n; t++ {\n \
    \       // Move all cars.\n        for i := 0; i < 2*n; i++ {\n            cars[i]++\n\
    \        }\n    }\n    // Count the number of collisions.\n    collisions := 0\n\
    \    for i := 0; i < n; i++ {\n        if cars[i] == cars[i+n] {\n           \
    \ collisions++\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmph6zrqj8n_test.go:71: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmph6zrqj8n_test.go:71:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmph6zrqj8n_test.go:71: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmph6zrqj8n_test.go:71:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmph6zrqj8n_test.go:71: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can assume that the cars are numbered from 0 to n-1.\n\
    \    // We can assume that the cars moving left to right are numbered 0 to n-1.\n\
    \    // We can assume that the cars moving right to left are numbered n to 2n-1.\n\
    \    // We can assume that the cars moving left to right start at position 0.\n\
    \    // We can assume that the cars moving right to left start at position 2n.\n\
    \    // We can assume that the cars moving left to right end at position 2n.\n\
    \    // We can assume that the cars moving right to left end at position 0.\n\
    \    // We can assume that the cars moving left to right move at speed 1.\n  \
    \  // We can assume that the cars moving right to left move at speed 1.\n    //\
    \ We can assume that the cars moving left to right move left to right.\n    //\
    \ We can assume that the cars moving right to left move right to left.\n    //\
    \ We can assume that the cars moving left to right are not moving at the same\
    \ time.\n    // We can assume that the cars moving right to left are not moving\
    \ at the same time.\n    // We can assume that the cars moving left to right are\
    \ not moving at the same time.\n    // We can assume that the cars moving right\
    \ to left are not moving at the same time.\n    // We can assume that the cars\
    \ moving left to right are not moving at the same time.\n    // We can assume\
    \ that the cars moving right to left are not moving at the same time.\n    //\
    \ We can assume that the cars moving left to right are not moving at the same\
    \ time.\n    // We can assume that the cars moving right to left are not moving\
    \ at the same time.\n    // We can assume that the cars moving left to right are\
    \ not moving at the same time.\n    // We can assume that the cars moving right\
    \ to left are not moving at the same time.\n    // We can assume that the cars\
    \ moving left to right are not moving at the same time.\n    // We can assume\
    \ that the cars moving right to left are not moving at the same time.\n    //\
    \ We can assume that the cars moving left to right are not moving at the same\
    \ time.\n    // We can assume that the cars moving right to left are not moving\
    \ at the same time.\n    // We can assume that the cars moving left\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp26cpgkgm_test.go:43:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to keep track of\
    \ the cars that are\n    // moving left to right.  We insert the cars into the\
    \ tree as they move left to right.\n    // We also keep track of the number of\
    \ collisions.  The number of collisions is the\n    // number of cars that are\
    \ moving right to left that are to the left of the car that\n    // is moving\
    \ left to right.  We can find this number by doing a search in the tree.\n   \
    \ // The number of cars that are moving right to left that are to the left of\
    \ the car\n    // that is moving left to right is the number of nodes in the tree\
    \ that are to the\n    // left of the node that represents the car that is moving\
    \ left to right.\n    // The time complexity is O(n log n).\n    collisions :=\
    \ 0\n    tree := NewBinarySearchTree()\n    for i := 0; i < n; i++ {\n       \
    \ collisions += tree.Search(i)\n        tree.Insert(i)\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzssafnli_test.go:27:13: undefined: NewBinarySearchTree

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here.\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpmg2cm9ye_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpmg2cm9ye_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We start with an empty hash\
    \ table.\n    // We then iterate through the cars that are moving right to left.\
    \  For each car, we\n    // check if there are any cars that are moving left to\
    \ right at the same position.\n    // If there are, we add the number of cars\
    \ at that position to the total number of collisions.\n    // We then remove the\
    \ car from the hash table.\n    // We then iterate through the cars that are moving\
    \ left to right.  For each car, we\n    // add it to the hash table.\n    // We\
    \ repeat the above steps until we have processed all the cars.\n    // The time\
    \ complexity is O(n), and the space complexity is O(n).\n    collisions := 0\n\
    \    cars := make(map[int]int)\n    for i := 0; i < n; i++ {\n        // Process\
    \ the cars that are moving right to left.\n        collisions += cars[i]\n   \
    \     delete(cars, i)\n        // Process the cars that are moving left to right.\n\
    \        cars[i]++\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp8_bzy2ij_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp8_bzy2ij_test.go:57:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp8_bzy2ij_test.go:57: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp8_bzy2ij_test.go:57:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp8_bzy2ij_test.go:57: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the car's position, and the\
    \ value is the number\n    // of cars that are at that position.  The hash table\
    \ is initialized with\n    // the cars that are moving right to left.  Then, we\
    \ iterate through the\n    // cars that are moving left to right.  For each car,\
    \ we check if there\n    // is a car that is moving right to left at the same\
    \ position.  If so,\n    // we increment the number of collisions by the number\
    \ of cars that are\n    // moving right to left at that position.  Then, we increment\
    \ the number\n    // of cars that are moving left to right at that position.\n\
    \    //\n    // The time complexity is O(n), where n is the number of cars.\n\
    \    // The space complexity is O(n).\n    collisions := 0\n    left_to_right\
    \ := make(map[int]int)\n    for i := 0; i < n; i++ {\n        left_to_right[i]\
    \ = 0\n    }\n    for i := 0; i < n; i++ {\n        collisions += left_to_right[i]\n\
    \        left_to_right[i]++\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpc7fzs8_v_test.go:58: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpc7fzs8_v_test.go:58:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpc7fzs8_v_test.go:58: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpc7fzs8_v_test.go:58:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpc7fzs8_v_test.go:58: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // number of cars at that position.  We start with\
    \ a hash table with n entries,\n    // each entry having a key of 0 and a value\
    \ of 1.\n    // We then iterate over the cars that are moving right to left. \
    \ For each car,\n    // we check the hash table to see if there are any cars that\
    \ are moving left to right\n    // that are at the same position.  If so, we increment\
    \ the collision count.\n    // We then delete the entry from the hash table.\n\
    \    // We repeat this process until we've iterated over all the cars that are\
    \ moving\n    // right to left.\n    collisions := 0\n    left_to_right := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        left_to_right[0]++\n    }\n    for i :=\
    \ 0; i < n; i++ {\n        if _, ok := left_to_right[i]; ok {\n            collisions++\n\
    \            delete(left_to_right, i)\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkssdszs4_test.go:58: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkssdszs4_test.go:58:\
    \ expected '%!s(int=9)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkssdszs4_test.go:58: expected '%!s(int=16)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkssdszs4_test.go:58:\
    \ expected '%!s(int=64)', got '%!s(int=1)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkssdszs4_test.go:58: expected '%!s(int=100)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the car's position, and the value is\
    \ the car's speed.\n    // We then iterate through the cars that are moving right\
    \ to left.\n    // For each car, we check if the car's position is in the hash\
    \ table.\n    // If so, we increment the number of collisions.\n    // We then\
    \ remove the car from the hash table.\n    // We then move the car to the next\
    \ position, and add it to the hash table.\n    // We repeat this process until\
    \ we have iterated through all the cars that are moving right to left.\n    //\
    \ The number of collisions is the number of collisions we have encountered so\
    \ far.\n    // The time complexity is O(n), and the space complexity is O(n).\n\
    \    collisions := 0\n    cars := make(map[int]int)\n    for i := 0; i < n; i++\
    \ {\n        cars[i] = i\n    }\n    for i := n - 1; i >= 0; i-- {\n        if\
    \ _, ok := cars[i]; ok {\n            collisions++\n        }\n        delete(cars,\
    \ i)\n        cars[i - i] = i\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpx8gsxet8_test.go:59: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpx8gsxet8_test.go:59:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpx8gsxet8_test.go:59: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpx8gsxet8_test.go:59:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpx8gsxet8_test.go:59: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table.  The key is the position\
    \ of the car.\n    // The value is the number of cars at that position.  We will\
    \ use a map\n    // of int to int.\n    // We will iterate through the cars from\
    \ left to right.  For each car,\n    // we will check if there are any cars to\
    \ the left of it.  If there are,\n    // we will add the number of cars to the\
    \ collision count.\n    // Then we will add the car to the hash table.\n    //\
    \ We will do the same thing for the cars moving right to left.\n    // The time\
    \ complexity is O(n).  The space complexity is O(n).\n    collisions := 0\n  \
    \  cars := make(map[int]int)\n    for i := 0; i < n; i++ {\n        collisions\
    \ += cars[i]\n        cars[i]++\n    }\n    for i := n - 1; i >= 0; i-- {\n  \
    \      collisions += cars[i]\n        cars[i]++\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpbjveaa6d_test.go:56: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpbjveaa6d_test.go:56:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpbjveaa6d_test.go:56: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpbjveaa6d_test.go:56:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpbjveaa6d_test.go:56: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We then iterate through the\
    \ cars that are moving right to left, and check if there's a car\n    // at the\
    \ same position.  If there is, we increment the number of collisions.\n    //\
    \ The time complexity is O(n), and the space complexity is O(n).\n    //\n   \
    \ // Note that the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    // in their trajectory as if they did not collide.  This means that\
    \ we don't need to\n    // remove the cars from the hash table.\n    //\n    //\
    \ Note that the cars are moving at the same speed.  This means that the cars that\
    \ are\n    // moving left to right will never overtake the cars that are moving\
    \ right to left.\n    // This means that we don't need to worry about the cars\
    \ that are moving left to right\n    // overtaking the cars that are moving right\
    \ to left.\n    //\n    // Note that the cars are moving at the same speed.  This\
    \ means that the cars that are\n    // moving right to left will never overtake\
    \ the cars that are moving left to right.\n    // This means that we don't need\
    \ to worry about the cars that are moving right to left\n    // overtaking the\
    \ cars that are moving left to right.\n    //\n    // Note that the cars are moving\
    \ at the same speed.  This means that the cars that are\n    // moving left to\
    \ right will never overtake the cars that are moving left to right.\n    // This\
    \ means that we don't need to worry about the cars that are moving left to right\n\
    \    // overtaking the cars that are moving left to right.\n    //\n    // Note\
    \ that the cars are moving at the same speed.  This means that the cars that are\n\
    \    // moving right to left will never overtake the cars that are moving right\
    \ to left.\n    // This means that we don't need to worry about the cars that\
    \ are moving right to left\n    // overtaking the cars that are moving right to\
    \ left.\n    //\n    // Note that the cars are moving at the same speed.  This\
    \ means that the cars that are\n    // moving left\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzbrwpgxe_test.go:49:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is the number of collisions.\n    collisions := 0\n\n\
    \    // This is the number of cars that have already passed the origin.\n    //\
    \ It is used to determine when a car has collided with a car that's\n    // moving\
    \ in the opposite direction.\n    cars_passed_origin := 0\n\n    // This is the\
    \ number of cars that have already passed the origin\n    // in the opposite direction.\n\
    \    cars_passed_origin_opposite := 0\n\n    // This is the number of cars that\
    \ have already collided.\n    cars_collided := 0\n\n    // This is the number\
    \ of cars that have already collided in the opposite direction.\n    cars_collided_opposite\
    \ := 0\n\n    // This is the number of cars that have already passed the origin.\n\
    \    cars_passed_origin_opposite = 0\n\n    // This is the number of cars that\
    \ have already collided.\n    cars_collided_opposite = 0\n\n    // This is the\
    \ number of cars that have already passed the origin.\n    cars_passed_origin\
    \ = 0\n\n    // This is the number of cars that have already collided.\n    cars_collided\
    \ = 0\n\n    // This is the number of cars that have already passed the origin.\n\
    \    cars_passed_origin = 0\n\n    // This is the number of cars that have already\
    \ collided.\n    cars_collided = 0\n\n    // This is the number of cars that have\
    \ already passed the origin.\n    cars_passed_origin = 0\n\n    // This is the\
    \ number of cars that have already collided.\n    cars_collided = 0\n\n    //\
    \ This is the number of cars that have already passed the origin.\n    cars_passed_origin\
    \ = 0\n\n    // This is the number of cars that have already collided.\n    cars_collided\
    \ = 0\n\n    // This is the number of cars that have already passed the origin.\n\
    \    cars_passed_origin = 0\n\n    // This is the number of cars that have already\
    \ collided.\n    cars_collided = 0\n\n    // This is the number of cars that have\
    \ already passed the origin.\n    cars_passed_origin = 0\n\n    // This is the\
    \ number of cars that have already collided.\n    cars_collided = 0\n\n    //\
    \ This is the number of cars that have already passed the origin\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6cf85_2u_test.go:78:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // For each car that's moving left to right, we need to know\
    \ the position of the\n    // car that's moving right to left that it will collide\
    \ with.  We can store this\n    // information in a map.\n    // The key is the\
    \ position of the car that's moving left to right.\n    // The value is the position\
    \ of the car that's moving right to left.\n    // We can initialize the map as\
    \ follows:\n    // For each car that's moving left to right, we can set the key\
    \ to be the position\n    // of the car that's moving left to right, and the value\
    \ to be the position of the\n    // car that's moving right to left.\n    // We\
    \ can then sort the map by key.\n    // We can then iterate through the map, and\
    \ for each car that's moving left to right,\n    // we can check if the position\
    \ of the car that's moving right to left is less than\n    // the position of\
    \ the car that's moving left to right.  If so, we can increment the\n    // number\
    \ of collisions.\n    // The time complexity is O(n log n) because we need to\
    \ sort the map.\n    // The space complexity is O(n) because we need to store\
    \ the map.\n    collisions := 0\n    cars := make(map[int]int)\n    for i := 0;\
    \ i < n; i++ {\n        cars[i] = n + i\n    }\n    for i := 0; i < n; i++ {\n\
    \        if cars[i] < i {\n            collisions++\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp7n7ty67d_test.go:63: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp7n7ty67d_test.go:63:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp7n7ty67d_test.go:63: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp7n7ty67d_test.go:63:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp7n7ty67d_test.go:63: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can use a hash table to keep track of the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We can use a similar hash table\
    \ to keep track of the cars that are moving right to left.\n    // The key is\
    \ the position of the car, and the value is the number of cars at that position.\n\
    \    // We can then iterate through the two hash tables and count the number of\
    \ collisions.\n    // The time complexity is O(n), and the space complexity is\
    \ O(n).\n    left_to_right := make(map[int]int)\n    right_to_left := make(map[int]int)\n\
    \    for i := 0; i < n; i++ {\n        left_to_right[i] = 1\n        right_to_left[-i]\
    \ = 1\n    }\n    collisions := 0\n    for k, v := range left_to_right {\n   \
    \     collisions += v * right_to_left[-k]\n    }\n    return collisions\n}\n\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpdwgekbss_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpdwgekbss_test.go:53:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpdwgekbss_test.go:53: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpdwgekbss_test.go:53:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpdwgekbss_test.go:53: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // The cars that\
    \ are moving left to right are numbered from 0 to n/2-1.\n    // The cars that\
    \ are moving right to left are numbered from n/2 to n-1.\n    // The cars that\
    \ are moving left to right are moving in the positive direction.\n    // The cars\
    \ that are moving right to left are moving in the negative direction.\n    //\
    \ The cars that are moving left to right are moving at speed 1.\n    // The cars\
    \ that are moving right to left are moving at speed -1.\n    // The cars that\
    \ are moving left to right start at position -n/2.\n    // The cars that are moving\
    \ right to left start at position n/2.\n    // The cars that are moving left to\
    \ right end at position n/2.\n    // The cars that are moving right to left end\
    \ at position -n/2.\n    // The cars that are moving left to right are indexed\
    \ by i.\n    // The cars that are moving right to left are indexed by j.\n   \
    \ // The cars that are moving left to right are at position x[i].\n    // The\
    \ cars that are moving right to left are at position y[j].\n    // The cars that\
    \ are moving left to right are moving at speed v[i].\n    // The cars that are\
    \ moving right to left are moving at speed w[j].\n    // The cars that are moving\
    \ left to right are indexed by i.\n    // The cars that are moving right to left\
    \ are indexed by j.\n    // The cars that are moving left to right are at position\
    \ x[i].\n    // The cars that are moving right to left are at position y[j].\n\
    \    // The cars that are moving left to right are moving at speed v[i].\n   \
    \ // The cars that are moving right to left are moving at speed w[j].\n    //\
    \ The cars that are moving left to right are indexed by i.\n    // The cars that\
    \ are moving right to left are indexed by j.\n    // The cars that are moving\
    \ left to right are at position x[i].\n    // The cars that are moving right to\
    \ left are at position y[j].\n    // The cars that are moving left to right are\
    \ moving at speed v[i].\n    // The cars that are moving right to\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwaioby_9_test.go:46:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073271
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 0
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The following is a solution that works in O(n^2) time.\n\
    \    // It is not the most efficient solution.\n    // The most efficient solution\
    \ is O(n log n) time.\n    // The most efficient solution is to sort the cars\
    \ by their positions,\n    // and then to do a linear scan of the sorted positions.\n\
    \    // The most efficient solution is left as an exercise to the reader.\n  \
    \  var collisions int = 0\n    for i := 0; i < n; i++ {\n        for j := 0; j\
    \ < n; j++ {\n            collisions++\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is a brute force solution.  We can do better.\n    //\
    \ We can do better by using a binary search tree.\n    // For each car, we can\
    \ insert it into the binary search tree.\n    // Then, we can search for the car\
    \ that's closest to it.\n    // If the closest car is moving in the opposite direction,\
    \ then\n    // we have a collision.\n    // The time complexity is O(n log n).\n\
    \    // The space complexity is O(n).\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpbjg_pqa4_test.go:45: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpbjg_pqa4_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpbjg_pqa4_test.go:45: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpbjg_pqa4_test.go:45:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpbjg_pqa4_test.go:45: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n*(n-1)/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The first car that's moving left to right is at position\
    \ 0.\n    // The first car that's moving right to left is at position n.\n   \
    \ // The second car that's moving left to right is at position 1.\n    // The\
    \ second car that's moving right to left is at position n-1.\n    // The third\
    \ car that's moving left to right is at position 2.\n    // The third car that's\
    \ moving right to left is at position n-2.\n    // ...\n    // The nth car that's\
    \ moving left to right is at position n-1.\n    // The nth car that's moving right\
    \ to left is at position 1.\n    //\n    // The first car that's moving left to\
    \ right will collide with the nth car that's moving right to left.\n    // The\
    \ second car that's moving left to right will collide with the (n-1)th car that's\
    \ moving right to left.\n    // The third car that's moving left to right will\
    \ collide with the (n-2)th car that's moving right to left.\n    // ...\n    //\
    \ The nth car that's moving left to right will collide with the first car that's\
    \ moving right to left.\n    //\n    // The number of collisions is n.\n    return\
    \ n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp6_hpf6qs_test.go:54: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp6_hpf6qs_test.go:54:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp6_hpf6qs_test.go:54: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp6_hpf6qs_test.go:54:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp6_hpf6qs_test.go:54: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // For each car moving left to right, we need to know the position\
    \ of the car\n    // at the beginning of the race.  For each car moving right\
    \ to left, we need to\n    // know the position of the car at the end of the race.\n\
    \    // We will use two arrays to store this information.\n    // The first array\
    \ will store the position of the cars moving left to right.\n    // The second\
    \ array will store the position of the cars moving right to left.\n    // The\
    \ arrays will be sorted in ascending order.\n    // The reason for sorting the\
    \ arrays is that we want to be able to quickly\n    // determine whether a car\
    \ moving left to right collides with a car moving\n    // right to left.  If the\
    \ arrays are sorted, then we can use binary search\n    // to determine whether\
    \ a car moving left to right collides with a car moving\n    // right to left.\n\
    \    // We will use two pointers to keep track of the cars moving left to right\n\
    \    // and the cars moving right to left.  The pointers will be initialized to\n\
    \    // the first element of the respective arrays.\n    // We will then iterate\
    \ through the cars moving left to right.  For each car\n    // moving left to\
    \ right, we will use binary search to determine whether the\n    // car collides\
    \ with a car moving right to left.  If the car collides with a\n    // car moving\
    \ right to left, then we will increment the number of collisions\n    // by 1.\
    \  We will then increment the pointer to the car moving right to left\n    //\
    \ by 1.\n    // We will continue iterating through the cars moving left to right\
    \ until\n    // we reach the end of the array.\n    // The time complexity of\
    \ this algorithm is O(n log n).  The reason for this\n    // is that we need to\
    \ sort the arrays, which takes O(n log n) time.  We then\n    // need to iterate\
    \ through the cars moving left to right, which takes O(n) time.\n    // For each\
    \ car moving left to right, we need to use binary search to determine\n    //\
    \ whether the car collides with a car moving right to left, which takes O(log\
    \ n)\n    // time.  The total time complexity is O(n log n).\n    // The space\
    \ complexity of this algorithm\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp19b4pf16_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n*(n-1)/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // We iterate through the cars that are moving right\
    \ to left.  For each car, we\n    // check if it's in the hash table.  If it is,\
    \ we remove it from the hash table\n    // and increment the collision count.\n\
    \    // The time complexity is O(n) and the space complexity is O(n).\n    left_to_right\
    \ := make(map[int]bool)\n    for i := 0; i < n; i++ {\n        left_to_right[i]\
    \ = true\n    }\n    collision_count := 0\n    for i := 0; i < n; i++ {\n    \
    \    if _, ok := left_to_right[i]; ok {\n            collision_count++\n     \
    \       delete(left_to_right, i)\n        }\n    }\n    return collision_count\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp9eysmzaa_test.go:53: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp9eysmzaa_test.go:53:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp9eysmzaa_test.go:53: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp9eysmzaa_test.go:53:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp9eysmzaa_test.go:53: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is a brute force solution.  We could do better.\n  \
    \  // For example, we could use a binary search tree to store the cars.\n    //\
    \ Then, we could use the tree to quickly find the cars that are close to each\
    \ other.\n    // However, this is a good enough solution for now.\n    //\n  \
    \  // We use a map to store the cars.  The key is the car's position.\n    //\
    \ The value is the number of cars at that position.\n    cars := make(map[int]int)\n\
    \    // We use a map to store the cars that are moving right to left.\n    //\
    \ The key is the car's position.\n    // The value is the number of cars at that\
    \ position.\n    cars_right_to_left := make(map[int]int)\n    // We use a map\
    \ to store the cars that are moving left to right.\n    // The key is the car's\
    \ position.\n    // The value is the number of cars at that position.\n    cars_left_to_right\
    \ := make(map[int]int)\n    // We use a map to store the cars that are moving\
    \ right to left.\n    // The key is the car's position.\n    // The value is the\
    \ number of cars at that position.\n    cars_right_to_left_collision := make(map[int]int)\n\
    \    // We use a map to store the cars that are moving left to right.\n    //\
    \ The key is the car's position.\n    // The value is the number of cars at that\
    \ position.\n    cars_left_to_right_collision := make(map[int]int)\n    // We\
    \ use a map to store the cars that are moving right to left.\n    // The key is\
    \ the car's position.\n    // The value is the number of cars at that position.\n\
    \    cars_right_to_left_collision_count := make(map[int]int)\n    // We use a\
    \ map to store the cars that are moving left to right.\n    // The key is the\
    \ car's position.\n    // The value is the number of cars at that position.\n\
    \    cars_left_to_right_collision_count := make(map[int]int)\n    // We use a\
    \ map to store the\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe3wss7c3_test.go:50:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // number of cars at that position.  When a car moves\
    \ left to right, we\n    // increment the value at that position.  When a car\
    \ moves right to left,\n    // we decrement the value at that position.  If the\
    \ value becomes zero,\n    // we remove that position from the hash table.\n \
    \   // The number of collisions is the sum of the values in the hash table.\n\
    \    ht := make(map[int]int)\n    for i := 0; i < n; i++ {\n        ht[i] = 0\n\
    \    }\n    for i := 0; i < n; i++ {\n        ht[i]++\n    }\n    for i := n -\
    \ 1; i >= 0; i-- {\n        ht[i]--\n        if ht[i] == 0 {\n            delete(ht,\
    \ i)\n        }\n    }\n    num_collisions := 0\n    for _, v := range ht {\n\
    \        num_collisions += v\n    }\n    return num_collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpxmj9xfb2_test.go:61: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpxmj9xfb2_test.go:61:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpxmj9xfb2_test.go:61: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpxmj9xfb2_test.go:61:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpxmj9xfb2_test.go:61: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree.\n    // We insert\
    \ the left-to-right cars into the tree.\n    // Then, we insert the right-to-left\
    \ cars into the tree.\n    // Each time we insert a right-to-left car, we check\
    \ if there is a left-to-right car\n    // in the tree that has the same position.\n\
    \    // If there is, we increment the collision count.\n    // We do this for\
    \ all right-to-left cars.\n    // The total number of collisions is the sum of\
    \ collisions for each right-to-left car.\n    //\n    // The time complexity is\
    \ O(n log n).\n    // The space complexity is O(n).\n    //\n    // The following\
    \ code is a binary search tree implementation.\n    // It is not a generic implementation.\n\
    \    // It is tailored to the problem at hand.\n    //\n    // The tree is a binary\
    \ search tree.\n    // The tree is not balanced.\n    // The tree is a linked\
    \ list.\n    // The tree is not a binary heap.\n    // The tree is not a red-black\
    \ tree.\n    // The tree is not an AVL tree.\n    // The tree is not a B-tree.\n\
    \    // The tree is not a B+ tree.\n    // The tree is not a B* tree.\n    //\
    \ The tree is not a splay tree.\n    // The tree is not a k-d tree.\n    // The\
    \ tree is not a quadtree.\n    // The tree is not a van Emde Boas tree.\n    //\
    \ The tree is not a B*-tree.\n    // The tree is not a B-link tree.\n    // The\
    \ tree is not a B^ tree.\n    // The tree is not a B^+ tree.\n    // The tree\
    \ is not a B^* tree.\n    // The tree is not a B^# tree.\n    // The tree is not\
    \ a B^#+ tree.\n    // The tree is not a B^#* tree.\n    // The tree is not a\
    \ B^#+* tree.\n    // The tree is not a B^#*+ tree.\n    // The tree is not a\
    \ B^#*+ tree.\n    // The tree\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmptrkavkfr_test.go:58:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073272
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This function is a stub.  Replace it with your code.\n  \
    \  return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3t0po23k_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3t0po23k_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3t0po23k_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3t0po23k_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3t0po23k_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n*(n-1)/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a map to store the cars that are moving\
    \ left to right.\n    // The key of the map is the position of the car.\n    //\
    \ The value of the map is the number of cars at that position.\n    // The map\
    \ is initialized to have no cars.\n    // Then, we iterate through the cars that\
    \ are moving right to left.\n    // For each car, we check if there is a car at\
    \ the same position.\n    // If there is, we increment the number of collisions.\n\
    \    // Otherwise, we add the car to the map.\n    // The time complexity is O(n).\n\
    \    // The space complexity is O(n).\n    cars_moving_left_to_right := make(map[int]int)\n\
    \    collisions := 0\n    for i := 0; i < n; i++ {\n        if _, ok := cars_moving_left_to_right[i];\
    \ ok {\n            collisions++\n        } else {\n            cars_moving_left_to_right[i]\
    \ = 1\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpuak7zl58_test.go:56: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpuak7zl58_test.go:56:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpuak7zl58_test.go:56: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpuak7zl58_test.go:56:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpuak7zl58_test.go:56: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This function is a stub.  You need to implement it.\n   \
    \ return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpowv7l4xk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpowv7l4xk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpowv7l4xk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpowv7l4xk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpowv7l4xk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a simple simulation to solve this problem.\n    //\
    \ We simulate the cars' movements in a 2D array.\n    // The array is a 2D array\
    \ of size n x n.\n    // The first row represents the cars moving left to right.\n\
    \    // The first column represents the cars moving right to left.\n    // Each\
    \ cell in the array represents the position of a car.\n    // The value of the\
    \ cell is the time when the car is at that position.\n    // We start the simulation\
    \ by putting the cars in their initial positions.\n    // We then move the cars\
    \ one step at a time.\n    // At each step, we check if any of the cars have collided.\n\
    \    // If so, we increment the collision count.\n    // We repeat this process\
    \ until all cars have reached the end of the road.\n    // The simulation is done\
    \ in O(n^2) time.\n    //\n    // We can also solve this problem using a binary\
    \ search tree.\n    // We insert the cars moving left to right into the tree.\n\
    \    // We then insert the cars moving right to left into the tree.\n    // Each\
    \ time we insert a car, we check if the car collides with any of the cars\n  \
    \  // already in the tree.  If so, we increment the collision count.\n    // The\
    \ tree is implemented as a balanced binary search tree.\n    // The tree is implemented\
    \ as a red-black tree.\n    // The tree is implemented as a self-balancing binary\
    \ search tree.\n    // The tree is implemented as an AVL tree.\n    // The tree\
    \ is implemented as a splay tree.\n    // The tree is implemented as a treap.\n\
    \    // The tree is implemented as a k-d tree.\n    // The tree is implemented\
    \ as a B-tree.\n    // The tree is implemented as a B+ tree.\n    // The tree\
    \ is implemented as a B* tree.\n    // The tree is implemented as a B# tree.\n\
    \    // The tree is implemented as a B-tree.\n    // The tree is implemented as\
    \ a B-tree.\n    // The tree is implemented as a B-tree.\n    // The tree is implemented\
    \ as a B-tree.\n    // The tree is implemented as a B-tree.\n    // The tree is\
    \ implemented as a B\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp94djdieg_test.go:53:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 1 to n.\n    // The cars moving\
    \ left to right are numbered from 1 to n/2.\n    // The cars moving right to left\
    \ are numbered from n/2 + 1 to n.\n    // The cars moving left to right are in\
    \ the array cars_left_to_right.\n    // The cars moving right to left are in the\
    \ array cars_right_to_left.\n    // The cars are sorted in ascending order.\n\
    \    cars_left_to_right := make([]int, n/2)\n    cars_right_to_left := make([]int,\
    \ n/2)\n    for i := 0; i < n/2; i++ {\n        cars_left_to_right[i] = i + 1\n\
    \        cars_right_to_left[i] = n - i\n    }\n    // The number of collisions\
    \ is the number of times that the last car in\n    // cars_left_to_right is greater\
    \ than the first car in cars_right_to_left.\n    // The last car in cars_left_to_right\
    \ is cars_left_to_right[n/2 - 1].\n    // The first car in cars_right_to_left\
    \ is cars_right_to_left[0].\n    // The number of collisions is the number of\
    \ times that cars_left_to_right[n/2 - 1]\n    // is greater than cars_right_to_left[0].\n\
    \    // The number of collisions is the number of times that cars_left_to_right[n/2\
    \ - 1]\n    // is greater than cars_right_to_left[0] and cars_left_to_right[n/2\
    \ - 2] is greater\n    // than cars_right_to_left[1] and cars_left_to_right[n/2\
    \ - 3] is greater than\n    // cars_right_to_left[2] and ... and cars_left_to_right[0]\
    \ is greater than\n    // cars_right_to_left[n/2 - 1].\n    // The number of collisions\
    \ is the number of times that cars_left_to_right[i] is greater\n    // than cars_right_to_left[n/2\
    \ - 1 -\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_itxinuk_test.go:42:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ left to right\n    // that are to the left of a car that's moving right to left.\n\
    \    // We can use a binary search tree to keep track of the cars that are moving\
    \ right to left.\n    // We can use a binary search tree to keep track of the\
    \ cars that are moving right to left.\n    // We can use a binary search tree\
    \ to keep track of the cars that are moving right to left.\n    // We can use\
    \ a binary search tree to keep track of the cars that are moving right to left.\n\
    \    // We can use a binary search tree to keep track of the cars that are moving\
    \ right to left.\n    // We can use a binary search tree to keep track of the\
    \ cars that are moving right to left.\n    // We can use a binary search tree\
    \ to keep track of the cars that are moving right to left.\n    // We can use\
    \ a binary search tree to keep track of the cars that are moving right to left.\n\
    \    // We can use a binary search tree to keep track of the cars that are moving\
    \ right to left.\n    // We can use a binary search tree to keep track of the\
    \ cars that are moving right to left.\n    // We can use a binary search tree\
    \ to keep track of the cars that are moving right to left.\n    // We can use\
    \ a binary search tree to keep track of the cars that are moving right to left.\n\
    \    // We can use a binary search tree to keep track of the cars that are moving\
    \ right to left.\n    // We can use a binary search tree to keep track of the\
    \ cars that are moving right to left.\n    // We can use a binary search tree\
    \ to keep track of the cars that are moving right to left.\n    // We can use\
    \ a binary search tree to keep track of the cars that are moving right to left.\n\
    \    // We can use a binary search tree to keep track of the cars that are moving\
    \ right to left.\n    // We can use a binary search tree to keep track of the\
    \ cars that are moving right to left.\n    // We can use a binary search tree\
    \ to keep track of the cars that are moving right to left.\n    // We can use\
    \ a binary search tree to keep track of the cars that are moving right to left.\n\
    \    // We can use a binary search tree to keep track of the cars\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpn_0aghqv_test.go:40:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\n\
    \    // in the same direction.\n    return n\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp9gvlcvcd_test.go:39: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp9gvlcvcd_test.go:39:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp9gvlcvcd_test.go:39: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp9gvlcvcd_test.go:39:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp9gvlcvcd_test.go:39: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ left to right\n    // that are to the left of the cars that are moving right\
    \ to left.\n    // The cars that are moving left to right are the first n cars.\n\
    \    // The cars that are moving right to left are the last n cars.\n    // The\
    \ cars are sorted by their position.\n    // So, the number of collisions is the\
    \ number of cars that are moving left to right\n    // that are to the left of\
    \ the last n cars.\n    // The last n cars are the last n cars in the sorted list.\n\
    \    // The first n cars are the first n cars in the sorted list.\n    // So,\
    \ the number of collisions is the number of cars that are moving left to right\n\
    \    // that are to the left of the last n cars in the sorted list.\n    // The\
    \ last n cars in the sorted list are the last n cars in the sorted list.\n   \
    \ // The first n cars in the sorted list are the first n cars in the sorted list.\n\
    \    // So, the number of collisions is the number of cars that are moving left\
    \ to right\n    // that are to the left of the last n cars in the sorted list.\n\
    \    // The last n cars in the sorted list are the last n cars in the sorted list.\n\
    \    // The first n cars in the sorted list are the first n cars in the sorted\
    \ list.\n    // So, the number of collisions is the number of cars that are moving\
    \ left to right\n    // that are to the left of the last n cars in the sorted\
    \ list.\n    // The last n cars in the sorted list are the last n cars in the\
    \ sorted list.\n    // The first n cars in the sorted list are the first n cars\
    \ in the sorted list.\n    // So, the number of collisions is the number of cars\
    \ that are moving left to right\n    // that are to the left of the last n cars\
    \ in the sorted list.\n    // The last n cars in the sorted list are the last\
    \ n cars in the sorted list.\n    // The first n cars in the sorted list are the\
    \ first n cars in the sorted list.\n    // So, the number of collisions is the\
    \ number of cars that are moving left to right\n    // that are to the left of\
    \ the last n cars in the sorted list.\n    // The last\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppjce0gt3_test.go:45:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    if n < 2 {\n        return 0\n    }\n    return n * (n - 1)\
    \ / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpdo0era7f_test.go:40: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpdo0era7f_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpdo0era7f_test.go:40: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpdo0era7f_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpdo0era7f_test.go:40: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the number of cars that are moving\
    \ in the same direction.\n    // There are n cars moving left to right and n cars\
    \ moving right to left.\n    // So the number of collisions is n.\n    return\
    \ n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpbp_qrh3h_test.go:40: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpbp_qrh3h_test.go:40:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpbp_qrh3h_test.go:40: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpbp_qrh3h_test.go:40:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpbp_qrh3h_test.go:40: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is a very simple problem.  We can solve it in O(n^2)\
    \ time.\n    // We can also solve it in O(n log n) time.  The O(n log n) solution\n\
    \    // is more interesting.\n    //\n    // The O(n log n) solution is as follows:\n\
    \    //\n    // We can model the problem as follows:\n    //\n    // We have n\
    \ cars moving left to right.  We have n cars moving right to left.\n    // We\
    \ can model the left to right cars as a set of n points on the x-axis.\n    //\
    \ We can model the right to left cars as a set of n points on the x-axis.\n  \
    \  //\n    // The left to right cars are at positions 0, 1, 2, ..., n-1.\n   \
    \ // The right to left cars are at positions n-1, n-2, ..., 0.\n    //\n    //\
    \ The left to right cars are moving to the right at a speed of 1.\n    // The\
    \ right to left cars are moving to the left at a speed of 1.\n    //\n    // The\
    \ left to right cars are moving at a speed of 1.\n    // The right to left cars\
    \ are moving at a speed of 1.\n    //\n    // The left to right cars are moving\
    \ at a speed of 1.\n    // The right to left cars are moving at a speed of 1.\n\
    \    //\n    // The left to right cars are moving at a speed of 1.\n    // The\
    \ right to left cars are moving at a speed of 1.\n    //\n    // The left to right\
    \ cars are moving at a speed of 1.\n    // The right to left cars are moving at\
    \ a speed of 1.\n    //\n    // The left to right cars are moving at a speed of\
    \ 1.\n    // The right to left cars are moving at a speed of 1.\n    //\n    //\
    \ The left to right cars are moving at a speed of 1.\n    // The right to left\
    \ cars are moving at a speed of 1.\n    //\n    // The left to right cars are\
    \ moving at a speed of 1.\n    // The right to left cars are moving at a speed\
    \ of 1.\n    //\n    // The left to right cars are moving at a speed of\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph8ndlf3f_test.go:57:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to keep track of the cars that are moving left\
    \ to right.\n    // The key is the position of the car.  The value is the number\
    \ of cars\n    // at that position.\n    cars_left_to_right := make(map[int]int)\n\
    \    // We use a map to keep track of the cars that are moving right to left.\n\
    \    // The key is the position of the car.  The value is the number of cars\n\
    \    // at that position.\n    cars_right_to_left := make(map[int]int)\n    //\
    \ We use a map to keep track of the collisions.  The key is the position\n   \
    \ // of the collision.  The value is the number of collisions at that position.\n\
    \    collisions := make(map[int]int)\n    // We use a map to keep track of the\
    \ cars that are moving left to right.\n    // The key is the position of the car.\
    \  The value is the number of cars\n    // at that position.\n    cars_left_to_right\
    \ := make(map[int]int)\n    // We use a map to keep track of the cars that are\
    \ moving right to left.\n    // The key is the position of the car.  The value\
    \ is the number of cars\n    // at that position.\n    cars_right_to_left := make(map[int]int)\n\
    \    // We use a map to keep track of the collisions.  The key is the position\n\
    \    // of the collision.  The value is the number of collisions at that position.\n\
    \    collisions := make(map[int]int)\n    // We use a map to keep track of the\
    \ cars that are moving left to right.\n    // The key is the position of the car.\
    \  The value is the number of cars\n    // at that position.\n    cars_left_to_right\
    \ := make(map[int]int)\n    // We use a map to keep track of the cars that are\
    \ moving right to left.\n    // The key is the position of the car.  The value\
    \ is the number of cars\n    // at that position.\n    cars_right_to_left := make(map[int]int)\n\
    \    // We use a map to keep track of the collisions.  The key is the position\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp66tktk5k_test.go:48:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n*(n-1)/2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpaiblumjy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpaiblumjy_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073158
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the car's position; the value\
    \ is the car's speed.\n    // We start with all cars being very far away from\
    \ each other.\n    // We then move the cars one step at a time.  At each step,\
    \ we check if\n    // there is a car moving right to left that is at the same\
    \ position as a car\n    // moving left to right.  If so, we have a collision.\n\
    \    // We keep track of the number of collisions.\n    // We then move all cars\
    \ one step.  We repeat the process until all cars\n    // have moved to the right.\n\
    \    //\n    // The time complexity is O(n).\n    // The space complexity is O(n).\n\
    \    //\n    // Note that the problem is not well-defined.  For example, if the\
    \ cars\n    // are moving at the same speed, then they will never collide.  If\
    \ the cars\n    // are moving at different speeds, then they will collide at some\
    \ point.\n    // The problem is not well-defined because it does not specify whether\n\
    \    // the cars are moving at the same speed or different speeds.\n    //\n \
    \   // We assume that the cars are moving at different speeds.\n    //\n    //\
    \ We also assume that the cars are moving at integer speeds.\n    //\n    // We\
    \ also assume that the cars are moving at speeds that are positive integers.\n\
    \    //\n    // We also assume that the cars are moving at speeds that are less\
    \ than n.\n    //\n    // We also assume that the cars are moving at speeds that\
    \ are less than n.\n    //\n    // We also assume that the cars are moving at\
    \ speeds that are less than n.\n    //\n    // We also assume that the cars are\
    \ moving at speeds that are less than n.\n    //\n    // We also assume that the\
    \ cars are moving at speeds that are less than n.\n    //\n    // We also assume\
    \ that the cars are moving at speeds that are less than n.\n    //\n    // We\
    \ also assume that the cars are moving at speeds that are less than n.\n    //\n\
    \    // We also assume that the cars are moving at speeds that are less than n.\n\
    \    //\n   \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpg2_vr9tw_test.go:59:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to store the positions\
    \ of the cars\n    // that are moving right to left.  We then iterate through\
    \ the cars that are\n    // moving left to right, and for each of them, we check\
    \ if there is a car\n    // that's moving right to left that's in the same position.\
    \  If so, we have\n    // a collision.\n    //\n    // The binary search tree\
    \ is implemented as a slice of slices.  The first slice\n    // is the root of\
    \ the tree.  The second slice is the left child of the root,\n    // and the third\
    \ slice is the right child of the root.  The fourth slice is\n    // the left\
    \ child of the second slice, and the fifth slice is the right child\n    // of\
    \ the second slice.  And so on.\n    //\n    // The first element of each slice\
    \ is the position of the car.  The second\n    // element of each slice is the\
    \ number of cars that are in the subtree rooted\n    // at that slice.\n    //\n\
    \    // The number of collisions is the number of cars that are moving left to\
    \ right\n    // that are in the same position as a car that's moving right to\
    \ left.\n    //\n    // The time complexity is O(n log n), where n is the number\
    \ of cars.\n    // The space complexity is O(n).\n    //\n    // The following\
    \ is the implementation.\n    tree := make([][]int, 1)\n    tree[0] = make([]int,\
    \ 2)\n    tree[0][0] = -1\n    tree[0][1] = 0\n    collisions := 0\n    for i\
    \ := 0; i < n; i++ {\n        collisions += insert(tree, i)\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprjln9dw3_test.go:46:23: undefined: insert

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the car's position, and the value is\
    \ the number of cars at that position.\n    // We then iterate through the cars\
    \ that are moving right to left, and check if there\n    // is a car at the same\
    \ position.  If so, we add the number of cars at that position\n    // to the\
    \ total number of collisions.\n    // The time complexity is O(n), and the space\
    \ complexity is O(n).\n    //\n    // The following is an example with n = 5.\n\
    \    //\n    // Cars moving left to right:\n    //\n    //  |  |  |  |  |  | \
    \ |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  | \
    \ |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  | \
    \ |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  | \
    \ |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1600t2e4_test.go:29:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to simulate the race.\n    // We have two arrays\
    \ of n cars;  one array is for cars moving left to right,\n    // the other array\
    \ is for cars moving right to left.\n    // Each car is represented by a number.\
    \  The number is the position of the car\n    // on the road.  So, for example,\
    \ if the left-to-right car array is [1, 2, 3, 4, 5],\n    // then the first car\
    \ is at position 1, the second car is at position 2, etc.\n    // We start the\
    \ simulation by moving the cars one step at a time.\n    // At each step, we check\
    \ if any two cars are at the same position.\n    // If so, then we have a collision.\n\
    \    // We keep track of the number of collisions.\n    // We repeat the simulation\
    \ until all cars have moved off the road.\n    // We return the number of collisions.\n\
    \    //\n    // The simulation is very simple.  We just need to keep track of\
    \ the cars' positions.\n    // We can do that with two arrays of n numbers.\n\
    \    // The first array is for the cars moving left to right.\n    // The second\
    \ array is for the cars moving right to left.\n    // We initialize the arrays\
    \ as follows:\n    // The left-to-right cars start at position 1, 2, 3, ..., n.\n\
    \    // The right-to-left cars start at position -1, -2, -3, ..., -n.\n    //\
    \ We then move the cars one step at a time.\n    // At each step, we check if\
    \ any two cars are at the same position.\n    // If so, then we have a collision.\n\
    \    // We keep track of the number of collisions.\n    // We repeat the simulation\
    \ until all cars have moved off the road.\n    // We return the number of collisions.\n\
    \    //\n    // The simulation is very simple.  We just need to keep track of\
    \ the cars' positions.\n    // We can do that with two arrays of n numbers.\n\
    \    // The first array is for the cars moving left to right.\n    // The second\
    \ array is for the cars moving right to left.\n    // We initialize the arrays\
    \ as follows:\n    // The left-to-right cars start at\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5ft6py7u_test.go:50:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We can use a simple array to represent the cars.\n    //\
    \ The array is of size 2n.\n    // The first n elements represent the cars moving\
    \ left to right.\n    // The last n elements represent the cars moving right to\
    \ left.\n    // The value of each element is the position of the car.\n    //\
    \ Initially, the first n elements are all 0, and the last n elements are all n.\n\
    \    // We then simulate the movement of the cars.\n    // For each car, we move\
    \ it by 1.\n    // If a car moving left to right hits a car moving right to left,\
    \ we increment the\n    // number of collisions by 1.\n    // We repeat this process\
    \ until all cars have moved n steps.\n    // The number of collisions is the output.\n\
    \    //\n    // The time complexity is O(n^2).\n    // The space complexity is\
    \ O(n).\n    cars := make([]int, 2 * n)\n    for i := 0; i < n; i++ {\n      \
    \  cars[i] = 0\n        cars[i + n] = n\n    }\n    collisions := 0\n    for i\
    \ := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            cars[j]++\n\
    \            cars[j + n]--\n            if cars[j] == cars[j + n] {\n        \
    \        collisions++\n            }\n        }\n    }\n    return collisions\n\
    }\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpitu7ykbl_test.go:67: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpitu7ykbl_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpitu7ykbl_test.go:67: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpitu7ykbl_test.go:67:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpitu7ykbl_test.go:67: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We will use a hash table to store the positions of the cars.\n\
    \    // The key is the position, and the value is the number of cars at that position.\n\
    \    // We will use a map[int]int.\n    // We will also use a slice to store the\
    \ positions of the cars.\n    // The slice will be sorted.\n    // We will use\
    \ a slice of int.\n    // We will also use a variable to store the number of collisions.\n\
    \    // We will use an int.\n    var collisions int = 0\n    var positions map[int]int\
    \ = make(map[int]int)\n    var positions_slice []int = make([]int, 0)\n    //\
    \ We will now populate the hash table and the slice.\n    // We will use a loop.\n\
    \    for i := 0; i < n; i++ {\n        // We will generate a random position.\n\
    \        // We will use an int.\n        var position int = rand.Int()\n     \
    \   // We will now update the hash table and the slice.\n        // We will use\
    \ a conditional.\n        if _, ok := positions[position]; ok {\n            //\
    \ The position is already in the hash table.\n            // We will update the\
    \ hash table.\n            positions[position]++\n        } else {\n         \
    \   // The position is not in the hash table.\n            // We will update the\
    \ hash table and the slice.\n            positions[position] = 1\n           \
    \ positions_slice = append(positions_slice, position)\n        }\n    }\n    //\
    \ We will now sort the slice.\n    // We will use the sort package.\n    sort.Ints(positions_slice)\n\
    \    // We will now iterate through the slice.\n    // We will use a loop.\n \
    \   for i := 0; i < len(positions_slice); i++ {\n        // We will now update\
    \ the number of collisions.\n        // We will use a conditional.\n        if\
    \ positions[positions_slice[i]] > 1 {\n            // There are more than one\
    \ car at this position.\n            // We will update the number of collisions.\n\
    \            collisions += positions[positions_slice[i]] - 1\n        }\n    }\n\
    \    // We will now return the number of collisions.\n    return\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphoh3y20e_test.go:63:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We will use a hash table to store the cars that are moving\
    \ left to right.\n    // The key is the position of the car, and the value is\
    \ the number of cars\n    // at that position.\n    left_to_right := make(map[int]int)\n\
    \    // We will use a hash table to store the cars that are moving right to left.\n\
    \    // The key is the position of the car, and the value is the number of cars\n\
    \    // at that position.\n    right_to_left := make(map[int]int)\n    // We will\
    \ use a hash table to store the cars that are moving left to right.\n    // The\
    \ key is the position of the car, and the value is the number of cars\n    //\
    \ at that position.\n    collisions := 0\n    // We will use a hash table to store\
    \ the cars that are moving left to right.\n    // The key is the position of the\
    \ car, and the value is the number of cars\n    // at that position.\n    for\
    \ i := 0; i < n; i++ {\n        left_to_right[i] = 1\n        right_to_left[-i]\
    \ = 1\n    }\n    // We will use a hash table to store the cars that are moving\
    \ left to right.\n    // The key is the position of the car, and the value is\
    \ the number of cars\n    // at that position.\n    for i := 0; i < n; i++ {\n\
    \        for j := 0; j < n; j++ {\n            if left_to_right[i] > 0 && right_to_left[-j]\
    \ > 0 {\n                collisions++\n                left_to_right[i]--\n  \
    \              right_to_left[-j]--\n            }\n        }\n    }\n    return\
    \ collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp0ml83l5b_test.go:68: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp0ml83l5b_test.go:68:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp0ml83l5b_test.go:68: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp0ml83l5b_test.go:68:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp0ml83l5b_test.go:68: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073275
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that the cars are numbered from 0 to n-1.\n    //\
    \ Assume that the cars moving left to right are numbered from 0 to n/2-1.\n  \
    \  // Assume that the cars moving right to left are numbered from n/2 to n-1.\n\
    \    // Assume that the cars are ordered by their position on the road.\n    //\
    \ Assume that the cars moving left to right are ordered from left to right.\n\
    \    // Assume that the cars moving right to left are ordered from right to left.\n\
    \    // Assume that the cars moving left to right are ordered by their position\
    \ on the road.\n    // Assume that the cars moving right to left are ordered by\
    \ their position on the road.\n    // Assume that the cars moving left to right\
    \ are ordered by their position on the road.\n    // Assume that the cars moving\
    \ right to left are ordered by their position on the road.\n    // Assume that\
    \ the cars moving left to right are ordered by their position on the road.\n \
    \   // Assume that the cars moving right to left are ordered by their position\
    \ on the road.\n    // Assume that the cars moving left to right are ordered by\
    \ their position on the road.\n    // Assume that the cars moving right to left\
    \ are ordered by their position on the road.\n    // Assume that the cars moving\
    \ left to right are ordered by their position on the road.\n    // Assume that\
    \ the cars moving right to left are ordered by their position on the road.\n \
    \   // Assume that the cars moving left to right are ordered by their position\
    \ on the road.\n    // Assume that the cars moving right to left are ordered by\
    \ their position on the road.\n    // Assume that the cars moving left to right\
    \ are ordered by their position on the road.\n    // Assume that the cars moving\
    \ right to left are ordered by their position on the road.\n    // Assume that\
    \ the cars moving left to right are ordered by their position on the road.\n \
    \   // Assume that the cars moving right to left are ordered by their position\
    \ on the road.\n    // Assume that the cars moving left to right are ordered by\
    \ their position on the road.\n    // Assume that the cars moving right to left\
    \ are ordered by their position on the road.\n    // Assume that the cars moving\
    \ left to right are ordered by their\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4km9hnof_test.go:42:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073274
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO: implement this function.\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpdpslb2_n_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpdpslb2_n_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpdpslb2_n_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpdpslb2_n_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpdpslb2_n_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 2
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to keep track of the cars that are moving left\
    \ to right.\n    // The key is the position of the car.  The value is the number\
    \ of cars\n    // that are at that position.\n    left_to_right := make(map[int]int)\n\
    \    // We use a map to keep track of the cars that are moving right to left.\n\
    \    // The key is the position of the car.  The value is the number of cars\n\
    \    // that are at that position.\n    right_to_left := make(map[int]int)\n \
    \   // We use a map to keep track of the cars that are moving left to right.\n\
    \    // The key is the position of the car.  The value is the number of cars\n\
    \    // that are at that position.\n    collisions := 0\n    // We iterate through\
    \ the cars that are moving left to right.\n    for i := 0; i < n; i++ {\n    \
    \    // We iterate through the cars that are moving right to left.\n        for\
    \ j := 0; j < n; j++ {\n            // We check if the two cars collide.\n   \
    \         if i == j {\n                // The two cars collide.\n            \
    \    collisions++\n            }\n        }\n    }\n    return collisions\n}\n\
    \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmxt4gv_d_test.go:20:5: left_to_right declared but not used

    /tmp/tmpmxt4gv_d_test.go:24:5: right_to_left declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // For each car moving right to left, we look up\
    \ the hash table to see if there's\n    // a car moving left to right that's in\
    \ the same position.  If there is, we increment\n    // the collision count.\n\
    \    //\n    // The hash table is implemented as a slice of size n, with each\
    \ element being a\n    // slice of size n.  The first index of the slice is the\
    \ position of the car, and\n    // the second index is the car number.  For example,\
    \ if car number 2 is at position\n    // 5, then the hash table would look like\
    \ this:\n    //\n    // [nil, nil, nil, nil, nil, [2]]\n    //\n    // The hash\
    \ table is initialized to all nil values.\n    hash_table := make([][]int, n)\n\
    \    for i := 0; i < n; i++ {\n        hash_table[i] = nil\n    }\n\n    // We\
    \ now populate the hash table with the cars moving left to right.\n    for i :=\
    \ 0; i < n; i++ {\n        hash_table[i] = append(hash_table[i], i)\n    }\n\n\
    \    // We now iterate through the cars moving right to left, and check if there's\
    \ a\n    // collision.\n    collision_count := 0\n    for i := 0; i < n; i++ {\n\
    \        if hash_table[i] != nil {\n            collision_count++\n        }\n\
    \    }\n\n    return collision_count\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp1i0eip3s_test.go:69: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp1i0eip3s_test.go:69:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp1i0eip3s_test.go:69: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp1i0eip3s_test.go:69:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp1i0eip3s_test.go:69: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: null
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to keep track of the cars that are moving left\
    \ to right.\n    // The key is the position of the car, and the value is the number\
    \ of cars\n    // at that position.\n    left_to_right := make(map[int]int)\n\
    \    // We use a map to keep track of the cars that are moving right to left.\n\
    \    // The key is the position of the car, and the value is the number of cars\n\
    \    // at that position.\n    right_to_left := make(map[int]int)\n    // We use\
    \ a map to keep track of the cars that are moving left to right.\n    // The key\
    \ is the position of the car, and the value is the number of cars\n    // at that\
    \ position.\n    collisions := 0\n    // We add n cars to the left_to_right map.\n\
    \    for i := 0; i < n; i++ {\n        left_to_right[i] = 1\n    }\n    // We\
    \ add n cars to the right_to_left map.\n    for i := 0; i < n; i++ {\n       \
    \ right_to_left[-i] = 1\n    }\n    // We loop until there are no more cars in\
    \ the left_to_right map.\n    for len(left_to_right) > 0 {\n        // We move\
    \ all the cars in the left_to_right map by one position.\n        for k, v :=\
    \ range left_to_right {\n            left_to_right[k + 1] = v\n            delete(left_to_right,\
    \ k)\n        }\n        // We move all the cars in the right_to_left map by one\
    \ position.\n        for k, v := range right_to_left {\n            right_to_left[k\
    \ - 1] = v\n            delete(right_to_left, k)\n        }\n        // We check\
    \ if there are any collisions.\n        for k, _ := range left_to_right {\n  \
    \          if _, ok := right_to_left[k]; ok {\n                collisions++\n\
    \            }\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660073289
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 1 to n.\n    // The cars moving\
    \ left to right are numbered 1 to n.\n    // The cars moving right to left are\
    \ numbered n+1 to 2n.\n    // The cars are initially spaced out so that the distance\
    \ between\n    // car i and car i+1 is 1.\n    // The cars are initially positioned\
    \ so that car i is at position i.\n    // The cars move at a speed of 1.\n   \
    \ // The cars are infinitely sturdy and strong.\n    // The cars are perfectly\
    \ straight.\n    // The road is perfectly straight.\n    // The road is infinitely\
    \ long.\n    // The road is a line.\n    // The road is a line segment.\n    //\
    \ The road is a line segment that is infinitely long.\n    // The road is a line\
    \ segment that is infinitely long and perfectly straight.\n    // The road is\
    \ a line segment that is infinitely long and perfectly straight and\n    // is\
    \ oriented horizontally.\n    // The road is a line segment that is infinitely\
    \ long and perfectly straight and\n    // is oriented horizontally and is located\
    \ in the x-axis.\n    // The road is a line segment that is infinitely long and\
    \ perfectly straight and\n    // is oriented horizontally and is located in the\
    \ x-axis and is located at y=0.\n    // The road is a line segment that is infinitely\
    \ long and perfectly straight and\n    // is oriented horizontally and is located\
    \ in the x-axis and is located at y=0 and\n    // is located at z=0.\n    // The\
    \ road is a line segment that is infinitely long and perfectly straight and\n\
    \    // is oriented horizontally and is located in the x-axis and is located at\
    \ y=0 and\n    // is located at z=0 and is located in the xy-plane.\n    // The\
    \ road is a line segment that is infinitely long and perfectly straight and\n\
    \    // is oriented horizontally and is located in the x-axis and is located at\
    \ y=0 and\n    // is located at z=0 and is located in the xy-plane and is located\
    \ in the xz-plane.\n    // The road is a line segment that is infinitely long\
    \ and perfectly straight and\n    // is oriented horizontally and is located in\
    \ the x-axis and is located at y=0 and\n    // is located at z=0 and is located\
    \ in the x\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7syxu4pu_test.go:50:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the position of\
    \ all cars.\n    // The key is the position of the car, and the value is the number\
    \ of cars\n    // at that position.\n    // We start with the cars moving left\
    \ to right.  For each car, we check if\n    // there is a car moving right to\
    \ left at the same position.  If so, we\n    // increment the collision count.\
    \  We then update the hash table.\n    // We then do the same for the cars moving\
    \ right to left.\n    //\n    // The time complexity is O(n), and the space complexity\
    \ is O(n).\n    //\n    // Note that the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    // in their trajectory as if they did\
    \ not collide.  This means that the cars moving\n    // left to right and the\
    \ cars moving right to left do not affect each other.\n    // As a result, we\
    \ can treat the cars moving left to right and the cars moving right to left\n\
    \    // separately.\n    //\n    // Note that the cars are infinitely sturdy and\
    \ strong; as a result, they continue moving\n    // in their trajectory as if\
    \ they did not collide.  This means that the cars moving\n    // left to right\
    \ and the cars moving right to left do not affect each other.\n    // As a result,\
    \ we can treat the cars moving left to right and the cars moving right to left\n\
    \    // separately.\n    //\n    // Note that the cars are infinitely sturdy and\
    \ strong; as a result, they continue moving\n    // in their trajectory as if\
    \ they did not collide.  This means that the cars moving\n    // left to right\
    \ and the cars moving right to left do not affect each other.\n    // As a result,\
    \ we can treat the cars moving left to right and the cars moving right to left\n\
    \    // separately.\n    //\n    // Note that the cars are infinitely sturdy and\
    \ strong; as a result, they continue moving\n    // in their trajectory as if\
    \ they did not collide.  This means that the cars moving\n    // left to right\
    \ and the cars moving right to left do not affect each other.\n    // As a result,\
    \ we can treat the cars moving left to right and the cars moving right to left\n\
    \    // separately.\n    //\n    // Note that the\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6w44o7fv_test.go:52:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=16)', got '%!s(int=4)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp71jxbqfl_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=8)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp71jxbqfl_test.go:37: expected '%!s(int=100)', got '%!s(int=10)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073160
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a map to keep track of the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We iterate through the cars\
    \ that are moving right to left, and for each car,\n    // we look up its position\
    \ in the map.  If the position is found, we add the number of cars\n    // at\
    \ that position to the number of collisions.\n    // The time complexity is O(n),\
    \ and the space complexity is O(n).\n    //\n    // Note that the cars are infinitely\
    \ strong, so they do not stop moving after they collide.\n    // This means that\
    \ a car that's moving left to right can collide with multiple cars that are\n\
    \    // moving right to left.  However, a car that's moving right to left can\
    \ only collide with\n    // one car that's moving left to right.  This is because\
    \ after a car that's moving right to left\n    // collides with a car that's moving\
    \ left to right, the car that's moving right to left\n    // will move to the\
    \ left of the car that's moving left to right.\n    //\n    // Also note that\
    \ the cars are infinitely strong, so they do not get damaged after they collide.\n\
    \    // This means that a car that's moving left to right can collide with multiple\
    \ cars that are\n    // moving right to left.  However, a car that's moving right\
    \ to left can only collide with\n    // one car that's moving left to right. \
    \ This is because after a car that's moving right to left\n    // collides with\
    \ a car that's moving left to right, the car that's moving right to left\n   \
    \ // will move to the left of the car that's moving left to right.\n    //\n \
    \   // Also note that the cars are infinitely strong, so they do not get damaged\
    \ after they collide.\n    // This means that a car that's moving left to right\
    \ can collide with multiple cars that are\n    // moving right to left.  However,\
    \ a car that's moving right to left can only collide with\n    // one car that's\
    \ moving left to right.  This is because after a car that's moving right to left\n\
    \    // collides with a car that's moving left to right, the car that's moving\
    \ right to left\n\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate :=\
    \ car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpswutsfkm_test.go:44:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the position of the car,\
    \ and the value is the\n    // number of cars that are at that position.\n   \
    \ // We then iterate through the cars that are moving right to left.  For each\n\
    \    // car, we check if there are any cars moving left to right at the same position.\n\
    \    // If so, we increment the collision count.\n    // We then remove the car\
    \ from the hash table.\n    //\n    // The time complexity is O(n), and the space\
    \ complexity is O(n).\n    //\n    // Note that the cars are infinitely sturdy\
    \ and strong.  As a result, they\n    // continue moving in their trajectory as\
    \ if they did not collide.\n    //\n    // Note that the cars are infinitely sturdy\
    \ and strong.  As a result, they\n    // continue moving in their trajectory as\
    \ if they did not collide.\n    //\n    // Note that the cars are infinitely sturdy\
    \ and strong.  As a result, they\n    // continue moving in their trajectory as\
    \ if they did not collide.\n    //\n    // Note that the cars are infinitely sturdy\
    \ and strong.  As a result, they\n    // continue moving in their trajectory as\
    \ if they did not collide.\n    //\n    // Note that the cars are infinitely sturdy\
    \ and strong.  As a result, they\n    // continue moving in their trajectory as\
    \ if they did not collide.\n    //\n    // Note that the cars are infinitely sturdy\
    \ and strong.  As a result, they\n    // continue moving in their trajectory as\
    \ if they did not collide.\n    //\n    // Note that the cars are infinitely sturdy\
    \ and strong.  As a result, they\n    // continue moving in their trajectory as\
    \ if they did not collide.\n    //\n    // Note that the cars are infinitely sturdy\
    \ and strong.  As a result, they\n    // continue moving in their trajectory as\
    \ if they did not collide.\n    //\n    // Note that the cars are infinitely sturdy\
    \ and strong.  As a result, they\n    // continue moving in their trajectory as\
    \ if they did not collide.\n    //\n    // Note that the cars are infinitely sturdy\
    \ and strong.  As a result, they\n    // continue moving in their trajectory as\
    \ if they did not collide\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp761v023__test.go:56:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO: implement this function\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp3f75_1xv_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp3f75_1xv_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume that n is a positive integer.\n    if n <= 0 {\n \
    \       return 0\n    }\n    // Assume that the cars are numbered from 1 to n.\n\
    \    // Assume that the cars that are moving left to right are numbered from 1\
    \ to n.\n    // Assume that the cars that are moving right to left are numbered\
    \ from n to 1.\n    // Assume that the cars that are moving left to right are\
    \ at the same starting position.\n    // Assume that the cars that are moving\
    \ right to left are at the same starting position.\n    // Assume that the cars\
    \ that are moving left to right are at a position that's very far\n    // from\
    \ the cars that are moving right to left.\n    // Assume that the cars that are\
    \ moving left to right are moving at the same speed.\n    // Assume that the cars\
    \ that are moving right to left are moving at the same speed.\n    // Assume that\
    \ the cars that are moving left to right are moving at a speed that's\n    //\
    \ greater than the speed of the cars that are moving right to left.\n    // Assume\
    \ that the cars that are moving left to right are moving at a speed that's\n \
    \   // greater than the speed of the cars that are moving right to left.\n   \
    \ // Assume that the cars that are moving left to right are moving at a speed\
    \ that's\n    // greater than the speed of the cars that are moving right to left.\n\
    \    // Assume that the cars that are moving left to right are moving at a speed\
    \ that's\n    // greater than the speed of the cars that are moving right to left.\n\
    \    // Assume that the cars that are moving left to right are moving at a speed\
    \ that's\n    // greater than the speed of the cars that are moving right to left.\n\
    \    // Assume that the cars that are moving left to right are moving at a speed\
    \ that's\n    // greater than the speed of the cars that are moving right to left.\n\
    \    // Assume that the cars that are moving left to right are moving at a speed\
    \ that's\n    // greater than the speed of the cars that are moving right to left.\n\
    \    // Assume that the cars that are moving left to right are moving at a speed\
    \ that's\n    // greater than the speed of the cars that are moving right to left.\n\
    \    // Assume that\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdr5xs7v1_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The cars are numbered from 0 to n-1.\n    // We will use\
    \ a slice to keep track of the cars' positions.\n    // The slice will be indexed\
    \ by the car number.\n    // The value at each index will be the position of the\
    \ car.\n    // Initially, the cars are very far from each other.\n    // We will\
    \ use a very large number to represent this.\n    // The cars will move towards\
    \ each other.\n    // As they move, we will update their positions in the slice.\n\
    \    // When two cars collide, we will increment the collision counter.\n    //\
    \ We will stop when all the cars have collided.\n    // We will use a boolean\
    \ flag to indicate that all the cars have collided.\n    // We will use a variable\
    \ to keep track of the number of collisions.\n    // We will use a variable to\
    \ keep track of the number of cars that have collided.\n    // We will use a variable\
    \ to keep track of the number of cars that have not collided.\n    // We will\
    \ use a variable to keep track of the number of cars that have moved.\n    //\
    \ We will use a variable to keep track of the number of cars that have not moved.\n\
    \    // We will use a variable to keep track of the number of cars that have moved\
    \ left to right.\n    // We will use a variable to keep track of the number of\
    \ cars that have moved right to left.\n    // We will use a variable to keep track\
    \ of the number of cars that have not moved left to right.\n    // We will use\
    \ a variable to keep track of the number of cars that have not moved right to\
    \ left.\n    // We will use a variable to keep track of the number of cars that\
    \ have collided left to right.\n    // We will use a variable to keep track of\
    \ the number of cars that have collided right to left.\n    // We will use a variable\
    \ to keep track of the number of cars that have not collided left to right.\n\
    \    // We will use a variable to keep track of the number of cars that have not\
    \ collided right to left.\n    // We will use a variable to keep track of the\
    \ number of cars that have collided left to right and right to left.\n    // We\
    \ will use a variable to keep track of the number of cars that have not collided\
    \ left to right and right to left.\n    // We will use a variable to\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnuxp39no_test.go:44:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a map to keep track of the cars that are\
    \ moving left to right.\n    // The key of the map is the position of the car.\
    \  The value of the map is the number\n    // of cars that are at that position.\
    \  We start with an empty map.\n    // We then iterate through the cars that are\
    \ moving right to left.  For each car,\n    // we look at the map to see if there\
    \ are any cars that are moving left to right\n    // and are at the same position.\
    \  If there are, we increment the number of collisions\n    // by the number of\
    \ cars that are moving left to right and are at the same position.\n    // We\
    \ then remove the car that is moving right to left from the map.\n    // We then\
    \ iterate through the cars that are moving left to right.  For each car,\n   \
    \ // we look at the map to see if there are any cars that are moving right to\
    \ left\n    // and are at the same position.  If there are, we increment the number\
    \ of collisions\n    // by the number of cars that are moving right to left and\
    \ are at the same position.\n    // We then add the car that is moving left to\
    \ right to the map.\n    // We then return the number of collisions.\n    //\n\
    \    // The time complexity is O(n) and the space complexity is O(n).\n    collisions\
    \ := 0\n    cars_left_to_right := make(map[int]int)\n    for i := 0; i < n; i++\
    \ {\n        if _, ok := cars_left_to_right[i]; ok {\n            collisions +=\
    \ cars_left_to_right[i]\n        }\n        delete(cars_left_to_right, i)\n  \
    \  }\n    for i := 0; i < n; i++ {\n        if _, ok := cars_left_to_right[i];\
    \ ok {\n            collisions += cars_left_to_right[i]\n        }\n        cars_left_to_right[i]++\n\
    \    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpywe27gyc_test.go:67: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpywe27gyc_test.go:67:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpywe27gyc_test.go:67: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpywe27gyc_test.go:67:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpywe27gyc_test.go:67: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to keep track of the cars\
    \ that are moving\n    // left to right.  The key is the car's position, and the\
    \ value is the number\n    // of cars that are at that position.  When a car moves\
    \ right to left, we\n    // check if there are any cars at that position.  If\
    \ so, we add the number of\n    // cars at that position to the number of collisions.\n\
    \    //\n    // The hash table is implemented as a slice of integers.  The length\
    \ of the\n    // slice is the maximum position of any car.  The value at each\
    \ index is the\n    // number of cars at that position.\n    //\n    // The maximum\
    \ position of any car is 2 * n.  This is because the cars start\n    // out being\
    \ very far from each other.  The cars moving left to right start\n    // at position\
    \ 0, and the cars moving right to left start at position 2 * n.\n    //\n    //\
    \ The cars move at the same speed.  The cars moving left to right move 1\n   \
    \ // position per second, and the cars moving right to left move 1 position per\n\
    \    // second.  So, the cars moving left to right will reach position 2 * n in\
    \ 2 * n\n    // seconds.  The cars moving right to left will reach position 0\
    \ in 2 * n\n    // seconds.\n    //\n    // The cars moving left to right are\
    \ numbered 0, 1, 2, ..., n - 1.  The cars\n    // moving right to left are numbered\
    \ n, n + 1, n + 2, ..., 2 * n - 1.\n    //\n    // The cars moving left to right\
    \ start at position 0.  The cars moving right\n    // to left start at position\
    \ 2 * n.\n    //\n    // The cars moving left to right move 1 position per second.\
    \  The cars moving\n    // right to left move 1 position per second.\n    //\n\
    \    // The cars moving left to right will reach position 2 * n in 2 * n seconds.\n\
    \    // The cars moving right to left will reach position 0 in 2 * n seconds.\n\
    \    //\n    // The cars moving left to right are numbered 0, 1, 2, ..., n - 1.\
    \  The cars\n    // moving right to left are numbered n, n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp89u_xzbb_test.go:51:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // This is a simple simulation of the problem.\n    // The idea\
    \ is to use a map to keep track of the cars that are moving left to right.\n \
    \   // The key of the map is the position of the car.  The value of the map is\
    \ the number\n    // of cars at that position.\n    // We start with a map that\
    \ has n cars at position 0.\n    // We then simulate the movement of the cars.\
    \  We move the cars that are moving left to right\n    // one step at a time.\
    \  We also move the cars that are moving right to left one step at a time.\n \
    \   // We check if there is a collision at each step.  If there is a collision,\
    \ we increment the\n    // result by the number of cars that are moving left to\
    \ right at that position.\n    // We continue this process until all cars have\
    \ moved off the map.\n    // The time complexity of this algorithm is O(n^2).\
    \  The space complexity is O(n).\n    // The time complexity can be improved to\
    \ O(n) by using a priority queue.\n    // The space complexity can be improved\
    \ to O(1) by using a circular array.\n    // The time complexity can be improved\
    \ to O(n log n) by using a balanced binary search tree.\n    // The space complexity\
    \ can be improved to O(log n) by using a balanced binary search tree.\n    //\
    \ The time complexity can be improved to O(n) by using a balanced binary search\
    \ tree and\n    // a priority queue.\n    // The space complexity can be improved\
    \ to O(1) by using a balanced binary search tree and\n    // a circular array.\n\
    \    // The time complexity can be improved to O(n) by using a balanced binary\
    \ search tree and\n    // a circular array.\n    // The space complexity can be\
    \ improved to O(1) by using a balanced binary search tree and\n    // a circular\
    \ array.\n    // The time complexity can be improved to O(n) by using a balanced\
    \ binary search tree and\n    // a circular array.\n    // The space complexity\
    \ can be improved to O(1) by using a balanced binary search tree and\n    // a\
    \ circular array.\n    // The time complexity can be improved to O(n) by using\
    \ a balanced binary search tree and\n    // a circular array.\n    // The\nfunc\
    \ TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpanb2513t_test.go:47:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // We use a map to keep track of the cars that are moving left\
    \ to right.\n    // The key is the car's position.  The value is the number of\
    \ cars at that position.\n    // We use a map to keep track of the cars that are\
    \ moving right to left.\n    // The key is the car's position.  The value is the\
    \ number of cars at that position.\n    // We use a map to keep track of the cars\
    \ that are moving left to right.\n    // The key is the car's position.  The value\
    \ is the number of cars at that position.\n    // We use a map to keep track of\
    \ the cars that are moving right to left.\n    // The key is the car's position.\
    \  The value is the number of cars at that position.\n    var cars_left_to_right\
    \ = make(map[int]int)\n    var cars_right_to_left = make(map[int]int)\n    var\
    \ collisions = 0\n    var i int\n    for i = 0; i < n; i++ {\n        cars_left_to_right[i]\
    \ = 1\n        cars_right_to_left[-i] = 1\n    }\n    for i = 0; i < n; i++ {\n\
    \        // Move the cars left to right.\n        for k, v := range cars_left_to_right\
    \ {\n            cars_left_to_right[k + 1] = v\n            delete(cars_left_to_right,\
    \ k)\n        }\n        // Move the cars right to left.\n        for k, v :=\
    \ range cars_right_to_left {\n            cars_right_to_left[k - 1] = v\n    \
    \        delete(cars_right_to_left, k)\n        }\n        // Check for collisions.\n\
    \        for k, v := range cars_left_to_right {\n            collisions += v *\
    \ cars_right_to_left[k]\n        }\n    }\n    return collisions\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpymjvpxzh_test.go:69: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpymjvpxzh_test.go:69:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpymjvpxzh_test.go:69: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpymjvpxzh_test.go:69:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpymjvpxzh_test.go:69: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a binary search tree to store the cars\
    \ that are moving\n    // left to right.  The key of the tree is the position\
    \ of the car.  The value\n    // of the tree is the number of cars that are at\
    \ that position.\n    // We start with an empty tree.  We then insert the first\
    \ car that's moving\n    // left to right.  We then insert the first car that's\
    \ moving right to left.\n    // We then insert the second car that's moving left\
    \ to right.  And so on.\n    // When we insert a car that's moving left to right,\
    \ we do a search in the tree\n    // to see if there is a car that's moving right\
    \ to left at the same position.\n    // If there is, we increment the number of\
    \ collisions.  We then insert the car\n    // that's moving left to right into\
    \ the tree.\n    // When we insert a car that's moving right to left, we do a\
    \ search in the tree\n    // to see if there is a car that's moving left to right\
    \ at the same position.\n    // If there is, we increment the number of collisions.\
    \  We then delete the car\n    // that's moving left to right from the tree.\n\
    \    // We continue this process until we have inserted all cars.\n    // The\
    \ time complexity is O(n log n) because we do n insertions and n deletions\n \
    \   // into the tree, and each insertion and deletion takes O(log n) time.\n \
    \   // The space complexity is O(n) because we store n cars in the tree.\n   \
    \ //\n    // The following is the implementation of the binary search tree.\n\
    \    type node \nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpw0ipkbnq_test.go:37:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a hash table to store the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We then iterate through the\
    \ cars that are moving right to left.  For each car, we\n    // check if there\
    \ are any cars that are moving left to right at the same position.\n    // If\
    \ so, we increment the number of collisions.\n    //\n    // The time complexity\
    \ is O(n), and the space complexity is O(n).\n    //\n    // Note that the cars\
    \ are infinitely sturdy and strong, so they do not stop moving\n    // after they\
    \ collide.  As a result, the number of collisions is the number of\n    // cars\
    \ that are moving left to right at the same position as the cars that are\n  \
    \  // moving right to left.\n    //\n    // Note that the cars are infinitely\
    \ sturdy and strong, so they do not stop moving\n    // after they collide.  As\
    \ a result, the number of collisions is the number of\n    // cars that are moving\
    \ left to right at the same position as the cars that are\n    // moving right\
    \ to left.\n    //\n    // Note that the cars are infinitely sturdy and strong,\
    \ so they do not stop moving\n    // after they collide.  As a result, the number\
    \ of collisions is the number of\n    // cars that are moving left to right at\
    \ the same position as the cars that are\n    // moving right to left.\n    //\n\
    \    // Note that the cars are infinitely sturdy and strong, so they do not stop\
    \ moving\n    // after they collide.  As a result, the number of collisions is\
    \ the number of\n    // cars that are moving left to right at the same position\
    \ as the cars that are\n    // moving right to left.\n    //\n    // Note that\
    \ the cars are infinitely sturdy and strong, so they do not stop moving\n    //\
    \ after they collide.  As a result, the number of collisions is the number of\n\
    \    // cars that are moving left to right at the same position as the cars that\
    \ are\n    // moving right to left.\n    //\n    // Note that the cars are infinitely\
    \ sturdy and strong, so they do not stop moving\n    // after they collide.  As\
    \ a result, the number of collisions is the number of\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4aoeecn1_test.go:52:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Write your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkkrxo889_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkkrxo889_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return n * (n - 1) / 2\n}\n\nfunc TestCar_Race_Collision(t *testing.T)\
    \ {\n  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=3)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=16)', got '%!s(int=6)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmp2idil8gi_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=28)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmp2idil8gi_test.go:37: expected '%!s(int=100)', got '%!s(int=45)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Assume the cars are numbered from 0 to n-1.\n    // Assume\
    \ the cars moving left to right are numbered 0 to n-1.\n    // Assume the cars\
    \ moving right to left are numbered n to 2n-1.\n    // Assume the cars moving\
    \ left to right start at position 0.\n    // Assume the cars moving right to left\
    \ start at position 2n.\n    // Assume the cars moving left to right move at speed\
    \ 1.\n    // Assume the cars moving right to left move at speed 1.\n    // Assume\
    \ the cars moving left to right move left to right.\n    // Assume the cars moving\
    \ right to left move right to left.\n    // Assume the cars moving left to right\
    \ are in the same order as their numbers.\n    // Assume the cars moving right\
    \ to left are in the same order as their numbers.\n    // Assume the cars moving\
    \ left to right are in the same order as their numbers.\n    // Assume the cars\
    \ moving right to left are in the same order as their numbers.\n    // Assume\
    \ the cars moving left to right are in the same order as their numbers.\n    //\
    \ Assume the cars moving right to left are in the same order as their numbers.\n\
    \    // Assume the cars moving left to right are in the same order as their numbers.\n\
    \    // Assume the cars moving right to left are in the same order as their numbers.\n\
    \    // Assume the cars moving left to right are in the same order as their numbers.\n\
    \    // Assume the cars moving right to left are in the same order as their numbers.\n\
    \    // Assume the cars moving left to right are in the same order as their numbers.\n\
    \    // Assume the cars moving right to left are in the same order as their numbers.\n\
    \    // Assume the cars moving left to right are in the same order as their numbers.\n\
    \    // Assume the cars moving right to left are in the same order as their numbers.\n\
    \    // Assume the cars moving left to right are in the same order as their numbers.\n\
    \    // Assume the cars moving right to left are in the same order as their numbers.\n\
    \    // Assume the cars moving left to right are in the same order as their numbers.\n\
    \    // Assume the cars moving right to left are in the same order as their numbers.\n\
    func TestCar_Race_Collision(t *testing.T) {\n  candidate := car_race_collision\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(2), expected: 4 },\n     { actual:\
    \ candidate(3), expected: 9 },\n     { actual: candidate(4), expected: 16 },\n\
    \     { actual: candidate(8), expected: 64 },\n     { actual: candidate(10), expected:\
    \ 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaokzfcxy_test.go:44:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Let's say that the left-to-right cars are numbered 0..n-1\
    \ and the right-to-left\n    // cars are numbered n..2n-1.  We can represent the\
    \ cars as a list of pairs\n    // (position, velocity).  The left-to-right cars\
    \ have velocity 1 and the right-to-left\n    // cars have velocity -1.  The positions\
    \ are initialized to be far apart.\n    // We can then simulate the cars' movement\
    \ by repeatedly sorting the list of cars\n    // by position and then moving each\
    \ car by its velocity.\n    // The number of collisions is the number of times\
    \ that a left-to-right car\n    // and a right-to-left car have the same position.\n\
    \    //\n    // The time complexity is O(n^2) because we have to sort the list\
    \ of cars\n    // every time we move them.  We can improve the time complexity\
    \ to O(n log n)\n    // by using a heap to store the cars.  The heap is sorted\
    \ by position.\n    // We can then move the cars by popping the cars from the\
    \ heap and pushing\n    // them back into the heap.  The time complexity is O(n\
    \ log n) because we\n    // have to pop and push n cars, and each pop and push\
    \ takes O(log n) time.\n    //\n    // The space complexity is O(n) because we\
    \ have to store the list of cars.\n    //\n    // We can improve the space complexity\
    \ to O(1) by using the fact that the\n    // left-to-right cars are numbered 0..n-1\
    \ and the right-to-left cars are\n    // numbered n..2n-1.  We can then represent\
    \ the cars as a list of n numbers\n    // where the first n numbers are the positions\
    \ of the left-to-right cars\n    // and the last n numbers are the positions of\
    \ the right-to-left cars.\n    // We can then simulate the cars' movement by repeatedly\
    \ sorting the list\n    // of cars by position and then moving each car by its\
    \ velocity.\n    // The number of collisions is the number of times that a left-to-right\
    \ car\n    // and a right-to-left car have the same position.\n    //\n    //\
    \ The time complexity is O(\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpslzw6ln6_test.go:46:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The number of collisions is the same as the number of cars\
    \ that are\n    // moving left to right and have a car that's moving right to\
    \ left\n    // to their right.\n    //\n    // The number of cars that are moving\
    \ left to right and have a car that's\n    // moving right to left to their right\
    \ is the same as the number of cars\n    // that are moving right to left and\
    \ have a car that's moving left to right\n    // to their left.\n    //\n    //\
    \ The number of cars that are moving right to left and have a car that's\n   \
    \ // moving left to right to their left is the same as the number of cars\n  \
    \  // that are moving left to right and have a car that's moving right to left\n\
    \    // to their right.\n    //\n    // The number of cars that are moving left\
    \ to right and have a car that's\n    // moving right to left to their right is\
    \ the same as the number of cars\n    // that are moving right to left and have\
    \ a car that's moving left to right\n    // to their left.\n    //\n    // The\
    \ number of cars that are moving right to left and have a car that's\n    // moving\
    \ left to right to their left is the same as the number of cars\n    // that are\
    \ moving left to right and have a car that's moving right to left\n    // to their\
    \ right.\n    //\n    // The number of cars that are moving left to right and\
    \ have a car that's\n    // moving right to left to their right is the same as\
    \ the number of cars\n    // that are moving right to left and have a car that's\
    \ moving left to right\n    // to their left.\n    //\n    // The number of cars\
    \ that are moving right to left and have a car that's\n    // moving left to right\
    \ to their left is the same as the number of cars\n    // that are moving left\
    \ to right and have a car that's moving right to left\n    // to their right.\n\
    \    //\n    // The number of cars that are moving left to right and have a car\
    \ that's\n    // moving right to left to their right is the same as the number\
    \ of cars\n    // that are moving right to left and have a car that's moving left\
    \ to right\n    // to their left.\n    //\n    // The number of\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3in0pifi_test.go:57:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // Given n cars, there are n-1 possible collisions.\n    //\
    \ The first car can collide with the last car.\n    // The second car can collide\
    \ with the second-to-last car.\n    // The third car can collide with the third-to-last\
    \ car.\n    // ...\n    // The nth car can collide with the first car.\n    //\n\
    \    // So the number of collisions is n-1.\n    return n-1\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpju217w27_test.go:45: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpju217w27_test.go:45:\
    \ expected '%!s(int=9)', got '%!s(int=2)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpju217w27_test.go:45: expected '%!s(int=16)', got '%!s(int=3)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpju217w27_test.go:45:\
    \ expected '%!s(int=64)', got '%!s(int=7)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpju217w27_test.go:45: expected '%!s(int=100)', got '%!s(int=9)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073277
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    return 0\n}\n\nfunc TestCar_Race_Collision(t *testing.T) {\n\
    \  candidate := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2),\
    \ expected: 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual:\
    \ candidate(4), expected: 16 },\n     { actual: candidate(8), expected: 64 },\n\
    \     { actual: candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpkn0oaqqy_test.go:37:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpkn0oaqqy_test.go:37: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // TODO - Add your code here\n    return 0\n}\n\nfunc TestCar_Race_Collision(t\
    \ *testing.T) {\n  candidate := car_race_collision\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(2), expected: 4 },\n     { actual: candidate(3), expected:\
    \ 9 },\n     { actual: candidate(4), expected: 16 },\n     { actual: candidate(8),\
    \ expected: 64 },\n     { actual: candidate(10), expected: 100 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestCar_Race_Collision (0.00s)\n    --- FAIL: TestCar_Race_Collision/test_num__0\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__1 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=9)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__2\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=16)', got '%!s(int=0)'\n\
    \    --- FAIL: TestCar_Race_Collision/test_num__3 (0.00s)\n        tmpt61njsjk_test.go:38:\
    \ expected '%!s(int=64)', got '%!s(int=0)'\n    --- FAIL: TestCar_Race_Collision/test_num__4\
    \ (0.00s)\n        tmpt61njsjk_test.go:38: expected '%!s(int=100)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073156
- exit_code: 1
  program: "package car_race_collision_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Imagine a road that's a perfectly straight infinitely long line.\n//\
    \ n cars are driving left to right;  simultaneously, a different set of n cars\n\
    // are driving right to left.   The two sets of cars start out being very far\
    \ from\n// each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n// when a car that's moving left to right hits a car that's moving\
    \ right to left.\n// However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n// in their trajectory as if they did not collide.\n\
    // This function outputs the number of such collisions.\nfunc car_race_collision(n\
    \ int) int {\n    // The idea is to use a map to keep track of the cars that are\
    \ moving left to right.\n    // The key is the position of the car, and the value\
    \ is the number of cars at that position.\n    // We start with an empty map.\
    \  As we iterate through the cars moving left to right,\n    // we add them to\
    \ the map.  As we iterate through the cars moving right to left,\n    // we remove\
    \ them from the map.  The number of collisions is the number of cars\n    // that\
    \ are removed from the map.\n    //\n    // Note that the cars moving left to\
    \ right are at positions 1, 2, ..., n.\n    // The cars moving right to left are\
    \ at positions n, n-1, ..., 1.\n    //\n    // The map is implemented as a slice\
    \ of ints.  The key is the index into the slice.\n    // The value is the number\
    \ of cars at that position.\n    //\n    // The number of collisions is the sum\
    \ of the values in the map.\n    //\n    // The runtime is O(n) because we iterate\
    \ through the cars moving left to right\n    // and the cars moving right to left.\n\
    \    //\n    // The space complexity is O(n) because we use a map of size n.\n\
    \    //\n    // Note that the cars moving left to right are at positions 1, 2,\
    \ ..., n.\n    // The cars moving right to left are at positions n, n-1, ...,\
    \ 1.\n    //\n    // The map is implemented as a slice of ints.  The key is the\
    \ index into the slice.\n    // The value is the number of cars at that position.\n\
    \    //\n    // The number of collisions is the sum of the values in the map.\n\
    \    //\n    // The runtime is O(n) because we iterate through the cars moving\
    \ left to right\n    // and the cars moving right to left.\n    //\n    // The\
    \ space complexity is O(n) because we use a map of size n.\n    //\n    // Note\
    \ that the cars moving left to right are at positions 1, 2, ..., n.\n    // The\
    \ cars moving right to left are at positions n, n-1, ..., 1.\n    //\n    // The\
    \ map is implemented\nfunc TestCar_Race_Collision(t *testing.T) {\n  candidate\
    \ := car_race_collision\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(2), expected:\
    \ 4 },\n     { actual: candidate(3), expected: 9 },\n     { actual: candidate(4),\
    \ expected: 16 },\n     { actual: candidate(8), expected: 64 },\n     { actual:\
    \ candidate(10), expected: 100 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphmpyxc4n_test.go:54:6: expected ''('', found TestCar_Race_Collision

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073276
