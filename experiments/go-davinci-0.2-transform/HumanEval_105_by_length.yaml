name: HumanEval_105_by_length
language: go_test.go
prompt: "package by_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n\
  // reverse the resulting array, and then replace each digit by its corresponding\
  \ name from\n// \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\"\
  , \"Eight\", \"Nine\".\n// For example:\n// >>> by_length([]int{2, 1, 1, 4, 5, 8,\
  \ 2, 3})\n// []string{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
  , \"One\", \"One\"}\n// If the array is empty, return an empty array:\n// >>> by_length([]int{})\n\
  // []string{}\n// If the array has any strange number ignore it:\n// >>> by_length([]int{1,\
  \ -1, 55})\n// []string{\"One\"}\nfunc by_length(arr []int) []string {\n"
tests: "func TestBy_Length(t *testing.T) {\n  candidate := by_length\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{2, 1, 1, 4, 5, 8, 2, 3}), expected: []string{\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"} },\n\
  \     { actual: candidate([]int{}), expected: []string{} },\n     { actual: candidate([]int{1,\
  \ -1, 55}), expected: []string{\"One\"} },\n     { actual: candidate([]int{1, -1,\
  \ 3, 2}), expected: []string{\"Three\", \"Two\", \"One\"} },\n     { actual: candidate([]int{9,\
  \ 4, 8}), expected: []string{\"Nine\", \"Eight\", \"Four\"} },\n   }\n\n\tfor i,\
  \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(arr) == 0 {\n        return []string{}\n    }\n\n    //\
    \ sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1;\
    \ j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // reverse the\
    \ array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i], arr[len(arr)\
    \ - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace each digit\
    \ by its corresponding name\n    for i := 0; i < len(arr); i++ {\n        switch\
    \ arr[i] {\n        case 1:\n            arr[i] = \"One\"\n        case 2:\n \
    \           arr[i] = \"Two\"\n        case 3:\n            arr[i] = \"Three\"\n\
    \        case 4:\n            arr[i] = \"Four\"\n        case 5:\n           \
    \ arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n        case\
    \ 7:\n            arr[i] = \"Seven\"\n        case 8:\n            arr[i] = \"\
    Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n        default:\n  \
    \          arr[i] = \"\"\n        }\n    }\n\n    return arr\n}\n", "    var result\
    \ []string\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n      \
    \      result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n   \
    \ return result\n}\n", "    var result []string\n    for _, v := range arr {\n\
    \        if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var sorted []int\n    for _, v := range arr {\n        if v > 0 && v < 10\
    \ {\n            sorted = append(sorted, v)\n        }\n    }\n    sort.Ints(sorted)\n\
    \    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n   \
    \     case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var numbers = map[int]string{\n        1: \"One\",\n        2: \"Two\",\n\
    \        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6:\
    \ \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\
    ,\n    }\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n       \
    \     result = append(result, numbers[v])\n        }\n    }\n    for i, j := 0,\
    \ len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j],\
    \ result[i]\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ []string{}\n}\n", "    // your code here\n    return []string{}\n}\n", "   \
    \ // your code here\n    return []string{}\n}\n", "    var result []string\n \
    \   var nums []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            nums = append(nums, v)\n        }\n    }\n    for i := len(nums)\
    \ - 1; i >= 0; i-- {\n        switch nums[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var res []string\n    for _,\
    \ v := range arr {\n        if v < 1 || v > 9 {\n            continue\n      \
    \  }\n        res = append(res, fmt.Sprintf(\"%d\", v))\n    }\n    return res\n\
    }\n", "    // your code here\n    return []string{}\n}\n", "    var result []string\n\
    \    var numbers = map[int]string{\n        1: \"One\",\n        2: \"Two\",\n\
    \        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6:\
    \ \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\
    ,\n    }\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n       \
    \     result = append(result, numbers[v])\n        }\n    }\n    for i, j := 0,\
    \ len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j],\
    \ result[i]\n    }\n    return result\n}\n", "    res := []string{}\n    for _,\
    \ v := range arr {\n        if v >= 1 && v <= 9 {\n            res = append(res,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    for i, j := 0, len(res)-1; i\
    \ < j; i, j = i+1, j-1 {\n        res[i], res[j] = res[j], res[i]\n    }\n   \
    \ for i, v := range res {\n        switch v {\n        case \"1\":\n         \
    \   res[i] = \"One\"\n        case \"2\":\n            res[i] = \"Two\"\n    \
    \    case \"3\":\n            res[i] = \"Three\"\n        case \"4\":\n      \
    \      res[i] = \"Four\"\n        case \"5\":\n            res[i] = \"Five\"\n\
    \        case \"6\":\n            res[i] = \"Six\"\n        case \"7\":\n    \
    \        res[i] = \"Seven\"\n        case \"8\":\n            res[i] = \"Eight\"\
    \n        case \"9\":\n            res[i] = \"Nine\"\n        }\n    }\n    return\
    \ res\n}\n", "    // your code here\n    return []string{}\n}\n", "    var result\
    \ []string\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n     \
    \       result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n  \
    \  return result\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    if\
    \ len(arr) == 0 {\n        return []string{}\n    }\n\n    // sort\n    for i\
    \ := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n   \
    \         if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n    }\n\n    // reverse\n    for i := 0; i < len(arr)\
    \ / 2; i++ {\n        arr[i], arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n\
    \    }\n\n    // replace\n    for i := 0; i < len(arr); i++ {\n        switch\
    \ arr[i] {\n        case 1:\n            arr[i] = \"One\"\n        case 2:\n \
    \           arr[i] = \"Two\"\n        case 3:\n            arr[i] = \"Three\"\n\
    \        case 4:\n            arr[i] = \"Four\"\n        case 5:\n           \
    \ arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n        case\
    \ 7:\n            arr[i] = \"Seven\"\n        case 8:\n            arr[i] = \"\
    Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n        default:\n  \
    \          arr[i] = \"\"\n        }\n    }\n\n    // remove empty string\n   \
    \ for i := 0; i < len(arr); i++ {\n        if arr[i] == \"\" {\n            arr\
    \ = append(arr[:i], arr[i+1:]...)\n            i--\n        }\n    }\n\n    return\
    \ arr\n}\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n\n   \
    \ // Sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i +\
    \ 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    // Reverse the\
    \ array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i], arr[len(arr)\
    \ - i - 1] = arr[len(arr) - i - 1], arr[i]\n    }\n\n    // Replace each digit\
    \ by its corresponding name\n    for i := 0; i < len(arr); i++ {\n        switch\
    \ arr[i] {\n        case 1:\n            arr[i] = \"One\"\n        case 2:\n \
    \           arr[i] = \"Two\"\n        case 3:\n            arr[i] = \"Three\"\n\
    \        case 4:\n            arr[i] = \"Four\"\n        case 5:\n           \
    \ arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n        case\
    \ 7:\n            arr[i] = \"Seven\"\n        case 8:\n            arr[i] = \"\
    Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n        default:\n  \
    \          arr[i] = \"\"\n        }\n    }\n\n    return arr\n}\n", "    // your\
    \ code here\n    return []string{}\n}\n", "    var result []string\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   sorted = append(sorted, v)\n        }\n    }\n    sort.Ints(sorted)\n    for\
    \ i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case\
    \ 1:\n            result = append(result, \"One\")\n        case 2:\n        \
    \    result = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return []string{}\n    }\n\n    var result []string\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n        \
    \    sorted = append(sorted, v)\n        }\n    }\n    sort(sorted)\n    for _,\
    \ v := range sorted {\n        result = append(result, to_string(v))\n    }\n\
    \    return result\n}\n", "    var result []string\n    var sorted []int\n   \
    \ for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted =\
    \ append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i--\
    \ {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    // your code here\n    return nil\n}\n", "    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n\n    var result []string\n    var\
    \ one, two, three, four, five, six, seven, eight, nine int\n\n    for _, v :=\
    \ range arr {\n        switch v {\n        case 1:\n            one++\n      \
    \  case 2:\n            two++\n        case 3:\n            three++\n        case\
    \ 4:\n            four++\n        case 5:\n            five++\n        case 6:\n\
    \            six++\n        case 7:\n            seven++\n        case 8:\n  \
    \          eight++\n        case 9:\n            nine++\n        }\n    }\n\n\
    \    for i := 0; i < nine; i++ {\n        result = append(result, \"Nine\")\n\
    \    }\n    for i := 0; i < eight; i++ {\n        result = append(result, \"Eight\"\
    )\n    }\n    for i := 0; i < seven; i++ {\n        result = append(result, \"\
    Seven\")\n    }\n    for i := 0; i < six; i++ {\n        result = append(result,\
    \ \"Six\")\n    }\n    for i := 0; i < five; i++ {\n        result = append(result,\
    \ \"Five\")\n    }\n    for i := 0; i < four; i++ {\n        result = append(result,\
    \ \"Four\")\n    }\n    for i := 0; i < three; i++ {\n        result = append(result,\
    \ \"Three\")\n    }\n    for i := 0; i < two; i++ {\n        result = append(result,\
    \ \"Two\")\n    }\n    for i := 0; i < one; i++ {\n        result = append(result,\
    \ \"One\")\n    }\n\n    return result\n}\n", "    // Write your code here\n \
    \   return []string{}\n}\n", "    var result []string\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, get_name(v))\n        }\n    }\n    return result\n}\n", " \
    \   // your code here\n    return []string{}\n}\n", "    // your code here\n \
    \   return []string{}\n}\n", "    var result []string\n    var sorted []int\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted\
    \ = append(sorted, v)\n        }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    return nil\n}\n", "    var result\
    \ []string\n    var temp []int\n    for _, v := range arr {\n        if v >= 1\
    \ && v <= 9 {\n            temp = append(temp, v)\n        }\n    }\n    for i\
    \ := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n\
    \            result = append(result, \"One\")\n        case 2:\n            result\
    \ = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    // TODO: Implement\
    \ me\n    return []string{}\n}\n", "    var result []string\n    var temp []int\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            temp =\
    \ append(temp, v)\n        }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n\
    \        switch temp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    // your code here\n    return []string{}\n}\n", "    if len(arr)\
    \ == 0 {\n        return []string{}\n    }\n\n    // sort the array\n    for i\
    \ := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n   \
    \         if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            }\n        }\n    }\n\n    // reverse the array\n    for i := 0;\
    \ i < len(arr) / 2; i++ {\n        arr[i], arr[len(arr) - 1 - i] = arr[len(arr)\
    \ - 1 - i], arr[i]\n    }\n\n    // replace each digit by its corresponding name\n\
    \    var result []string\n    for _, v := range arr {\n        switch v {\n  \
    \      case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n\n    return result\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    // your code here\n    return []string{}\n}\n", " \
    \   return nil\n}\n", "    var result []string\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result\
    \ = append(result, get_name(v))\n        }\n    }\n    return result\n}\n", " \
    \   var result []string\n    var temp []int\n    for _, v := range arr {\n   \
    \     if v >= 1 && v <= 9 {\n            temp = append(temp, v)\n        }\n \
    \   }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n \
    \       case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return []string{}\n    }\n\n    // sort\n    for i := 0; i < len(arr);\
    \ i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] >\
    \ arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n \
    \       }\n    }\n\n    // reverse\n    for i := 0; i < len(arr)/2; i++ {\n  \
    \      arr[i], arr[len(arr)-1-i] = arr[len(arr)-1-i], arr[i]\n    }\n\n    //\
    \ replace\n    for i := 0; i < len(arr); i++ {\n        switch arr[i] {\n    \
    \    case 1:\n            arr[i] = \"One\"\n        case 2:\n            arr[i]\
    \ = \"Two\"\n        case 3:\n            arr[i] = \"Three\"\n        case 4:\n\
    \            arr[i] = \"Four\"\n        case 5:\n            arr[i] = \"Five\"\
    \n        case 6:\n            arr[i] = \"Six\"\n        case 7:\n           \
    \ arr[i] = \"Seven\"\n        case 8:\n            arr[i] = \"Eight\"\n      \
    \  case 9:\n            arr[i] = \"Nine\"\n        default:\n            arr[i]\
    \ = \"\"\n        }\n    }\n\n    return arr\n}\n", "    var result []string\n\
    \    var sorted []int\n    var sorted_reversed []int\n    var sorted_reversed_str\
    \ []string\n\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n    \
    \        sorted = append(sorted, v)\n        }\n    }\n\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        sorted_reversed = append(sorted_reversed, sorted[i])\n\
    \    }\n\n    for _, v := range sorted_reversed {\n        switch v {\n      \
    \  case 1:\n            sorted_reversed_str = append(sorted_reversed_str, \"One\"\
    )\n        case 2:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Two\")\n        case 3:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Three\")\n        case 4:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Four\")\n        case 5:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Five\")\n        case 6:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Six\")\n        case 7:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Seven\")\n        case 8:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Eight\")\n        case 9:\n            sorted_reversed_str = append(sorted_reversed_str,\
    \ \"Nine\")\n        }\n    }\n\n    return sorted_reversed_str\n}\n", "    var\
    \ result []string\n    var sorted []int\n    for _, v := range arr {\n       \
    \ if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n        }\n  \
    \  }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i >= 0; i-- {\n   \
    \     switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    for _, v := range arr {\n      \
    \  if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"%d\"\
    , v))\n        }\n    }\n    return result\n}\n", "    var result []string\n \
    \   var dict = map[int]string{\n        1: \"One\",\n        2: \"Two\",\n   \
    \     3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"\
    Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n \
    \   }\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n          \
    \  result = append(result, dict[v])\n        }\n    }\n    for i, j := 0, len(result)-1;\
    \ i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j], result[i]\n\
    \    }\n    return result\n}\n", "    var result []string\n    var sorted []int\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted\
    \ = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var res []string\n    for _, v := range arr {\n        if\
    \ v > 0 && v < 10 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n \
    \       }\n    }\n    return res\n}\n", "    var result []string\n    var tmp\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   tmp = append(tmp, v)\n        }\n    }\n    sort.Ints(tmp)\n    for i := len(tmp)\
    \ - 1; i >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var result []string\n    var\
    \ sorted []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n  \
    \          sorted = append(sorted, v)\n        }\n    }\n    sort.Ints(sorted)\n\
    \    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n   \
    \     case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    // your code here\n\
    \    return []string{}\n}\n", "    var result []string\n    var sorted []int\n\
    \    for _, num := range arr {\n        if num >= 1 && num <= 9 {\n          \
    \  sorted = append(sorted, num)\n        }\n    }\n    for i := len(sorted) -\
    \ 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ []string{}\n}\n", "    // your code here\n    return nil\n}\n", "    var result\
    \ []string\n    var sorted []int\n    var sorted_map = make(map[int]int)\n   \
    \ for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted_map[v]\
    \ = v\n        }\n    }\n    for k, _ := range sorted_map {\n        sorted =\
    \ append(sorted, k)\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n    \
    \    switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO: implement me\n    return []string{}\n}\n", "   \
    \ var result []string\n    var sorted []int\n    for _, v := range arr {\n   \
    \     if v >= 1 && v <= 9 {\n            sorted = append(sorted, v)\n        }\n\
    \    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return nil\n}\n", "    if len(arr) == 0 {\n\
    \        return []string{}\n    }\n\n    var result []string\n    for _, v :=\
    \ range arr {\n        if v < 1 || v > 9 {\n            continue\n        }\n\
    \        result = append(result, fmt.Sprintf(\"%d\", v))\n    }\n\n    return\
    \ result\n}\n", "    var res []string\n    var tmp []int\n    for _, v := range\
    \ arr {\n        if v >= 1 && v <= 9 {\n            tmp = append(tmp, v)\n   \
    \     }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        res = append(res,\
    \ numToStr(tmp[i]))\n    }\n    return res\n}\n", "    var res []string\n    for\
    \ _, v := range arr {\n        if v >= 1 && v <= 9 {\n            res = append(res,\
    \ fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return res\n}\n", "    // your\
    \ code here\n    return nil\n}\n", "    // your code here\n    return []string{}\n\
    }\n", "    var res []string\n    var numbers = map[int]string{\n        1: \"\
    One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n   \
    \     5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"\
    Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n        if\
    \ v > 0 && v < 10 {\n            res = append(res, numbers[v])\n        }\n  \
    \  }\n    for i, j := 0, len(res)-1; i < j; i, j = i+1, j-1 {\n        res[i],\
    \ res[j] = res[j], res[i]\n    }\n    return res\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return []string{}\n}\n", "    var result []string\n\
    \    var sorted []int\n    for _, num := range arr {\n        if num > 0 && num\
    \ < 10 {\n            sorted = append(sorted, num)\n        }\n    }\n    if len(sorted)\
    \ == 0 {\n        return result\n    }\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n\n\
    \    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    // remove the\
    \ strange number\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == \"\
    \" {\n            arr = append(arr[:i], arr[i+1:]...)\n            i--\n     \
    \   }\n    }\n\n    return arr\n}\n", "    var result []string\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1;\
    \ i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    var res []string\n    var nums\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   nums = append(nums, v)\n        }\n    }\n    if len(nums) == 0 {\n      \
    \  return res\n    }\n    for i := 0; i < len(nums); i++ {\n        for j := i\
    \ + 1; j < len(nums); j++ {\n            if nums[i] > nums[j] {\n            \
    \    nums[i], nums[j] = nums[j], nums[i]\n            }\n        }\n    }\n  \
    \  for i := len(nums) - 1; i >= 0; i-- {\n        switch nums[i] {\n        case\
    \ 1:\n            res = append(res, \"One\")\n        case 2:\n            res\
    \ = append(res, \"Two\")\n        case 3:\n            res = append(res, \"Three\"\
    )\n        case 4:\n            res = append(res, \"Four\")\n        case 5:\n\
    \            res = append(res, \"Five\")\n        case 6:\n            res = append(res,\
    \ \"Six\")\n        case 7:\n            res = append(res, \"Seven\")\n      \
    \  case 8:\n            res = append(res, \"Eight\")\n        case 9:\n      \
    \      res = append(res, \"Nine\")\n        }\n    }\n    return res\n}\n", " \
    \   // TODO: implement this function\n    return []string{}\n}\n", "    var result\
    \ []string\n    var numbers = map[int]string{\n        1: \"One\",\n        2:\
    \ \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n\
    \        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9:\
    \ \"Nine\",\n    }\n    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n\
    \            result = append(result, numbers[v])\n        }\n    }\n    for i,\
    \ j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j]\
    \ = result[j], result[i]\n    }\n    return result\n}\n", "    // your code here\n\
    \    return []string{}\n}\n", "    if len(arr) == 0 {\n        return []string{}\n\
    \    }\n\n    // sort the array\n    for i := 0; i < len(arr); i++ {\n       \
    \ for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n    \
    \            arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\
    \n    // reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    return arr\n}\n",
  "    // TODO: implement this function\n    return []string{}\n}\n", "    var result\
    \ []string\n    var tmp []int\n    for _, v := range arr {\n        if v > 0 &&\
    \ v < 10 {\n            tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp)\
    \ - 1; i >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    var result []string\n    for _, v := range arr {\n        switch\
    \ v {\n        case 1:\n            result = append(result, \"One\")\n       \
    \ case 2:\n            result = append(result, \"Two\")\n        case 3:\n   \
    \         result = append(result, \"Three\")\n        case 4:\n            result\
    \ = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return []string{}\n}\n", "    var result []string\n\
    \    var sorted []int\n    for _, v := range arr {\n        if v > 0 && v < 10\
    \ {\n            sorted = append(sorted, v)\n        }\n    }\n    sort.Ints(sorted)\n\
    \    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n   \
    \     case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    return []string{}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    // your code here\n \
    \   return nil\n}\n", "    // your code here\n    return []string{}\n}\n", " \
    \   var result []string\n    var nums []int\n    for _, v := range arr {\n   \
    \     if v >= 1 && v <= 9 {\n            nums = append(nums, v)\n        }\n \
    \   }\n    for i := len(nums) - 1; i >= 0; i-- {\n        switch nums[i] {\n \
    \       case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var temp []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            temp = append(temp, v)\n      \
    \  }\n    }\n    if len(temp) == 0 {\n        return result\n    }\n    for i\
    \ := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n        case 1:\n\
    \            result = append(result, \"One\")\n        case 2:\n            result\
    \ = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, numToString(v))\n        }\n    }\n    return reverse(result)\n\
    }\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n\n    // sort\
    \ the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j <\
    \ len(arr); j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            }\n        }\n    }\n\n    // reverse the array\n\
    \    for i := 0; i < len(arr) / 2; i++ {\n        arr[i], arr[len(arr) - 1 - i]\
    \ = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace each digit by its corresponding\
    \ name\n    for i := 0; i < len(arr); i++ {\n        switch arr[i] {\n       \
    \ case 1:\n            arr[i] = \"One\"\n        case 2:\n            arr[i] =\
    \ \"Two\"\n        case 3:\n            arr[i] = \"Three\"\n        case 4:\n\
    \            arr[i] = \"Four\"\n        case 5:\n            arr[i] = \"Five\"\
    \n        case 6:\n            arr[i] = \"Six\"\n        case 7:\n           \
    \ arr[i] = \"Seven\"\n        case 8:\n            arr[i] = \"Eight\"\n      \
    \  case 9:\n            arr[i] = \"Nine\"\n        default:\n            arr[i]\
    \ = \"\"\n        }\n    }\n\n    // remove the empty string\n    for i := 0;\
    \ i < len(arr); i++ {\n        if arr[i] == \"\" {\n            arr = append(arr[:i],\
    \ arr[i+1:]...)\n            i--\n        }\n    }\n\n    return arr\n}\n", " \
    \   // your code here\n    return nil\n}\n", "    if len(arr) == 0 {\n       \
    \ return []string{}\n    }\n\n    // sort\n    for i := 0; i < len(arr); i++ {\n\
    \        for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n \
    \   }\n\n    // reverse\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\n\
    \    for i := 0; i < len(arr); i++ {\n        switch arr[i] {\n        case 1:\n\
    \            arr[i] = \"One\"\n        case 2:\n            arr[i] = \"Two\"\n\
    \        case 3:\n            arr[i] = \"Three\"\n        case 4:\n          \
    \  arr[i] = \"Four\"\n        case 5:\n            arr[i] = \"Five\"\n       \
    \ case 6:\n            arr[i] = \"Six\"\n        case 7:\n            arr[i] =\
    \ \"Seven\"\n        case 8:\n            arr[i] = \"Eight\"\n        case 9:\n\
    \            arr[i] = \"Nine\"\n        default:\n            arr[i] = \"\"\n\
    \        }\n    }\n\n    return arr\n}\n", "    var result []string\n    var sorted\
    \ []int\n    for _, num := range arr {\n        if num >= 1 && num <= 9 {\n  \
    \          sorted = append(sorted, num)\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n\n   \
    \ // sort the integers that are between 1 and 9 inclusive\n    var sorted []int\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted\
    \ = append(sorted, v)\n        }\n    }\n    fmt.Println(sorted)\n\n    // reverse\
    \ the resulting array\n    for i, j := 0, len(sorted)-1; i < j; i, j = i+1, j-1\
    \ {\n        sorted[i], sorted[j] = sorted[j], sorted[i]\n    }\n    fmt.Println(sorted)\n\
    \n    // replace each digit by its corresponding name from \"One\", \"Two\", \"\
    Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n    var\
    \ result []string\n    for _, v := range sorted {\n        switch v {\n      \
    \  case 1:\n            result = append(result, \"One\")\n        case 2:\n  \
    \          result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return []string{}\n    }\n\n    // sort the array\n    for i := 0;\
    \ i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n         \
    \   if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n  \
    \          }\n        }\n    }\n\n    // reverse the array\n    for i := 0; i\
    \ < len(arr) / 2; i++ {\n        arr[i], arr[len(arr) - 1 - i] = arr[len(arr)\
    \ - 1 - i], arr[i]\n    }\n\n    // replace each digit by its corresponding name\n\
    \    for i := 0; i < len(arr); i++ {\n        switch arr[i] {\n        case 1:\n\
    \            arr[i] = \"One\"\n        case 2:\n            arr[i] = \"Two\"\n\
    \        case 3:\n            arr[i] = \"Three\"\n        case 4:\n          \
    \  arr[i] = \"Four\"\n        case 5:\n            arr[i] = \"Five\"\n       \
    \ case 6:\n            arr[i] = \"Six\"\n        case 7:\n            arr[i] =\
    \ \"Seven\"\n        case 8:\n            arr[i] = \"Eight\"\n        case 9:\n\
    \            arr[i] = \"Nine\"\n        default:\n            arr[i] = \"\"\n\
    \        }\n    }\n\n    // remove empty string\n    var result []string\n   \
    \ for _, v := range arr {\n        if v != \"\" {\n            result = append(result,\
    \ v)\n        }\n    }\n\n    return result\n}\n", "    // TODO: implement this\
    \ function\n    return nil\n}\n", "    var result []string\n    for _, v := range\
    \ arr {\n        if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    // TODO: implement\
    \ me\n    return []string{}\n}\n", "    // your code here\n    return []string{}\n\
    }\n", "    var result []string\n    var sorted []int\n    var sorted_map = make(map[int]string)\n\
    \    sorted_map[1] = \"One\"\n    sorted_map[2] = \"Two\"\n    sorted_map[3] =\
    \ \"Three\"\n    sorted_map[4] = \"Four\"\n    sorted_map[5] = \"Five\"\n    sorted_map[6]\
    \ = \"Six\"\n    sorted_map[7] = \"Seven\"\n    sorted_map[8] = \"Eight\"\n  \
    \  sorted_map[9] = \"Nine\"\n\n    for _, v := range arr {\n        if v >= 1\
    \ && v <= 9 {\n            sorted = append(sorted, v)\n        }\n    }\n    if\
    \ len(sorted) == 0 {\n        return result\n    }\n    for i := 0; i < len(sorted);\
    \ i++ {\n        for j := i + 1; j < len(sorted); j++ {\n            if sorted[i]\
    \ > sorted[j] {\n                sorted[i], sorted[j] = sorted[j], sorted[i]\n\
    \            }\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n\
    \        result = append(result, sorted_map[sorted[i]])\n    }\n    return result\n\
    }\n", "    var result []string\n    var sorted []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n  \
    \      }\n    }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        result = append(result, int_to_string(sorted[i]))\n    }\n  \
    \  return result\n}\n", "    var result []string\n    var sorted []int\n    var\
    \ sorted_map = make(map[int]int)\n    for _, value := range arr {\n        if\
    \ value >= 1 && value <= 9 {\n            sorted_map[value] += 1\n        }\n\
    \    }\n    for key, _ := range sorted_map {\n        sorted = append(sorted,\
    \ key)\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        for j := 0;\
    \ j < sorted_map[sorted[i]]; j++ {\n            switch sorted[i] {\n         \
    \   case 1:\n                result = append(result, \"One\")\n            case\
    \ 2:\n                result = append(result, \"Two\")\n            case 3:\n\
    \                result = append(result, \"Three\")\n            case 4:\n   \
    \             result = append(result, \"Four\")\n            case 5:\n       \
    \         result = append(result, \"Five\")\n            case 6:\n           \
    \     result = append(result, \"Six\")\n            case 7:\n                result\
    \ = append(result, \"Seven\")\n            case 8:\n                result = append(result,\
    \ \"Eight\")\n            case 9:\n                result = append(result, \"\
    Nine\")\n            }\n        }\n    }\n    return result\n}\n", "    var result\
    \ []string\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n      \
    \      result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n   \
    \ return result\n}\n", "    var result []string\n    var sorted []int\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    if len(sorted) == 0 {\n        return result\n   \
    \ }\n    for i := 0; i < len(sorted); i++ {\n        for j := i + 1; j < len(sorted);\
    \ j++ {\n            if sorted[i] > sorted[j] {\n                sorted[i], sorted[j]\
    \ = sorted[j], sorted[i]\n            }\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: implement this function\n\
    \    return []string{}\n}\n", "    var result []string\n    var sorted []int\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted\
    \ = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var one, two, three, four, five,\
    \ six, seven, eight, nine int\n    for _, v := range arr {\n        switch v {\n\
    \        case 1:\n            one++\n        case 2:\n            two++\n    \
    \    case 3:\n            three++\n        case 4:\n            four++\n     \
    \   case 5:\n            five++\n        case 6:\n            six++\n        case\
    \ 7:\n            seven++\n        case 8:\n            eight++\n        case\
    \ 9:\n            nine++\n        }\n    }\n    for i := 0; i < nine; i++ {\n\
    \        result = append(result, \"Nine\")\n    }\n    for i := 0; i < eight;\
    \ i++ {\n        result = append(result, \"Eight\")\n    }\n    for i := 0; i\
    \ < seven; i++ {\n        result = append(result, \"Seven\")\n    }\n    for i\
    \ := 0; i < six; i++ {\n        result = append(result, \"Six\")\n    }\n    for\
    \ i := 0; i < five; i++ {\n        result = append(result, \"Five\")\n    }\n\
    \    for i := 0; i < four; i++ {\n        result = append(result, \"Four\")\n\
    \    }\n    for i := 0; i < three; i++ {\n        result = append(result, \"Three\"\
    )\n    }\n    for i := 0; i < two; i++ {\n        result = append(result, \"Two\"\
    )\n    }\n    for i := 0; i < one; i++ {\n        result = append(result, \"One\"\
    )\n    }\n    return result\n}\n", "    var result []string\n    for _, v := range\
    \ arr {\n        if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    res := []string{}\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            res =\
    \ append(res, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return res\n}\n",
  "    var result []string\n    for _, v := range arr {\n        switch v {\n    \
    \    case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var nums []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n\
    \            nums = append(nums, v)\n        }\n    }\n    if len(nums) == 0 {\n\
    \        return result\n    }\n    sort(nums)\n    for _, v := range nums {\n\
    \        result = append(result, numToString(v))\n    }\n    return result\n}\n",
  "    var result []string\n    for _, v := range arr {\n        if v >= 1 && v <=\
    \ 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n\
    \    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i],\
    \ result[j] = result[j], result[i]\n    }\n    for i, v := range result {\n  \
    \      switch v {\n        case \"1\":\n            result[i] = \"One\"\n    \
    \    case \"2\":\n            result[i] = \"Two\"\n        case \"3\":\n     \
    \       result[i] = \"Three\"\n        case \"4\":\n            result[i] = \"\
    Four\"\n        case \"5\":\n            result[i] = \"Five\"\n        case \"\
    6\":\n            result[i] = \"Six\"\n        case \"7\":\n            result[i]\
    \ = \"Seven\"\n        case \"8\":\n            result[i] = \"Eight\"\n      \
    \  case \"9\":\n            result[i] = \"Nine\"\n        }\n    }\n    return\
    \ result\n}\n", "    return []string{}\n}\n", "    // TODO: implement this function\n\
    \    return nil\n}\n", "    var result []string\n    var tmp []int\n    for _,\
    \ v := range arr {\n        if v > 0 && v < 10 {\n            tmp = append(tmp,\
    \ v)\n        }\n    }\n    for i := len(tmp) - 1; i >= 0; i-- {\n        switch\
    \ tmp[i] {\n        case 1:\n            result = append(result, \"One\")\n  \
    \      case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var sorted []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n  \
    \      }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result []string\n\
    \    var sorted []int\n    for _, v := range arr {\n        if v > 0 && v < 10\
    \ {\n            sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted)\
    \ - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n          \
    \  result = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    return []string{}\n}\n", "  \
    \  // your code here\n    return []string{}\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return []string{}\n}\n", "    // your code here\n\
    \    return []string{}\n}\n", "    // your code here\n    return []string{}\n\
    }\n", "    // Your code goes here\n    return []string{}\n}\n", "    return []string{}\n\
    }\n", "    // TODO: implement this function\n    return []string{}\n}\n", "  \
    \  var result []string\n    for _, v := range arr {\n        if v >= 1 && v <=\
    \ 9 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n        }\n\
    \    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i],\
    \ result[j] = result[j], result[i]\n    }\n    for i, v := range result {\n  \
    \      switch v {\n        case \"1\":\n            result[i] = \"One\"\n    \
    \    case \"2\":\n            result[i] = \"Two\"\n        case \"3\":\n     \
    \       result[i] = \"Three\"\n        case \"4\":\n            result[i] = \"\
    Four\"\n        case \"5\":\n            result[i] = \"Five\"\n        case \"\
    6\":\n            result[i] = \"Six\"\n        case \"7\":\n            result[i]\
    \ = \"Seven\"\n        case \"8\":\n            result[i] = \"Eight\"\n      \
    \  case \"9\":\n            result[i] = \"Nine\"\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var sorted_arr []int\n    var sorted_arr_map\
    \ = make(map[int]int)\n    for _, v := range arr {\n        if v > 0 && v < 10\
    \ {\n            sorted_arr = append(sorted_arr, v)\n            sorted_arr_map[v]\
    \ = v\n        }\n    }\n    sort(sorted_arr)\n    for i := len(sorted_arr) -\
    \ 1; i >= 0; i-- {\n        result = append(result, get_string(sorted_arr[i]))\n\
    \    }\n    return result\n}\n", "    var result []string\n    for _, v := range\
    \ arr {\n        if v > 0 && v < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    // your code here\n\
    \    return []string{}\n}\n", "    var result []string\n    for _, i := range\
    \ arr {\n        if i > 0 && i < 10 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", i))\n        }\n    }\n    return result\n}\n", "    return []string{}\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v < 1\
    \ || v > 9 {\n            continue\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n    }\n    return result\n}\n", "    var result []string\n\
    \    var temp []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n\
    \            temp = append(temp, v)\n        }\n    }\n    if len(temp) == 0 {\n\
    \        return result\n    }\n    for i := 0; i < len(temp); i++ {\n        for\
    \ j := i + 1; j < len(temp); j++ {\n            if temp[i] > temp[j] {\n     \
    \           temp[i], temp[j] = temp[j], temp[i]\n            }\n        }\n  \
    \  }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i] {\n  \
    \      case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return []string{}\n    }\n\n    // sort\n    for i := 0; i < len(arr);\
    \ i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] >\
    \ arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n \
    \       }\n    }\n\n    // reverse\n    for i := 0; i < len(arr) / 2; i++ {\n\
    \        arr[i], arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\
    \n    // replace\n    for i := 0; i < len(arr); i++ {\n        switch arr[i] {\n\
    \        case 1:\n            arr[i] = \"One\"\n        case 2:\n            arr[i]\
    \ = \"Two\"\n        case 3:\n            arr[i] = \"Three\"\n        case 4:\n\
    \            arr[i] = \"Four\"\n        case 5:\n            arr[i] = \"Five\"\
    \n        case 6:\n            arr[i] = \"Six\"\n        case 7:\n           \
    \ arr[i] = \"Seven\"\n        case 8:\n            arr[i] = \"Eight\"\n      \
    \  case 9:\n            arr[i] = \"Nine\"\n        default:\n            arr[i]\
    \ = \"\"\n        }\n    }\n\n    // filter\n    var result []string\n    for\
    \ _, v := range arr {\n        if v != \"\" {\n            result = append(result,\
    \ v)\n        }\n    }\n\n    return result\n}\n", "    var result []string\n\
    \    var tmp []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n\
    \            tmp = append(tmp, v)\n        }\n    }\n    for i := len(tmp) - 1;\
    \ i >= 0; i-- {\n        switch tmp[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ []string{}\n}\n", "    // your code here\n    return []string{}\n}\n", "   \
    \ // your code here\n    return nil\n}\n", "    var result []string\n    var sorted\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   sorted = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1;\
    \ i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    var result []string\n    var sorted_arr []int\n    for _, v\
    \ := range arr {\n        if v > 0 && v < 10 {\n            sorted_arr = append(sorted_arr,\
    \ v)\n        }\n    }\n    sort.Ints(sorted_arr)\n    for i := len(sorted_arr)\
    \ - 1; i >= 0; i-- {\n        switch sorted_arr[i] {\n        case 1:\n      \
    \      result = append(result, \"One\")\n        case 2:\n            result =\
    \ append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    // your code here\n    return nil\n}\n", "    // your\
    \ code here\n    return nil\n}\n", "    // your code here\n    return []string{}\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v >= 1\
    \ && v <= 9 {\n            result = append(result, numToString(v))\n        }\n\
    \    }\n    return reverse(result)\n}\n", "    var result []string\n    var sorted_arr\
    \ []int\n    for _, v := range arr {\n        if v > 0 && v < 10 {\n         \
    \   sorted_arr = append(sorted_arr, v)\n        }\n    }\n    sort.Ints(sorted_arr)\n\
    \    for i := len(sorted_arr) - 1; i >= 0; i-- {\n        switch sorted_arr[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var res []string\n    for _, v := range arr {\n        if v >= 1 &&\
    \ v <= 9 {\n            res = append(res, fmt.Sprintf(\"%d\", v))\n        }\n\
    \    }\n    return res\n}\n", "    var result []string\n    var sorted []int\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            sorted\
    \ = append(sorted, v)\n        }\n    }\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    // your code here\n    return nil\n}\n", "    // your code\
    \ here\n    return []string{}\n}\n", "    if len(arr) == 0 {\n        return []string{}\n\
    \    }\n\n    // Sort the array\n    for i := 0; i < len(arr); i++ {\n       \
    \ for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n    \
    \            arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\
    \n    // Reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - i - 1] = arr[len(arr) - i - 1], arr[i]\n    }\n\n    // Replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    return arr\n}\n",
  "    var result []string\n    var sorted []int\n    var sorted_map = make(map[int]int)\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted_map[v]++\n\
    \        }\n    }\n    for i := 1; i < 10; i++ {\n        for j := 0; j < sorted_map[i];\
    \ j++ {\n            sorted = append(sorted, i)\n        }\n    }\n    for i :=\
    \ len(sorted) - 1; i >= 0; i-- {\n        switch sorted[i] {\n        case 1:\n\
    \            result = append(result, \"One\")\n        case 2:\n            result\
    \ = append(result, \"Two\")\n        case 3:\n            result = append(result,\
    \ \"Three\")\n        case 4:\n            result = append(result, \"Four\")\n\
    \        case 5:\n            result = append(result, \"Five\")\n        case\
    \ 6:\n            result = append(result, \"Six\")\n        case 7:\n        \
    \    result = append(result, \"Seven\")\n        case 8:\n            result =\
    \ append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    var res []string\n\
    \    for _, v := range arr {\n        if v < 1 || v > 9 {\n            continue\n\
    \        }\n        res = append(res, fmt.Sprintf(\"%d\", v))\n    }\n    return\
    \ res\n}\n", "    return nil\n}\n", "    // your code here\n    return nil\n}\n",
  "    // TODO: Implement me\n    return nil\n}\n", "    var result []string\n   \
    \ for _, v := range arr {\n        if v > 0 && v < 10 {\n            result =\
    \ append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return []string{}\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v > 0 && v < 10 {\n            result\
    \ = append(result, convert(v))\n        }\n    }\n    reverse(result)\n    return\
    \ result\n}\n", "    // your code here\n    return nil\n}\n", "    var result\
    \ []string\n    var temp []int\n    for _, v := range arr {\n        if v >= 1\
    \ && v <= 9 {\n            temp = append(temp, v)\n        }\n    }\n    for i\
    \ := len(temp) - 1; i >= 0; i-- {\n        result = append(result, get_name(temp[i]))\n\
    \    }\n    return result\n}\n", "    // your code here\n    return nil\n}\n",
  "    // your code here\n    return []string{}\n}\n", "    var result []string\n\
    \    var sorted []int\n    for _, v := range arr {\n        if v >= 1 && v <=\
    \ 9 {\n            sorted = append(sorted, v)\n        }\n    }\n    if len(sorted)\
    \ == 0 {\n        return result\n    }\n    for i := len(sorted) - 1; i >= 0;\
    \ i-- {\n        switch sorted[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []string{}\n    }\n\n\
    \    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j :=\
    \ i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n\n    //\
    \ reverse the array\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\
    \ each digit by its corresponding name\n    for i := 0; i < len(arr); i++ {\n\
    \        switch arr[i] {\n        case 1:\n            arr[i] = \"One\"\n    \
    \    case 2:\n            arr[i] = \"Two\"\n        case 3:\n            arr[i]\
    \ = \"Three\"\n        case 4:\n            arr[i] = \"Four\"\n        case 5:\n\
    \            arr[i] = \"Five\"\n        case 6:\n            arr[i] = \"Six\"\n\
    \        case 7:\n            arr[i] = \"Seven\"\n        case 8:\n          \
    \  arr[i] = \"Eight\"\n        case 9:\n            arr[i] = \"Nine\"\n      \
    \  default:\n            arr[i] = \"\"\n        }\n    }\n\n    // remove empty\
    \ string\n    for i := 0; i < len(arr); i++ {\n        if arr[i] == \"\" {\n \
    \           arr = append(arr[:i], arr[i+1:]...)\n            i--\n        }\n\
    \    }\n\n    return arr\n}\n", "    // your code here\n    return []string{}\n\
    }\n", "    // your code here\n    return nil\n}\n", "    var result []string\n\
    \    var sorted []int\n    for _, v := range arr {\n        if v > 0 && v < 10\
    \ {\n            sorted = append(sorted, v)\n        }\n    }\n    if len(sorted)\
    \ == 0 {\n        return result\n    }\n    for i := 0; i < len(sorted); i++ {\n\
    \        for j := i + 1; j < len(sorted); j++ {\n            if sorted[i] > sorted[j]\
    \ {\n                sorted[i], sorted[j] = sorted[j], sorted[i]\n           \
    \ }\n        }\n    }\n    for i := len(sorted) - 1; i >= 0; i-- {\n        switch\
    \ sorted[i] {\n        case 1:\n            result = append(result, \"One\")\n\
    \        case 2:\n            result = append(result, \"Two\")\n        case 3:\n\
    \            result = append(result, \"Three\")\n        case 4:\n           \
    \ result = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    return nil\n}\n", "    if len(arr) == 0 {\n        return []string{}\n\
    \    }\n\n    var result []string\n    var sorted []int\n    for _, v := range\
    \ arr {\n        if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n\
    \        }\n    }\n    sort(sorted)\n    for i := len(sorted) - 1; i >= 0; i--\
    \ {\n        result = append(result, to_string(sorted[i]))\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var numbers = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            result = append(result, numbers[v])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n", "    var result []string\n    var temp []int\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            temp = append(temp, v)\n     \
    \   }\n    }\n    for i := len(temp) - 1; i >= 0; i-- {\n        switch temp[i]\
    \ {\n        case 1:\n            result = append(result, \"One\")\n        case\
    \ 2:\n            result = append(result, \"Two\")\n        case 3:\n        \
    \    result = append(result, \"Three\")\n        case 4:\n            result =\
    \ append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v > 0\
    \ && v < 10 {\n            result = append(result, fmt.Sprintf(\"%d\", v))\n \
    \       }\n    }\n    return result\n}\n", "    return nil\n}\n", "    var result\
    \ []string\n    var nums []int\n    for _, num := range arr {\n        if num\
    \ > 0 && num < 10 {\n            nums = append(nums, num)\n        }\n    }\n\
    \    if len(nums) == 0 {\n        return result\n    }\n    for i := len(nums)\
    \ - 1; i >= 0; i-- {\n        switch nums[i] {\n        case 1:\n            result\
    \ = append(result, \"One\")\n        case 2:\n            result = append(result,\
    \ \"Two\")\n        case 3:\n            result = append(result, \"Three\")\n\
    \        case 4:\n            result = append(result, \"Four\")\n        case\
    \ 5:\n            result = append(result, \"Five\")\n        case 6:\n       \
    \     result = append(result, \"Six\")\n        case 7:\n            result =\
    \ append(result, \"Seven\")\n        case 8:\n            result = append(result,\
    \ \"Eight\")\n        case 9:\n            result = append(result, \"Nine\")\n\
    \        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []string{}\n    }\n\n    // sort\n    for i := 0; i < len(arr); i++ {\n    \
    \    for j := i + 1; j < len(arr); j++ {\n            if arr[i] > arr[j] {\n \
    \               arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n  \
    \  }\n\n    // reverse\n    for i := 0; i < len(arr) / 2; i++ {\n        arr[i],\
    \ arr[len(arr) - 1 - i] = arr[len(arr) - 1 - i], arr[i]\n    }\n\n    // replace\n\
    \    for i := 0; i < len(arr); i++ {\n        switch arr[i] {\n        case 1:\n\
    \            arr[i] = \"One\"\n        case 2:\n            arr[i] = \"Two\"\n\
    \        case 3:\n            arr[i] = \"Three\"\n        case 4:\n          \
    \  arr[i] = \"Four\"\n        case 5:\n            arr[i] = \"Five\"\n       \
    \ case 6:\n            arr[i] = \"Six\"\n        case 7:\n            arr[i] =\
    \ \"Seven\"\n        case 8:\n            arr[i] = \"Eight\"\n        case 9:\n\
    \            arr[i] = \"Nine\"\n        default:\n            arr[i] = \"\"\n\
    \        }\n    }\n\n    // filter\n    var result []string\n    for _, v := range\
    \ arr {\n        if v != \"\" {\n            result = append(result, v)\n    \
    \    }\n    }\n\n    return result\n}\n", "    var result []string\n    if len(arr)\
    \ == 0 {\n        return result\n    }\n    var numbers = map[int]string{\n  \
    \      1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            result = append(result, numbers[v])\n\
    \        }\n    }\n    for i, j := 0, len(result)-1; i < j; i, j = i+1, j-1 {\n\
    \        result[i], result[j] = result[j], result[i]\n    }\n    return result\n\
    }\n", "    var result []string\n    var temp []int\n    for _, v := range arr\
    \ {\n        if v > 0 && v < 10 {\n            temp = append(temp, v)\n      \
    \  }\n    }\n    sort.Ints(temp)\n    for i := len(temp) - 1; i >= 0; i-- {\n\
    \        switch temp[i] {\n        case 1:\n            result = append(result,\
    \ \"One\")\n        case 2:\n            result = append(result, \"Two\")\n  \
    \      case 3:\n            result = append(result, \"Three\")\n        case 4:\n\
    \            result = append(result, \"Four\")\n        case 5:\n            result\
    \ = append(result, \"Five\")\n        case 6:\n            result = append(result,\
    \ \"Six\")\n        case 7:\n            result = append(result, \"Seven\")\n\
    \        case 8:\n            result = append(result, \"Eight\")\n        case\
    \ 9:\n            result = append(result, \"Nine\")\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    for _, num := range arr {\n    \
    \    if num < 1 || num > 9 {\n            continue\n        }\n        switch\
    \ num {\n        case 1:\n            result = append(result, \"One\")\n     \
    \   case 2:\n            result = append(result, \"Two\")\n        case 3:\n \
    \           result = append(result, \"Three\")\n        case 4:\n            result\
    \ = append(result, \"Four\")\n        case 5:\n            result = append(result,\
    \ \"Five\")\n        case 6:\n            result = append(result, \"Six\")\n \
    \       case 7:\n            result = append(result, \"Seven\")\n        case\
    \ 8:\n            result = append(result, \"Eight\")\n        case 9:\n      \
    \      result = append(result, \"Nine\")\n        }\n    }\n    for i, j := 0,\
    \ len(result)-1; i < j; i, j = i+1, j-1 {\n        result[i], result[j] = result[j],\
    \ result[i]\n    }\n    return result\n}\n", "    // your code here\n    return\
    \ []string{}\n}\n", "    var result []string\n    var sorted_arr []int\n    for\
    \ _, v := range arr {\n        if v > 0 && v < 10 {\n            sorted_arr =\
    \ append(sorted_arr, v)\n        }\n    }\n    sort.Ints(sorted_arr)\n    for\
    \ i := len(sorted_arr) - 1; i >= 0; i-- {\n        switch sorted_arr[i] {\n  \
    \      case 1:\n            result = append(result, \"One\")\n        case 2:\n\
    \            result = append(result, \"Two\")\n        case 3:\n            result\
    \ = append(result, \"Three\")\n        case 4:\n            result = append(result,\
    \ \"Four\")\n        case 5:\n            result = append(result, \"Five\")\n\
    \        case 6:\n            result = append(result, \"Six\")\n        case 7:\n\
    \            result = append(result, \"Seven\")\n        case 8:\n           \
    \ result = append(result, \"Eight\")\n        case 9:\n            result = append(result,\
    \ \"Nine\")\n        }\n    }\n    return result\n}\n", "    // your code here\n\
    \    return nil\n}\n", "    var result []string\n    for _, v := range arr {\n\
    \        if v >= 1 && v <= 9 {\n            result = append(result, fmt.Sprintf(\"\
    %d\", v))\n        }\n    }\n    return result\n}\n", "    // your code here\n\
    \    return []string{}\n}\n", "    // TODO: implement me\n    return []string{}\n\
    }\n", "    var result []string\n    var sorted []int\n    var dict = map[int]string{\n\
    \        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"\
    Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n  \
    \      8: \"Eight\",\n        9: \"Nine\",\n    }\n\n    for _, v := range arr\
    \ {\n        if v >= 1 && v <= 9 {\n            sorted = append(sorted, v)\n \
    \       }\n    }\n\n    for i := len(sorted) - 1; i >= 0; i-- {\n        result\
    \ = append(result, dict[sorted[i]])\n    }\n\n    return result\n}\n", "    var\
    \ result []string\n    var sorted []int\n    for _, v := range arr {\n       \
    \ if v > 0 && v < 10 {\n            sorted = append(sorted, v)\n        }\n  \
    \  }\n    sort.Ints(sorted)\n    for i := len(sorted) - 1; i >= 0; i-- {\n   \
    \     result = append(result, numToString(sorted[i]))\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v < 1\
    \ || v > 9 {\n            continue\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n    }\n    return result\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    // TODO: implement\n    return []string{}\n}\n", "    var result []string\n\
    \    for _, v := range arr {\n        if v >= 1 && v <= 9 {\n            result\
    \ = append(result, fmt.Sprintf(\"%d\", v))\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    for _, v := range arr {\n        if v < 1\
    \ || v > 9 {\n            continue\n        }\n        result = append(result,\
    \ fmt.Sprintf(\"%d\", v))\n    }\n    return result\n}\n", "    // your code here\n\
    \    return nil\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
