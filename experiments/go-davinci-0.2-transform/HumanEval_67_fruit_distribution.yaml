name: HumanEval_67_fruit_distribution
language: go_test.go
prompt: "package fruit_distribution_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// In this task, you will be given a string that represents a number of apples\
  \ and oranges \n// that are distributed in a basket of fruit this basket contains\
  \ \n// apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n// the oranges and apples and an integer that represent the total\
  \ number of the fruits \n// in the basket return the number of the mango fruits\
  \ in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples and 6 oranges\"\
  , 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\", 3)\n// 2\n//\
  \ >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n// >>> fruit_distribution(\"\
  100 apples and 1 oranges\", 120)\n// 19\nfunc fruit_distribution(s string, n int)\
  \ int {\n"
tests: "func TestFruit_Distribution(t *testing.T) {\n  candidate := fruit_distribution\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"5 apples and 6 oranges\", 19),\
  \ expected: 8 },\n     { actual: candidate(\"5 apples and 6 oranges\", 21), expected:\
  \ 10 },\n     { actual: candidate(\"0 apples and 1 oranges\", 3), expected: 2 },\n\
  \     { actual: candidate(\"1 apples and 0 oranges\", 3), expected: 2 },\n     {\
  \ actual: candidate(\"2 apples and 3 oranges\", 100), expected: 95 },\n     { actual:\
  \ candidate(\"2 apples and 3 oranges\", 5), expected: 0 },\n     { actual: candidate(\"\
  1 apples and 100 oranges\", 120), expected: 19 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    return 0\n}\n", "    var apples, oranges int\n    fmt.Sscanf(s,\
    \ \"%d apples and %d oranges\", &apples, &oranges)\n    return n - apples - oranges\n\
    }\n", "    // Write your code here\n    return 0\n}\n", "    // your code here\n\
    \    return 0\n}\n", "    // your code here\n    return 0\n}\n", "    // your\
    \ code here\n    return 0\n}\n", "    return 0\n}\n", "    // your code here\n\
    \    return 0\n}\n", "    // Write your code here\n    return 0\n}\n", "    return\
    \ 0\n}\n", "    return 0\n}\n", "    // your code here\n    return 0\n}\n", " \
    \   // your code here\n    return 0\n}\n", "    return n\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "    var a, o int\n    fmt.Sscanf(s, \"%d apples and\
    \ %d oranges\", &a, &o)\n    return n - a - o\n}\n", "    // your code here\n\
    \    return 0\n}\n", "    // your code here\n    return 0\n}\n", "    // your\
    \ code here\n    return 0\n}\n", "    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
