name: HumanEval_19_sort_numbers
language: go_test.go
prompt: "package sort_numbers_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n// Valid\
  \ choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight'\
  \ and 'nine'.\n// Return the string with numbers sorted from smallest to largest\n\
  // >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunc sort_numbers(numbers\
  \ string) string {\n"
tests: "func TestSort_Numbers(t *testing.T) {\n  candidate := sort_numbers\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"\"), expected: \"\" },\n     { actual:\
  \ candidate(\"three\"), expected: \"three\" },\n     { actual: candidate(\"three\
  \ five nine\"), expected: \"three five nine\" },\n     { actual: candidate(\"five\
  \ zero four seven nine eight\"), expected: \"zero four five seven eight nine\" },\n\
  \     { actual: candidate(\"six five four three two one zero\"), expected: \"zero\
  \ one two three four five six\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n",
  "    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: implement me\n    return \"\
    \"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    nums := []int{}\n\
    \    for _, num := range strings.Split(numbers, \" \") {\n        nums = append(nums,\
    \ num_to_int(num))\n    }\n    sort.Ints(nums)\n    return ints_to_nums(nums)\n\
    }\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n",
  "    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\
    \"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n\
    }\n", "    return \"\"\n}\n", "    // TODO: implement me\n    return \"\"\n}\n",
  "    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me!\n  \
    \  return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\
    \"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n",
  "    // TODO: Implement me!\n    return \"\"\n}\n", "    return \"\"\n}\n", "  \
    \  // TODO: Implement me!\n    return \"\"\n}\n", "    return \"\"\n}\n", "  \
    \  return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    var nums []int\n    for _, num := range\
    \ strings.Split(numbers, \" \") {\n        switch num {\n        case \"zero\"\
    :\n            nums = append(nums, 0)\n        case \"one\":\n            nums\
    \ = append(nums, 1)\n        case \"two\":\n            nums = append(nums, 2)\n\
    \        case \"three\":\n            nums = append(nums, 3)\n        case \"\
    four\":\n            nums = append(nums, 4)\n        case \"five\":\n        \
    \    nums = append(nums, 5)\n        case \"six\":\n            nums = append(nums,\
    \ 6)\n        case \"seven\":\n            nums = append(nums, 7)\n        case\
    \ \"eight\":\n            nums = append(nums, 8)\n        case \"nine\":\n   \
    \         nums = append(nums, 9)\n        }\n    }\n    sort.Ints(nums)\n    var\
    \ result []string\n    for _, num := range nums {\n        switch num {\n    \
    \    case 0:\n            result = append(result, \"zero\")\n        case 1:\n\
    \            result = append(result, \"one\")\n        case 2:\n            result\
    \ = append(result, \"two\")\n        case 3:\n            result = append(result,\
    \ \"three\")\n        case 4:\n            result = append(result, \"four\")\n\
    \        case 5:\n            result = append(result, \"five\")\n        case\
    \ 6:\n            result = append(result, \"six\")\n        case 7:\n        \
    \    result = append(result, \"seven\")\n        case 8:\n            result =\
    \ append(result, \"eight\")\n        case 9:\n            result = append(result,\
    \ \"nine\")\n        }\n    }\n    return strings.Join(result, \" \")\n}\n", " \
    \   // TODO: Implement me!\n    return \"\"\n}\n", "    // TODO: Implement me\n\
    \    return \"\"\n}\n", "    // TODO: Implement me!\n    return \"\"\n}\n", " \
    \   return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: implement\
    \ me\n    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", " \
    \   return \"\"\n}\n", "    // TODO: Implement me!\n    return \"\"\n}\n", " \
    \   return \"\"\n}\n", "    return \"\"\n}\n", "    var nums = map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    var\
    \ words = make([]string, 0)\n    var num_list = make([]int, 0)\n    var result\
    \ = make([]string, 0)\n    for _, word := range strings.Split(numbers, \" \")\
    \ {\n        words = append(words, word)\n        num_list = append(num_list,\
    \ nums[word])\n    }\n    sort.Ints(num_list)\n    for _, num := range num_list\
    \ {\n        for word, num_word := range nums {\n            if num == num_word\
    \ {\n                result = append(result, word)\n            }\n        }\n\
    \    }\n    return strings.Join(result, \" \")\n}\n", "    return \"\"\n}\n",
  "    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: implement me\n   \
    \ return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me\n    return\
    \ \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", "    return \"\
    \"\n}\n", "    nums := []int{}\n    for _, num := range strings.Split(numbers,\
    \ \" \") {\n        switch num {\n        case \"zero\":\n            nums = append(nums,\
    \ 0)\n        case \"one\":\n            nums = append(nums, 1)\n        case\
    \ \"two\":\n            nums = append(nums, 2)\n        case \"three\":\n    \
    \        nums = append(nums, 3)\n        case \"four\":\n            nums = append(nums,\
    \ 4)\n        case \"five\":\n            nums = append(nums, 5)\n        case\
    \ \"six\":\n            nums = append(nums, 6)\n        case \"seven\":\n    \
    \        nums = append(nums, 7)\n        case \"eight\":\n            nums = append(nums,\
    \ 8)\n        case \"nine\":\n            nums = append(nums, 9)\n        }\n\
    \    }\n    sort.Ints(nums)\n    return strings.Join(nums, \" \")\n}\n", "   \
    \ // TODO: Implement me\n    return \"\"\n}\n", "    // TODO: implement me\n \
    \   return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    //\
    \ TODO: Implement me\n    return \"\"\n}\n", "    // TODO: Implement me!\n   \
    \ return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: implement this function\n\
    \    return \"\"\n}\n", "    var nums []int\n    for _, num := range numbers {\n\
    \        switch num {\n        case 'z':\n            nums = append(nums, 0)\n\
    \        case 'o':\n            nums = append(nums, 1)\n        case 't':\n  \
    \          nums = append(nums, 2)\n        case 'h':\n            nums = append(nums,\
    \ 3)\n        case 'f':\n            nums = append(nums, 4)\n        case 'i':\n\
    \            nums = append(nums, 5)\n        case 's':\n            nums = append(nums,\
    \ 6)\n        case 'e':\n            nums = append(nums, 7)\n        case 'n':\n\
    \            nums = append(nums, 8)\n        case 'e':\n            nums = append(nums,\
    \ 9)\n        }\n    }\n    fmt.Println(nums)\n    return \"\"\n}\n", "    //\
    \ TODO: implement me\n    return \"\"\n}\n", "    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", "    return \"\
    \"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", "    return \"\"\n\
    }\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement\
    \ me\n    return \"\"\n}\n", "    // TODO: Implement me!\n    return \"\"\n}\n",
  "    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: implement me\n   \
    \ return \"\"\n}\n", "    // TODO: implement this function\n    return \"\"\n\
    }\n", "    // TODO: implement me\n    return \"\"\n}\n", "    return \"\"\n}\n",
  "    var nums []int\n    for _, num := range numbers {\n        switch num {\n \
    \       case 'z':\n            nums = append(nums, 0)\n        case 'o':\n   \
    \         nums = append(nums, 1)\n        case 't':\n            nums = append(nums,\
    \ 2)\n        case 'h':\n            nums = append(nums, 3)\n        case 'f':\n\
    \            nums = append(nums, 4)\n        case 'i':\n            nums = append(nums,\
    \ 5)\n        case 's':\n            nums = append(nums, 6)\n        case 'e':\n\
    \            nums = append(nums, 7)\n        case 'n':\n            nums = append(nums,\
    \ 8)\n        case 'e':\n            nums = append(nums, 9)\n        }\n    }\n\
    \    fmt.Println(nums)\n    return \"\"\n}\n", "    return \"\"\n}\n", "    //\
    \ TODO: Implement me\n    return \"\"\n}\n", "    // TODO: Implement me!\n   \
    \ return \"\"\n}\n", "    // TODO: implement me\n    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\
    \"\n}\n", "    // TODO: implement me\n    return \"\"\n}\n", "    return \"\"\n\
    }\n", "    // Your code here\n    return \"\"\n}\n", "    nums := map[string]int{\n\
    \        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list\
    \ := []int{}\n    for _, num := range numbers {\n        num_list = append(num_list,\
    \ nums[string(num)])\n    }\n    fmt.Println(num_list)\n    return \"\"\n}\n",
  "    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me\n   \
    \ return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me\n    return\
    \ \"\"\n}\n", "    nums := []int{}\n    for _, num := range strings.Split(numbers,\
    \ \" \") {\n        nums = append(nums, numbers_to_int[num])\n    }\n    sort.Ints(nums)\n\
    \    result := []string{}\n    for _, num := range nums {\n        result = append(result,\
    \ int_to_numbers[num])\n    }\n    return strings.Join(result, \" \")\n}\n", " \
    \   // TODO: implement me\n    return \"\"\n}\n", "    return \"\"\n}\n", "  \
    \  return \"\"\n}\n", "    // TODO: Implement me!\n    return \"\"\n}\n", "  \
    \  return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me!\n  \
    \  return \"\"\n}\n", "    nums := []int{}\n    for _, num := range numbers {\n\
    \        switch num {\n        case 'z':\n            nums = append(nums, 0)\n\
    \        case 'o':\n            nums = append(nums, 1)\n        case 't':\n  \
    \          nums = append(nums, 2)\n        case 'h':\n            nums = append(nums,\
    \ 3)\n        case 'f':\n            nums = append(nums, 4)\n        case 'i':\n\
    \            nums = append(nums, 5)\n        case 's':\n            nums = append(nums,\
    \ 6)\n        case 'e':\n            nums = append(nums, 7)\n        case 'n':\n\
    \            nums = append(nums, 8)\n        case 'e':\n            nums = append(nums,\
    \ 9)\n        }\n    }\n    fmt.Println(nums)\n    return \"\"\n}\n", "    var\
    \ nums []int\n    for _, v := range numbers {\n        nums = append(nums, int(v))\n\
    \    }\n    return fmt.Sprintf(\"%v\", nums)\n}\n", "    // TODO: implement me\n\
    \    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me\n \
    \   return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    var\
    \ nums []int\n    var nums_str []string\n    for _, num := range numbers {\n \
    \       nums = append(nums, int(num))\n    }\n    for _, num := range nums {\n\
    \        nums_str = append(nums_str, string(num))\n    }\n    return fmt.Sprintf(\"\
    %s\", nums_str)\n}\n", "    nums := []int{}\n    for _, num := range numbers {\n\
    \        switch num {\n        case 'z':\n            nums = append(nums, 0)\n\
    \        case 'o':\n            nums = append(nums, 1)\n        case 't':\n  \
    \          nums = append(nums, 2)\n        case 'h':\n            nums = append(nums,\
    \ 3)\n        case 'f':\n            nums = append(nums, 4)\n        case 'i':\n\
    \            nums = append(nums, 5)\n        case 's':\n            nums = append(nums,\
    \ 6)\n        case 'e':\n            nums = append(nums, 7)\n        case 'n':\n\
    \            nums = append(nums, 8)\n        case 'e':\n            nums = append(nums,\
    \ 9)\n        }\n    }\n    fmt.Println(nums)\n    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\
    \n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n",
  "    // your code here\n    return \"\"\n}\n", "    nums := map[string]int{\n  \
    \      \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\"\
    : 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n      \
    \  \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    num_list\
    \ := []int{}\n    for _, num := range numbers {\n        num_list = append(num_list,\
    \ nums[string(num)])\n    }\n    return fmt.Sprintf(\"%v\", num_list)\n}\n", " \
    \   return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", "  \
    \  return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", "   \
    \ return \"\"\n}\n", "    // TODO: Implement me!\n    return \"\"\n}\n", "   \
    \ return \"\"\n}\n", "    // TODO: Implement me!\n    return \"\"\n}\n", "   \
    \ // TODO: Implement me!\n    return \"\"\n}\n", "    // TODO: Implement me\n\
    \    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", " \
    \   return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", "  \
    \  // TODO: Implement me\n    return \"\"\n}\n", "    return \"\"\n}\n", "   \
    \ // TODO: implement this function\n    return \"\"\n}\n", "    return \"\"\n\
    }\n", "    nums := []int{}\n    for _, num := range numbers {\n        switch\
    \ num {\n        case 'z':\n            nums = append(nums, 0)\n        case 'o':\n\
    \            nums = append(nums, 1)\n        case 't':\n            nums = append(nums,\
    \ 2)\n        case 'h':\n            nums = append(nums, 3)\n        case 'f':\n\
    \            nums = append(nums, 4)\n        case 'i':\n            nums = append(nums,\
    \ 5)\n        case 's':\n            nums = append(nums, 6)\n        case 'e':\n\
    \            nums = append(nums, 7)\n        case 'n':\n            nums = append(nums,\
    \ 8)\n        case 'e':\n            nums = append(nums, 9)\n        }\n    }\n\
    \    fmt.Println(nums)\n    return \"\"\n}\n", "    nums := []int{}\n    for _,\
    \ num := range numbers {\n        nums = append(nums, int(num))\n    }\n    fmt.Println(nums)\n\
    \    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: implement\
    \ me\n    return \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", " \
    \   return \"\"\n}\n", "    // TODO: implement me\n    return \"\"\n}\n", "  \
    \  return \"\"\n}\n", "    // TODO: Implement me!\n    return \"\"\n}\n", "  \
    \  return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me\n   \
    \ return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me\n    return\
    \ \"\"\n}\n", "    // TODO: implement me\n    return \"\"\n}\n", "    // TODO:\
    \ Implement me!\n    return \"\"\n}\n", "    return \"\"\n}\n", "    var nums\
    \ []int\n    for _, num := range numbers {\n        nums = append(nums, int(num))\n\
    \    }\n    for i := 0; i < len(nums); i++ {\n        for j := i + 1; j < len(nums);\
    \ j++ {\n            if nums[i] > nums[j] {\n                nums[i], nums[j]\
    \ = nums[j], nums[i]\n            }\n        }\n    }\n    return fmt.Sprintf(\"\
    %v\", nums)\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement\
    \ me\n    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n",
  "    return \"\"\n}\n", "    // TODO: Implement me\n    return \"\"\n}\n", "   \
    \ // TODO: Implement me\n    return \"\"\n}\n", "    return \"\"\n}\n", "    return\
    \ \"\"\n}\n", "    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: implement\
    \ me\n    return \"\"\n}\n", "    return \"\"\n}\n", "    // TODO: Implement me!\n\
    \    return \"\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
