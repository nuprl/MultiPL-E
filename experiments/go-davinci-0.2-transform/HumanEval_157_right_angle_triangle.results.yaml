language: go_test.go
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a*a + b*b == c*c {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmptnxyf3pq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a*a + b*b == c*c {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmptnxyf3pq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // TODO: Implement me\n    return false\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpi6owh3sf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpi6owh3sf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpi6owh3sf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpi6owh3sf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpi6owh3sf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpi6owh3sf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    return a*a + b*b == c*c\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmpu44c_uho_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    return a*a + b*b == c*c\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmpu44c_uho_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // TODO: implement this function\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpjc01qf0k_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpjc01qf0k_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpjc01qf0k_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpjc01qf0k_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpjc01qf0k_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpjc01qf0k_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // TODO: Implement me\n    return false\n}\n\nfunc\
    \ TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpi6owh3sf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpi6owh3sf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpi6owh3sf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpi6owh3sf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpi6owh3sf_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpi6owh3sf_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a * a + b * b == c * c {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmpq2wfqwrh_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a < b {\n        a, b = b, a\n    }\n    if a <\
    \ c {\n        a, c = c, a\n    }\n    return a*a == b*b + c*c\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    return a*a + b*b == c*c\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmpu44c_uho_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a*a + b*b == c*c {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmptnxyf3pq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a*a + b*b == c*c {\n        return true\n    }\
    \ else {\n        return false\n    }\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmpl6aipm8g_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a * a + b * b == c * c {\n        return true\n\
    \    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n\
    \  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmpq2wfqwrh_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    return a*a + b*b == c*c\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmpu44c_uho_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a*a + b*b == c*c {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmptnxyf3pq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    return a*a + b*b == c*c\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmpu44c_uho_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a <= 0 || b <= 0 || c <= 0 {\n        return false\n\
    \    }\n    if a*a + b*b == c*c {\n        return true\n    }\n    if a*a + c*c\
    \ == b*b {\n        return true\n    }\n    if b*b + c*c == a*a {\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T)\
    \ {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false\
    \ },\n     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a*a + b*b == c*c {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmptnxyf3pq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b && a > c {\n        return a * a == b * b + c * c\n    }\
    \ else if b > a && b > c {\n        return b * b == a * a + c * c\n    } else\
    \ {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a*a + b*b == c*c {\n        return true\n    }\n\
    \    return false\n}\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate\
    \ := right_angle_triangle\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4,\
    \ 5), expected: true },\n     { actual: candidate(1, 2, 3), expected: false },\n\
    \     { actual: candidate(10, 6, 8), expected: true },\n     { actual: candidate(2,\
    \ 2, 2), expected: false },\n     { actual: candidate(7, 24, 25), expected: true\
    \ },\n     { actual: candidate(10, 5, 7), expected: false },\n     { actual: candidate(5,\
    \ 12, 13), expected: true },\n     { actual: candidate(15, 8, 17), expected: true\
    \ },\n     { actual: candidate(48, 55, 73), expected: true },\n     { actual:\
    \ candidate(1, 1, 1), expected: false },\n     { actual: candidate(2, 2, 10),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmptnxyf3pq_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // TODO: implement this function\n    return false\n\
    }\n\nfunc TestRight_Angle_Triangle(t *testing.T) {\n  candidate := right_angle_triangle\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: true },\n \
    \    { actual: candidate(1, 2, 3), expected: false },\n     { actual: candidate(10,\
    \ 6, 8), expected: true },\n     { actual: candidate(2, 2, 2), expected: false\
    \ },\n     { actual: candidate(7, 24, 25), expected: true },\n     { actual: candidate(10,\
    \ 5, 7), expected: false },\n     { actual: candidate(5, 12, 13), expected: true\
    \ },\n     { actual: candidate(15, 8, 17), expected: true },\n     { actual: candidate(48,\
    \ 55, 73), expected: true },\n     { actual: candidate(1, 1, 1), expected: false\
    \ },\n     { actual: candidate(2, 2, 10), expected: false },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpjc01qf0k_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpjc01qf0k_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpjc01qf0k_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpjc01qf0k_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpjc01qf0k_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpjc01qf0k_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a == 0 || b == 0 || c == 0 {\n        return false\n\
    \    }\n    if a > b && a > c {\n        return a * a == b * b + c * c\n    }\
    \ else if b > a && b > c {\n        return b * b == a * a + c * c\n    } else\
    \ {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 0
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    if a > b && a > c {\n        return a * a == b * b\
    \ + c * c\n    } else if b > a && b > c {\n        return b * b == a * a + c *\
    \ c\n    } else {\n        return c * c == a * a + b * b\n    }\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmp1ocks2v5_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmp1ocks2v5_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    return a*a + b*b == c*c\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__2\
    \ (0.00s)\n        tmpu44c_uho_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073481
- exit_code: 1
  program: "package right_angle_triangle_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// Given the lengths of the three sides of a triangle. Return True\
    \ if the three\n// sides form a right-angled triangle, False otherwise.\n// A\
    \ right-angled triangle is a triangle in which one angle is right angle or \n\
    // 90 degree.\n// Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n//\
    \ >>> right_angle_triangle(1, 2, 3)\n// false\nfunc right_angle_triangle(a int,\
    \ b int, c int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestRight_Angle_Triangle(t\
    \ *testing.T) {\n  candidate := right_angle_triangle\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(3, 4, 5), expected: true },\n     { actual: candidate(1,\
    \ 2, 3), expected: false },\n     { actual: candidate(10, 6, 8), expected: true\
    \ },\n     { actual: candidate(2, 2, 2), expected: false },\n     { actual: candidate(7,\
    \ 24, 25), expected: true },\n     { actual: candidate(10, 5, 7), expected: false\
    \ },\n     { actual: candidate(5, 12, 13), expected: true },\n     { actual: candidate(15,\
    \ 8, 17), expected: true },\n     { actual: candidate(48, 55, 73), expected: true\
    \ },\n     { actual: candidate(1, 1, 1), expected: false },\n     { actual: candidate(2,\
    \ 2, 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestRight_Angle_Triangle (0.00s)\n    --- FAIL: TestRight_Angle_Triangle/test_num__0\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__2 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__4\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__6 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestRight_Angle_Triangle/test_num__7\
    \ (0.00s)\n        tmpq70woj3v_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestRight_Angle_Triangle/test_num__8 (0.00s)\n        tmpq70woj3v_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073481
