name: HumanEval_114_minSubArraySum
language: go_test.go
prompt: "package minSubArraySum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given an array of integers nums, find the minimum sum of any non-empty sub-array\n\
  // of nums.\n// Example\n// >>> minSubArraySum([]int{2, 3, 4, 1, 2, 4})\n// 1\n\
  // >>> minSubArraySum([]int{-1, -2, -3})\n// -6\nfunc minSubArraySum(nums []int)\
  \ int {\n"
tests: "func TestMinsubarraysum(t *testing.T) {\n  candidate := minSubArraySum\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate([]int{2, 3, 4, 1, 2, 4}), expected:\
  \ 1 },\n     { actual: candidate([]int{-1, -2, -3}), expected: -6 },\n     { actual:\
  \ candidate([]int{-1, -2, -3, 2, -10}), expected: -14 },\n     { actual: candidate([]int{-9999999999999999}),\
  \ expected: -9999999999999999 },\n     { actual: candidate([]int{0, 10, 20, 1000000}),\
  \ expected: 0 },\n     { actual: candidate([]int{-1, -2, -3, 10, -5}), expected:\
  \ -6 },\n     { actual: candidate([]int{100, -1, -2, -3, 10, -5}), expected: -6\
  \ },\n     { actual: candidate([]int{10, 11, 13, 8, 3, 4}), expected: 3 },\n   \
  \  { actual: candidate([]int{100, -33, 32, -1, 0, -2}), expected: -33 },\n     {\
  \ actual: candidate([]int{-10}), expected: -10 },\n     { actual: candidate([]int{7}),\
  \ expected: 7 },\n     { actual: candidate([]int{1, -1}), expected: -1 },\n   }\n\
  \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if sum > 0\
    \ {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < min {\n            min = sum\n        }\n    }\n\
    \    return min\n}\n", "    if len(nums) == 0 {\n        return 0\n    }\n   \
    \ minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n\
    \        sum += nums[i]\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n", "    minSum := nums[0]\n    sum := 0\n    for _, num := range\
    \ nums {\n        sum += num\n        if sum < minSum {\n            minSum =\
    \ sum\n        }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n\
    \    return minSum\n}\n", "    if len(nums) == 0 {\n        return 0\n    }\n\
    \    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n       \
    \ sum += num\n        if sum < minSum {\n            minSum = sum\n        }\n\
    \        if sum > 0 {\n            sum = 0\n        }\n    }\n    return minSum\n\
    }\n", "    minSum := nums[0]\n    sum := 0\n    for _, num := range nums {\n \
    \       sum += num\n        if sum < minSum {\n            minSum = sum\n    \
    \    }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ minSum\n}\n", "    if len(nums) == 0 {\n        return 0\n    }\n    minSum\
    \ := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n     \
    \   if sum < 0 {\n            sum = nums[i]\n        } else {\n            sum\
    \ += nums[i]\n        }\n        if sum < minSum {\n            minSum = sum\n\
    \        }\n    }\n    return minSum\n}\n", "    minSum := nums[0]\n    sum :=\
    \ 0\n    for _, v := range nums {\n        sum += v\n        if sum < minSum {\n\
    \            minSum = sum\n        }\n        if sum > 0 {\n            sum =\
    \ 0\n        }\n    }\n    return minSum\n}\n", "    if len(nums) == 0 {\n   \
    \     return 0\n    }\n    minSum := nums[0]\n    sum := nums[0]\n    for i :=\
    \ 1; i < len(nums); i++ {\n        sum += nums[i]\n        if sum < minSum {\n\
    \            minSum = sum\n        }\n        if sum > 0 {\n            sum =\
    \ 0\n        }\n    }\n    return minSum\n}\n", "    if len(nums) == 0 {\n   \
    \     return 0\n    }\n    min := nums[0]\n    sum := nums[0]\n    for i := 1;\
    \ i < len(nums); i++ {\n        if sum > 0 {\n            sum = nums[i]\n    \
    \    } else {\n            sum += nums[i]\n        }\n        if sum < min {\n\
    \            min = sum\n        }\n    }\n    return min\n}\n", "    if len(nums)\
    \ == 0 {\n        return 0\n    }\n    minSum := nums[0]\n    sum := nums[0]\n\
    \    for i := 1; i < len(nums); i++ {\n        if sum > 0 {\n            sum =\
    \ nums[i]\n        } else {\n            sum += nums[i]\n        }\n        if\
    \ sum < minSum {\n            minSum = sum\n        }\n    }\n    return minSum\n\
    }\n", "    if len(nums) == 0 {\n        return 0\n    }\n    min := nums[0]\n\
    \    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        sum += nums[i]\n\
    \        if sum < min {\n            min = sum\n        }\n        if sum > 0\
    \ {\n            sum = 0\n        }\n    }\n    return min\n}\n", "    if len(nums)\
    \ == 0 {\n        return 0\n    }\n    if len(nums) == 1 {\n        return nums[0]\n\
    \    }\n    min := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < min {\n            min\
    \ = sum\n        }\n    }\n    return min\n}\n", "    minSum := nums[0]\n    sum\
    \ := 0\n    for _, v := range nums {\n        sum += v\n        if sum < minSum\
    \ {\n            minSum = sum\n        }\n        if sum > 0 {\n            sum\
    \ = 0\n        }\n    }\n    return minSum\n}\n", "    if len(nums) == 0 {\n \
    \       return 0\n    }\n    min := nums[0]\n    sum := nums[0]\n    for i :=\
    \ 1; i < len(nums); i++ {\n        sum += nums[i]\n        if sum < min {\n  \
    \          min = sum\n        }\n        if sum > 0 {\n            sum = 0\n \
    \       }\n    }\n    return min\n}\n", "    if len(nums) == 0 {\n        return\
    \ 0\n    }\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        sum += nums[i]\n        if sum < minSum {\n            minSum\
    \ = sum\n        }\n        if sum > 0 {\n            sum = 0\n        }\n   \
    \ }\n    return minSum\n}\n", "    minSum := nums[0]\n    sum := 0\n    for _,\
    \ v := range nums {\n        sum += v\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n        if sum > 0 {\n            sum = 0\n       \
    \ }\n    }\n    return minSum\n}\n", "    if len(nums) == 0 {\n        return\
    \ 0\n    }\n    min := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < min {\n            min\
    \ = sum\n        }\n    }\n    return min\n}\n", "    if len(nums) == 0 {\n  \
    \      return 0\n    }\n    min := nums[0]\n    sum := 0\n    for _, v := range\
    \ nums {\n        sum += v\n        if sum < min {\n            min = sum\n  \
    \      }\n        if sum > 0 {\n            sum = 0\n        }\n    }\n    return\
    \ min\n}\n", "    if len(nums) == 0 {\n        return 0\n    }\n    minSum :=\
    \ nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums); i++ {\n        if\
    \ sum < 0 {\n            sum = nums[i]\n        } else {\n            sum += nums[i]\n\
    \        }\n        if sum < minSum {\n            minSum = sum\n        }\n \
    \   }\n    return minSum\n}\n", "    if len(nums) == 0 {\n        return 0\n \
    \   }\n    minSum := nums[0]\n    sum := nums[0]\n    for i := 1; i < len(nums);\
    \ i++ {\n        if sum > 0 {\n            sum = nums[i]\n        } else {\n \
    \           sum += nums[i]\n        }\n        if sum < minSum {\n           \
    \ minSum = sum\n        }\n    }\n    return minSum\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
