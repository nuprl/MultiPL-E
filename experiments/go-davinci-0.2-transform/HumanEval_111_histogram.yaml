name: HumanEval_111_histogram
language: go_test.go
prompt: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given a string representing a space separated lowercase letters, return a dictionary\n\
  // of the letter with the most repetition and containing the corresponding count.\n\
  // If several letters have the same occurrence, return all of them.\n// Example:\n\
  // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n//\
  \ >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
  a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b\
  \ a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
  func histogram(test string) map[string]int {\n"
tests: "func TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\"\
  : 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
  a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
  a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
  r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
  \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
  \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n\
  \     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual: candidate(\"\
  a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // TODO: Implement me\n    return map[string]int{}\n}\n", "   \
    \ // TODO: Implement\n    return nil\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n", "    // TODO: Implement the function\n\
    \    return map[string]int{}\n}\n", "    // TODO: implement\n    return nil\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    // TODO: implement\n\
    \    return map[string]int{}\n}\n", "    var result = make(map[string]int)\n \
    \   var max int\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    histogram := make(map[string]int)\n    for _, letter := range test {\n    \
    \    histogram[string(letter)]++\n    }\n    return histogram\n}\n", "    m :=\
    \ make(map[string]int)\n    for _, v := range test {\n        m[string(v)]++\n\
    \    }\n    return m\n}\n", "    // TODO: implement this function\n    return\
    \ map[string]int{}\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    return map[string]int{}\n}\n", "    histogram := make(map[string]int)\n   \
    \ for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    // TODO: Implement me\n    return nil\n}\n",
  "    var histogram = make(map[string]int)\n    var max = 0\n    for _, letter :=\
    \ range test {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n        }\n    }\n   \
    \ var result = make(map[string]int)\n    for key, value := range histogram {\n\
    \        if value == max {\n            result[key] = value\n        }\n    }\n\
    \    return result\n}\n", "    // TODO: implement this function\n    return nil\n\
    }\n", "    // TODO: implement this function\n    return nil\n}\n", "    // TODO:\
    \ Implement me\n    return map[string]int{}\n}\n", "    return map[string]int{}\n\
    }\n", "    hist := make(map[string]int)\n    for _, letter := range test {\n \
    \       hist[string(letter)] += 1\n    }\n    return hist\n}\n", "    // TODO:\
    \ Implement me\n    return nil\n}\n", "    var result map[string]int = make(map[string]int)\n\
    \    var max int = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    return map[string]int{}\n}\n", "    // TODO: Implement\n    return nil\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    return nil\n}\n", "    var dict = make(map[string]int)\n    var max = 0\n \
    \   var max_keys []string\n    for _, letter := range test {\n        dict[string(letter)]\
    \ += 1\n        if dict[string(letter)] > max {\n            max = dict[string(letter)]\n\
    \            max_keys = []string{string(letter)}\n        } else if dict[string(letter)]\
    \ == max {\n            max_keys = append(max_keys, string(letter))\n        }\n\
    \    }\n    var result = make(map[string]int)\n    for _, key := range max_keys\
    \ {\n        result[key] = max\n    }\n    return result\n}\n", "    return map[string]int{}\n\
    }\n", "    return map[string]int{}\n}\n", "    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n", "    var result = make(map[string]int)\n    var max = 0\n\
    \    for _, v := range test {\n        result[string(v)]++\n        if result[string(v)]\
    \ > max {\n            max = result[string(v)]\n        }\n    }\n    var final\
    \ = make(map[string]int)\n    for k, v := range result {\n        if v == max\
    \ {\n            final[k] = v\n        }\n    }\n    return final\n}\n", "   \
    \ return map[string]int{}\n}\n", "    // TODO: Implement me!\n    return nil\n\
    }\n", "    // TODO: implement this function\n    return nil\n}\n", "    hist :=\
    \ make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    // TODO: implement this function\n    return\
    \ map[string]int{}\n}\n", "    return map[string]int{}\n}\n", "    // TODO: implement\
    \ me\n    return nil\n}\n", "    var result = make(map[string]int)\n    var max\
    \ int\n    for _, v := range test {\n        if _, ok := result[string(v)]; ok\
    \ {\n            result[string(v)] += 1\n        } else {\n            result[string(v)]\
    \ = 1\n        }\n        if result[string(v)] > max {\n            max = result[string(v)]\n\
    \        }\n    }\n    for k, v := range result {\n        if v != max {\n   \
    \         delete(result, k)\n        }\n    }\n    return result\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    var result = make(map[string]int)\n    var\
    \ max = 0\n    for _, v := range test {\n        result[string(v)]++\n       \
    \ if result[string(v)] > max {\n            max = result[string(v)]\n        }\n\
    \    }\n    for k, v := range result {\n        if v != max {\n            delete(result,\
    \ k)\n        }\n    }\n    return result\n}\n", "    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    return map[string]int{}\n}\n", "    // TODO:\
    \ implement\n    return nil\n}\n", "    // TODO: implement me\n    return map[string]int{}\n\
    }\n", "    // TODO: implement this function\n    return nil\n}\n", "    // TODO:\
    \ implement\n    return nil\n}\n", "    // TODO: implement this function\n   \
    \ return nil\n}\n", "    // TODO: Implement me\n    return nil\n}\n", "    var\
    \ histogram = make(map[string]int)\n    var max int\n    var maxLetters []string\n\
    \n    for _, letter := range test {\n        histogram[string(letter)]++\n   \
    \     if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \            maxLetters = []string{string(letter)}\n        } else if histogram[string(letter)]\
    \ == max {\n            maxLetters = append(maxLetters, string(letter))\n    \
    \    }\n    }\n\n    for _, letter := range maxLetters {\n        histogram[letter]\
    \ = max\n    }\n\n    return histogram\n}\n", "    var histogram = make(map[string]int)\n\
    \    var max int\n    var maxLetters []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxLetters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            maxLetters = append(maxLetters, string(letter))\n        }\n\
    \    }\n\n    for _, letter := range maxLetters {\n        histogram[letter] =\
    \ max\n    }\n\n    return histogram\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n", "    //\
    \ TODO: implement\n    return nil\n}\n", "    return map[string]int{}\n}\n", " \
    \   // TODO: implement\n    return nil\n}\n", "    return map[string]int{}\n}\n",
  "    hist := make(map[string]int)\n    for _, char := range test {\n        hist[string(char)]++\n\
    \    }\n    return hist\n}\n", "    var histogram = make(map[string]int)\n   \
    \ var max = 0\n    var max_keys []string\n\n    for _, letter := range test {\n\
    \        histogram[string(letter)] += 1\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            max_keys =\
    \ []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            max_keys = append(max_keys, string(letter))\n        }\n    }\n\
    \n    var result = make(map[string]int)\n    for _, key := range max_keys {\n\
    \        result[key] = max\n    }\n\n    return result\n}\n", "    var result\
    \ = make(map[string]int)\n    var max = 0\n    for _, letter := range test {\n\
    \        result[string(letter)] += 1\n        if result[string(letter)] > max\
    \ {\n            max = result[string(letter)]\n        }\n    }\n    for key,\
    \ value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    var histogram = make(map[string]int)\n\
    \    var max int\n    var maxLetters []string\n\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxLetters\
    \ = []string{string(letter)}\n        } else if histogram[string(letter)] == max\
    \ {\n            maxLetters = append(maxLetters, string(letter))\n        }\n\
    \    }\n\n    var result = make(map[string]int)\n    for _, letter := range maxLetters\
    \ {\n        result[letter] = max\n    }\n\n    return result\n}\n", "    // TODO:\
    \ Implement me\n    return nil\n}\n", "    var result map[string]int = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n", "    // your code here\n    return nil\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    var result = make(map[string]int)\n    var\
    \ max = 0\n    for _, v := range test {\n        result[string(v)]++\n       \
    \ if result[string(v)] > max {\n            max = result[string(v)]\n        }\n\
    \    }\n    var final = make(map[string]int)\n    for k, v := range result {\n\
    \        if v == max {\n            final[k] = v\n        }\n    }\n    return\
    \ final\n}\n", "    // TODO: implement\n    return nil\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    var result = make(map[string]int)\n    var max = 0\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n       \
    \ if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    // TODO: Implement me\n    return nil\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n", "    histogram := make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    histogram := make(map[string]int)\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n    }\n    return histogram\n}\n", " \
    \   // TODO: Implement me\n    return nil\n}\n", "    // TODO: implement me\n\
    \    return map[string]int{}\n}\n", "    var result map[string]int\n    result\
    \ = make(map[string]int)\n    for _, v := range test {\n        result[string(v)]++\n\
    \    }\n    return result\n}\n", "    var result = make(map[string]int)\n    var\
    \ max = 0\n    for _, letter := range test {\n        result[string(letter)] +=\
    \ 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    return map[string]int{}\n}\n", "    histogram := make(map[string]int)\n   \
    \ for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    return nil\n}\n", "    // TODO: Implement me\n    return map[string]int{}\n\
    }\n", "    hist := make(map[string]int)\n    for _, c := range test {\n      \
    \  hist[string(c)] += 1\n    }\n    return hist\n}\n", "    // TODO: Implement\
    \ me\n    return nil\n}\n", "    return map[string]int{}\n}\n", "    return map[string]int{}\n\
    }\n", "    // TODO: implement this function\n    return map[string]int{}\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n", "    // TODO: Implement me\n    return nil\n}\n", " \
    \   var histogram = make(map[string]int)\n    var max = 0\n    for _, letter :=\
    \ range test {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n        }\n    }\n   \
    \ var result = make(map[string]int)\n    for letter, count := range histogram\
    \ {\n        if count == max {\n            result[letter] = count\n        }\n\
    \    }\n    return result\n}\n", "    var histogram = make(map[string]int)\n \
    \   for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    var result map[string]int = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)] += 1\n    }\n\
    \    return result\n}\n", "    var result = make(map[string]int)\n    var max\
    \ = 0\n    for _, v := range test {\n        if _, ok := result[string(v)]; ok\
    \ {\n            result[string(v)] += 1\n        } else {\n            result[string(v)]\
    \ = 1\n        }\n        if result[string(v)] > max {\n            max = result[string(v)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n", "    var histogram = make(map[string]int)\n    for _,\
    \ letter := range test {\n        histogram[string(letter)]++\n    }\n    return\
    \ histogram\n}\n", "    histogram := make(map[string]int)\n    for _, letter :=\
    \ range test {\n        histogram[string(letter)]++\n    }\n    return histogram\n\
    }\n", "    var result = make(map[string]int)\n    var max = 0\n    for _, v :=\
    \ range test {\n        if _, ok := result[string(v)]; ok {\n            result[string(v)]++\n\
    \        } else {\n            result[string(v)] = 1\n        }\n        if result[string(v)]\
    \ > max {\n            max = result[string(v)]\n        }\n    }\n    var final\
    \ = make(map[string]int)\n    for k, v := range result {\n        if v == max\
    \ {\n            final[k] = v\n        }\n    }\n    return final\n}\n", "   \
    \ histogram := make(map[string]int)\n    for _, letter := range test {\n     \
    \   histogram[string(letter)] += 1\n    }\n    return histogram\n}\n", "    //\
    \ TODO: Implement me\n    return nil\n}\n", "    // TODO: Implement me!\n    return\
    \ map[string]int{}\n}\n", "    // TODO: implement this function\n    return nil\n\
    }\n", "    // TODO: Implement me\n    return nil\n}\n", "    // Your code here\n\
    \    return nil\n}\n", "    return map[string]int{}\n}\n", "    // TODO: implement\
    \ this function\n    return nil\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    var result map[string]int = make(map[string]int)\n    var max int = 0\n   \
    \ for _, value := range test {\n        if _, ok := result[string(value)]; ok\
    \ {\n            result[string(value)]++\n        } else {\n            result[string(value)]\
    \ = 1\n        }\n        if result[string(value)] > max {\n            max =\
    \ result[string(value)]\n        }\n    }\n    for key, value := range result\
    \ {\n        if value != max {\n            delete(result, key)\n        }\n \
    \   }\n    return result\n}\n", "    // TODO: Implement me\n    return nil\n}\n",
  "    hist := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n", "    var histogram = make(map[string]int)\n    var max =\
    \ 0\n    var maxLetters = make(map[string]int)\n    for _, letter := range test\
    \ {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n            maxLetters\
    \ = make(map[string]int)\n            maxLetters[string(letter)] = max\n     \
    \   } else if histogram[string(letter)] == max {\n            maxLetters[string(letter)]\
    \ = max\n        }\n    }\n    return maxLetters\n}\n", "    // TODO: Implement\
    \ me\n    return nil\n}\n", "    return map[string]int{}\n}\n", "    return map[string]int{}\n\
    }\n", "    // TODO: implement this function\n    return map[string]int{}\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    var result = make(map[string]int)\n\
    \    for _, letter := range test {\n        result[string(letter)]++\n    }\n\
    \    return result\n}\n", "    var result = make(map[string]int)\n    var max\
    \ = 0\n    for _, value := range test {\n        result[string(value)]++\n   \
    \     if result[string(value)] > max {\n            max = result[string(value)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    histogram := make(map[string]int)\n    for _, letter := range test {\n    \
    \    histogram[string(letter)]++\n    }\n    return histogram\n}\n", "    var\
    \ result = make(map[string]int)\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \    }\n    return result\n}\n", "    return map[string]int{}\n}\n", "    // TODO:\
    \ implement\n    return map[string]int{}\n}\n", "    histogram := make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    return map[string]int{}\n}\n", "    // TODO:\
    \ implement this function\n    return nil\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    var final = make(map[string]int)\n    for k, v := range\
    \ result {\n        if v == max {\n            final[k] = v\n        }\n    }\n\
    \    return final\n}\n", "    hist := make(map[string]int)\n    for _, c := range\
    \ test {\n        hist[string(c)]++\n    }\n    return hist\n}\n", "    var histogram\
    \ = make(map[string]int)\n    var max int\n    var maxLetters []string\n\n   \
    \ for _, letter := range test {\n        histogram[string(letter)]++\n       \
    \ if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \            maxLetters = []string{string(letter)}\n        } else if histogram[string(letter)]\
    \ == max {\n            maxLetters = append(maxLetters, string(letter))\n    \
    \    }\n    }\n\n    for _, letter := range maxLetters {\n        histogram[letter]\
    \ = max\n    }\n\n    return histogram\n}\n", "    return map[string]int{}\n}\n",
  "    histogram := make(map[string]int)\n    for _, letter := range test {\n    \
    \    histogram[string(letter)]++\n    }\n    return histogram\n}\n", "    var\
    \ result = make(map[string]int)\n    var max int\n    for _, v := range test {\n\
    \        result[string(v)]++\n        if result[string(v)] > max {\n         \
    \   max = result[string(v)]\n        }\n    }\n    for k, v := range result {\n\
    \        if v != max {\n            delete(result, k)\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO: Implement the function\n    return nil\n}\n", " \
    \   var result map[string]int\n    result = make(map[string]int)\n    for _, value\
    \ := range test {\n        result[string(value)]++\n    }\n    return result\n\
    }\n", "    var result = make(map[string]int)\n    var max = 0\n    var max_letters\
    \ = make([]string, 0)\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \            max_letters = []string{string(letter)}\n        } else if result[string(letter)]\
    \ == max {\n            max_letters = append(max_letters, string(letter))\n  \
    \      }\n    }\n    for _, letter := range max_letters {\n        result[letter]\
    \ = max\n    }\n    return result\n}\n", "    // TODO: implement this function\n\
    \    return map[string]int{}\n}\n", "    var result = make(map[string]int)\n \
    \   var max = 0\n    for _, letter := range test {\n        if _, ok := result[string(letter)];\
    \ ok {\n            result[string(letter)] += 1\n        } else {\n          \
    \  result[string(letter)] = 1\n        }\n        if result[string(letter)] >\
    \ max {\n            max = result[string(letter)]\n        }\n    }\n    var final\
    \ = make(map[string]int)\n    for letter, count := range result {\n        if\
    \ count == max {\n            final[letter] = count\n        }\n    }\n    return\
    \ final\n}\n", "    letters := make(map[string]int)\n    for _, letter := range\
    \ test {\n        letters[string(letter)] += 1\n    }\n    return letters\n}\n",
  "    return nil\n}\n", "    return map[string]int{}\n}\n", "    hist := make(map[string]int)\n\
    \    for _, char := range test {\n        hist[string(char)]++\n    }\n    return\
    \ hist\n}\n", "    return map[string]int{}\n}\n", "    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n", "    return map[string]int{}\n}\n", "    return map[string]int{}\n\
    }\n", "    var histogram = make(map[string]int)\n    var max = 0\n    var maxKeys\
    \ []string\n\n    for _, letter := range test {\n        histogram[string(letter)]++\n\
    \        if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \            maxKeys = []string{string(letter)}\n        } else if histogram[string(letter)]\
    \ == max {\n            maxKeys = append(maxKeys, string(letter))\n        }\n\
    \    }\n\n    var result = make(map[string]int)\n    for _, key := range maxKeys\
    \ {\n        result[key] = max\n    }\n\n    return result\n}\n", "    var hist\
    \ = make(map[string]int)\n    var max = 0\n    for _, c := range test {\n    \
    \    hist[string(c)]++\n        if hist[string(c)] > max {\n            max =\
    \ hist[string(c)]\n        }\n    }\n    var result = make(map[string]int)\n \
    \   for k, v := range hist {\n        if v == max {\n            result[k] = v\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: implement the function\n\
    \    return map[string]int{}\n}\n", "    var result = make(map[string]int)\n \
    \   var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    return map[string]int{}\n}\n", "    var result = make(map[string]int)\n   \
    \ var max = 0\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    return map[string]int{}\n}\n", "    var result = make(map[string]int)\n   \
    \ var max = 0\n    for _, char := range test {\n        result[string(char)]++\n\
    \        if result[string(char)] > max {\n            max = result[string(char)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    return nil\n}\n", "    // TODO: Implement\n    return nil\n}\n", "    hist\
    \ := make(map[string]int)\n    for _, letter := range test {\n        hist[string(letter)]++\n\
    \    }\n    return hist\n}\n", "    var result = make(map[string]int)\n    var\
    \ max int\n    var max_keys []string\n    for _, v := range test {\n        result[string(v)]++\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \           max_keys = []string{string(v)}\n        } else if result[string(v)]\
    \ == max {\n            max_keys = append(max_keys, string(v))\n        }\n  \
    \  }\n    for _, v := range max_keys {\n        result[v] = max\n    }\n    return\
    \ result\n}\n", "    // Your code here\n    return nil\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    return map[string]int{}\n}\n", "    var histogram\
    \ = make(map[string]int)\n    var max = 0\n    var maxKeys []string\n\n    for\
    \ _, letter := range test {\n        histogram[string(letter)] += 1\n        if\
    \ histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \            maxKeys = []string{string(letter)}\n        } else if histogram[string(letter)]\
    \ == max {\n            maxKeys = append(maxKeys, string(letter))\n        }\n\
    \    }\n\n    var result = make(map[string]int)\n    for _, key := range maxKeys\
    \ {\n        result[key] = max\n    }\n\n    return result\n}\n", "    var result\
    \ = make(map[string]int)\n    var max = 0\n    for _, v := range test {\n    \
    \    result[string(v)]++\n        if result[string(v)] > max {\n            max\
    \ = result[string(v)]\n        }\n    }\n    for k, v := range result {\n    \
    \    if v != max {\n            delete(result, k)\n        }\n    }\n    return\
    \ result\n}\n", "    var result = make(map[string]int)\n    var max = 0\n    for\
    \ _, letter := range test {\n        result[string(letter)]++\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n        }\n    }\n    for\
    \ key, value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    // Write your code here\n    return nil\n}\n", "    // TODO: implement this\
    \ function\n    return nil\n}\n", "    var result = make(map[string]int)\n   \
    \ var max = 0\n    var max_letters = make([]string, 0)\n    for _, letter := range\
    \ test {\n        result[string(letter)] += 1\n        if result[string(letter)]\
    \ > max {\n            max = result[string(letter)]\n            max_letters =\
    \ []string{string(letter)}\n        } else if result[string(letter)] == max {\n\
    \            max_letters = append(max_letters, string(letter))\n        }\n  \
    \  }\n    for _, letter := range max_letters {\n        result[letter] = max\n\
    \    }\n    return result\n}\n", "    // TODO: implement this function\n    return\
    \ nil\n}\n", "    return nil\n}\n", "    return nil\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, v := range test {\n        result[string(v)] += 1\n\
    \        if result[string(v)] > max {\n            max = result[string(v)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n", "    if\
    \ len(test) == 0 {\n        return map[string]int{}\n    }\n    hist := make(map[string]int)\n\
    \    for _, letter := range test {\n        hist[string(letter)]++\n    }\n  \
    \  return hist\n}\n", "    // TODO: Implement\n    return nil\n}\n", "    var\
    \ histogram map[string]int\n    histogram = make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)] += 1\n    }\n    return histogram\n\
    }\n", "    return map[string]int{}\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        if _, ok := result[string(letter)];\
    \ ok {\n            result[string(letter)] += 1\n        } else {\n          \
    \  result[string(letter)] = 1\n        }\n        if result[string(letter)] >\
    \ max {\n            max = result[string(letter)]\n        }\n    }\n    var final\
    \ = make(map[string]int)\n    for key, value := range result {\n        if value\
    \ == max {\n            final[key] = value\n        }\n    }\n    return final\n\
    }\n", "    return nil\n}\n", "    return map[string]int{}\n}\n", "    // TODO:\
    \ implement\n    return nil\n}\n", "    // TODO: implement this function\n   \
    \ return map[string]int{}\n}\n", "    return map[string]int{}\n}\n", "    var\
    \ result = make(map[string]int)\n    var max = 0\n    for _, letter := range test\
    \ {\n        result[string(letter)]++\n        if result[string(letter)] > max\
    \ {\n            max = result[string(letter)]\n        }\n    }\n    for key,\
    \ value := range result {\n        if value != max {\n            delete(result,\
    \ key)\n        }\n    }\n    return result\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, value := range test {\n        result[string(value)]++\n\
    \        if result[string(value)] > max {\n            max = result[string(value)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n", "    return nil\n}\n", "    var histogram\
    \ = make(map[string]int)\n    var max = 0\n    var max_letters = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)] += 1\n \
    \       if histogram[string(letter)] > max {\n            max = histogram[string(letter)]\n\
    \            max_letters = make(map[string]int)\n            max_letters[string(letter)]\
    \ = max\n        } else if histogram[string(letter)] == max {\n            max_letters[string(letter)]\
    \ = max\n        }\n    }\n    return max_letters\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, c := range test {\n        result[string(c)]++\n\
    \        if result[string(c)] > max {\n            max = result[string(c)]\n \
    \       }\n    }\n    for k, v := range result {\n        if v != max {\n    \
    \        delete(result, k)\n        }\n    }\n    return result\n}\n", "    return\
    \ map[string]int{}\n}\n", "    var result = make(map[string]int)\n    var max\
    \ = 0\n    for _, letter := range test {\n        result[string(letter)]++\n \
    \       if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    // TODO: Implement the function\n    return nil\n}\n", "    // TODO\n    return\
    \ nil\n}\n", "    var histogram = make(map[string]int)\n    var max = 0\n    for\
    \ _, letter := range test {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n        }\n    }\n   \
    \ var result = make(map[string]int)\n    for key, value := range histogram {\n\
    \        if value == max {\n            result[key] = value\n        }\n    }\n\
    \    return result\n}\n", "    histogram := make(map[string]int)\n    for _, letter\
    \ := range test {\n        histogram[string(letter)] += 1\n    }\n    return histogram\n\
    }\n", "    histogram := make(map[string]int)\n    for _, char := range test {\n\
    \        histogram[string(char)]++\n    }\n    return histogram\n}\n", "    var\
    \ histogram = make(map[string]int)\n    for _, letter := range test {\n      \
    \  histogram[string(letter)]++\n    }\n    return histogram\n}\n", "    // TODO:\
    \ implement\n    return nil\n}\n", "    var result = make(map[string]int)\n  \
    \  var max = 0\n    for _, value := range test {\n        result[string(value)]\
    \ += 1\n        if result[string(value)] > max {\n            max = result[string(value)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    var histogram = make(map[string]int)\n\
    \    for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
