name: HumanEval_111_histogram
language: go_test.go
prompt: "package histogram_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Given a string representing a space separated lowercase letters, return a dictionary\n\
  // of the letter with the most repetition and containing the corresponding count.\n\
  // If several letters have the same occurrence, return all of them.\n// Example:\n\
  // >>> histogram(\"a b c\")\n// map[string]int{\"a\": 1, \"b\": 1, \"c\": 1}\n//\
  \ >>> histogram(\"a b b a\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"\
  a b c a b\")\n// map[string]int{\"a\": 2, \"b\": 2}\n// >>> histogram(\"b b b b\
  \ a\")\n// map[string]int{\"b\": 4}\n// >>> histogram(\"\")\n// map[string]int{}\n\
  func histogram(test string) map[string]int {\n"
tests: "func TestHistogram(t *testing.T) {\n  candidate := histogram\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate(\"a b b a\"), expected: map[string]int{\"a\"\
  : 2, \"b\": 2} },\n     { actual: candidate(\"a b c a b\"), expected: map[string]int{\"\
  a\": 2, \"b\": 2} },\n     { actual: candidate(\"a b c d g\"), expected: map[string]int{\"\
  a\": 1, \"b\": 1, \"c\": 1, \"d\": 1, \"g\": 1} },\n     { actual: candidate(\"\
  r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n     { actual:\
  \ candidate(\"b b b b a\"), expected: map[string]int{\"b\": 4} },\n     { actual:\
  \ candidate(\"r t g\"), expected: map[string]int{\"r\": 1, \"t\": 1, \"g\": 1} },\n\
  \     { actual: candidate(\"\"), expected: map[string]int{} },\n     { actual: candidate(\"\
  a\"), expected: map[string]int{\"a\": 1} },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    // TODO: Implement me\n    return map[string]int{}\n}\n", "   \
    \ // TODO: Implement\n    return nil\n}\n", "    var result = make(map[string]int)\n\
    \    var max = 0\n    for _, letter := range test {\n        result[string(letter)]\
    \ += 1\n        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    var final = make(map[string]int)\n    for key, value :=\
    \ range result {\n        if value == max {\n            final[key] = value\n\
    \        }\n    }\n    return final\n}\n", "    // TODO: Implement the function\n\
    \    return map[string]int{}\n}\n", "    // TODO: implement\n    return nil\n\
    }\n", "    // Your code here\n    return nil\n}\n", "    // TODO: implement\n\
    \    return map[string]int{}\n}\n", "    var result = make(map[string]int)\n \
    \   var max int\n    for _, letter := range test {\n        result[string(letter)]++\n\
    \        if result[string(letter)] > max {\n            max = result[string(letter)]\n\
    \        }\n    }\n    for key, value := range result {\n        if value != max\
    \ {\n            delete(result, key)\n        }\n    }\n    return result\n}\n",
  "    histogram := make(map[string]int)\n    for _, letter := range test {\n    \
    \    histogram[string(letter)]++\n    }\n    return histogram\n}\n", "    m :=\
    \ make(map[string]int)\n    for _, v := range test {\n        m[string(v)]++\n\
    \    }\n    return m\n}\n", "    // TODO: implement this function\n    return\
    \ map[string]int{}\n}\n", "    hist := make(map[string]int)\n    for _, letter\
    \ := range test {\n        hist[string(letter)]++\n    }\n    return hist\n}\n",
  "    return map[string]int{}\n}\n", "    histogram := make(map[string]int)\n   \
    \ for _, letter := range test {\n        histogram[string(letter)]++\n    }\n\
    \    return histogram\n}\n", "    // TODO: Implement me\n    return nil\n}\n",
  "    var histogram = make(map[string]int)\n    var max = 0\n    for _, letter :=\
    \ range test {\n        histogram[string(letter)]++\n        if histogram[string(letter)]\
    \ > max {\n            max = histogram[string(letter)]\n        }\n    }\n   \
    \ var result = make(map[string]int)\n    for key, value := range histogram {\n\
    \        if value == max {\n            result[key] = value\n        }\n    }\n\
    \    return result\n}\n", "    // TODO: implement this function\n    return nil\n\
    }\n", "    // TODO: implement this function\n    return nil\n}\n", "    // TODO:\
    \ Implement me\n    return map[string]int{}\n}\n", "    return map[string]int{}\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
