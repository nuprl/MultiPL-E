language: go_test.go
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code\n    return \"\"\n}\n\
    \nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpofovryxp_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpofovryxp_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpofovryxp_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpofovryxp_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpofovryxp_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpofovryxp_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpofovryxp_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpofovryxp_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpofovryxp_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074570
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_extension_strength float64\n    for _, extension := range extensions\
    \ {\n        extension_strength := float64(0)\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                extension_strength\
    \ += 1\n            } else if char >= 'a' && char <= 'z' {\n                extension_strength\
    \ -= 1\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate\
    \ := Strongest_Extension\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Watashi\"\
    , []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\"\
    \ },\n     { actual: candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"\
    YEs.WeCaNe\", \"32145tggg\"}), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual:\
    \ candidate(\"__YESIMHERE\", []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"}), expected: \"__YESIMHERE.NuLl__\" },\n     {\
    \ actual: candidate(\"K\", []string{\"Ta\", \"TAR\", \"t234An\", \"cosSo\"}),\
    \ expected: \"K.TAR\" },\n     { actual: candidate(\"__HAHA\", []string{\"Tab\"\
    , \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\" },\n     { actual:\
    \ candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\", \"WorkOut\", \"\
    Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n     { actual: candidate(\"\
    finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\"\
    \ },\n     { actual: candidate(\"_\", []string{\"Bb\", \"91245\"}), expected:\
    \ \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"671235\", \"Bb\"}),\
    \ expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpft56oejz_test.go:65: expected '__YESIMHERE.NuLl__', got\
    \ '__YESIMHERE.'\n    --- FAIL: TestStrongest_Extension/test_num__4 (0.00s)\n\
    \        tmpft56oejz_test.go:65: expected '__HAHA.123', got '__HAHA.'\n    ---\
    \ FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpft56oejz_test.go:65:\
    \ expected '_.Bb', got '_.'\n    --- FAIL: TestStrongest_Extension/test_num__8\
    \ (0.00s)\n        tmpft56oejz_test.go:65: expected 'Sp.671235', got 'Sp.'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 2
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    var strongest_extension string\n\
    \    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        strength := float64(count_uppercase(extension)) - float64(count_lowercase(extension))\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n\nfunc TestStrongest_Extension(t\
    \ *testing.T) {\n  candidate := Strongest_Extension\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(\"Watashi\", []string{\"tEN\", \"niNE\", \"eIGHt8OKe\"\
    }), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"Boku123\",\
    \ []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected: \"\
    Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
    t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
    \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\",\
    \ \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
    __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
    \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
    , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n  \
    \   { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\",\
    \ \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\"\
    , []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl14mewlv_test.go:28:29: undefined: count_uppercase

    /tmp/tmpl14mewlv_test.go:28:67: undefined: count_lowercase

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074569
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
- exit_code: 1
  program: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// You will be given the name of a class (a string) and a list of\
    \ extensions.\n// The extensions are to be used to load additional classes to\
    \ the class. The\n// strength of the extension is as follows: Let CAP be the number\
    \ of the uppercase\n// letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n// in the extension's name, the strength is given by\
    \ the fraction CAP - SM. \n// You should find the strongest extension and return\
    \ a string in this \n// format: ClassName.StrongestExtensionName.\n// If there\
    \ are two or more extensions with the same strength, you should\n// choose the\
    \ one that comes first in the list.\n// For example, if you are given \"Slices\"\
    \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
    \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
    \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"\
    my_class\", []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
    \ string, extensions []string) string {\n    // your code here\n    return \"\"\
    \n}\n\nfunc TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\",\
    \ \"niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual:\
    \ candidate(\"Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    }), expected: \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\"\
    , []string{\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    }), expected: \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"\
    Ta\", \"TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual:\
    \ candidate(\"__HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected:\
    \ \"__HAHA.123\" },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\"\
    , \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\"\
    \ },\n     { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"\
    Wow\", \"WoW\"}), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"\
    _\", []string{\"Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"\
    Sp\", []string{\"671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestStrongest_Extension (0.00s)\n    --- FAIL: TestStrongest_Extension/test_num__0\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'Watashi.eIGHt8OKe', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__1 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'Boku123.YEs.WeCaNe', got ''\n    --- FAIL: TestStrongest_Extension/test_num__2\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__YESIMHERE.NuLl__', got\
    \ ''\n    --- FAIL: TestStrongest_Extension/test_num__3 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'K.TAR', got ''\n    --- FAIL: TestStrongest_Extension/test_num__4\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected '__HAHA.123', got ''\n   \
    \ --- FAIL: TestStrongest_Extension/test_num__5 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected 'YameRore.okIWILL123', got ''\n    --- FAIL: TestStrongest_Extension/test_num__6\
    \ (0.00s)\n        tmpjlka5y9f_test.go:50: expected 'finNNalLLly.WoW', got ''\n\
    \    --- FAIL: TestStrongest_Extension/test_num__7 (0.00s)\n        tmpjlka5y9f_test.go:50:\
    \ expected '_.Bb', got ''\n    --- FAIL: TestStrongest_Extension/test_num__8 (0.00s)\n\
    \        tmpjlka5y9f_test.go:50: expected 'Sp.671235', got ''\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074450
