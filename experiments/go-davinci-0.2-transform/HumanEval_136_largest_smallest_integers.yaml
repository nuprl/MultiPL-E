name: HumanEval_136_largest_smallest_integers
language: go_test.go
prompt: "package largest_smallest_integers_test\n\nimport (\n    \"testing\"\n   \
  \ \"fmt\"\n)\n\n// Create a function that returns a tuple (a, b), where 'a' is\n\
  // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in a list.\n// If there is no negative or positive integers, return them as None.\n\
  // Examples:\n// >>> largest_smallest_integers([]int{2, 4, 1, 3, 5, 7})\n// []interface{}{None,\
  \ 1}\n// >>> largest_smallest_integers([]int{})\n// []interface{}{None, None}\n\
  // >>> largest_smallest_integers([]int{0})\n// []interface{}{None, None}\nfunc largest_smallest_integers(lst\
  \ []int) []interface{} {\n"
tests: "func TestLargest_Smallest_Integers(t *testing.T) {\n  candidate := largest_smallest_integers\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7}), expected:\
  \ []interface{}{None, 1} },\n     { actual: candidate([]int{2, 4, 1, 3, 5, 7, 0}),\
  \ expected: []interface{}{None, 1} },\n     { actual: candidate([]int{1, 3, 2, 4,\
  \ 5, 6, -2}), expected: []interface{}{-2, 1} },\n     { actual: candidate([]int{4,\
  \ 5, 3, 6, 2, 7, -7}), expected: []interface{}{-7, 2} },\n     { actual: candidate([]int{7,\
  \ 3, 8, 4, 9, 2, 5, -9}), expected: []interface{}{-9, 2} },\n     { actual: candidate([]int{}),\
  \ expected: []interface{}{None, None} },\n     { actual: candidate([]int{0}), expected:\
  \ []interface{}{None, None} },\n     { actual: candidate([]int{-1, -3, -5, -6}),\
  \ expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-1, -3, -5,\
  \ -6, 0}), expected: []interface{}{-1, None} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, 1}), expected: []interface{}{-3, 1} },\n     { actual: candidate([]int{-6,\
  \ -4, -4, -3, -100, 1}), expected: []interface{}{-3, 1} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, n := range lst {\n        if n < 0 {\n            if !largestNegativeSet\
    \ || n > largestNegative {\n                largestNegative = n\n            \
    \    largestNegativeSet = true\n            }\n        } else if n > 0 {\n   \
    \         if !smallestPositiveSet || n < smallestPositive {\n                smallestPositive\
    \ = n\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeSet bool\n    var smallestPositiveSet bool\n   \
    \ for _, v := range lst {\n        if v < 0 {\n            if largestNegativeSet\
    \ {\n                if v > largestNegative {\n                    largestNegative\
    \ = v\n                }\n            } else {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            }\n        } else\
    \ if v > 0 {\n            if smallestPositiveSet {\n                if v < smallestPositive\
    \ {\n                    smallestPositive = v\n                }\n           \
    \ } else {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if largestNegativeSet {\n     \
    \   if smallestPositiveSet {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveSet {\n          \
    \  return []interface{}{nil, smallestPositive}\n        } else {\n           \
    \ return []interface{}{nil, nil}\n        }\n    }\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if largestNegativeSet == false {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if smallestPositiveSet == false {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if largestNegativeSet == false {\n        largestNegative = 0\n    }\n   \
    \ if smallestPositiveSet == false {\n        smallestPositive = 0\n    }\n   \
    \ return []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeSet, smallestPositiveSet bool\n\
    \    for _, n := range lst {\n        if n < 0 {\n            if !largestNegativeSet\
    \ || n > largestNegative {\n                largestNegative = n\n            \
    \    largestNegativeSet = true\n            }\n        } else if n > 0 {\n   \
    \         if !smallestPositiveSet || n < smallestPositive {\n                smallestPositive\
    \ = n\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative, smallestPositive int\n  \
    \  var largestNegativeSet, smallestPositiveSet bool\n    for _, v := range lst\
    \ {\n        if v < 0 {\n            if !largestNegativeSet || v > largestNegative\
    \ {\n                largestNegative = v\n                largestNegativeSet =\
    \ true\n            }\n        } else if v > 0 {\n            if !smallestPositiveSet\
    \ || v < smallestPositive {\n                smallestPositive = v\n          \
    \      smallestPositiveSet = true\n            }\n        }\n    }\n    if !largestNegativeSet\
    \ {\n        largestNegative = 0\n    }\n    if !smallestPositiveSet {\n     \
    \   smallestPositive = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeSet,\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet || v > largestNegative {\n               \
    \ largestNegative = v\n                largestNegativeSet = true\n           \
    \ }\n        } else if v > 0 {\n            if !smallestPositiveSet || v < smallestPositive\
    \ {\n                smallestPositive = v\n                smallestPositiveSet\
    \ = true\n            }\n        }\n    }\n    if !largestNegativeSet {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveSet {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative, smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = v\n                largestNegativeExists\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = v\n                smallestPositiveExists\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeExists {\n    \
    \    largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative, smallestPositive int\n    var largestNegativeFound, smallestPositiveFound\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, n := range lst {\n    \
    \    if n < 0 {\n            if largestNegativeFound {\n                if n >\
    \ largestNegative {\n                    largestNegative = n\n               \
    \ }\n            } else {\n                largestNegative = n\n             \
    \   largestNegativeFound = true\n            }\n        } else if n > 0 {\n  \
    \          if smallestPositiveFound {\n                if n < smallestPositive\
    \ {\n                    smallestPositive = n\n                }\n           \
    \ } else {\n                smallestPositive = n\n                smallestPositiveFound\
    \ = true\n            }\n        }\n    }\n    if largestNegativeFound {\n   \
    \     if smallestPositiveFound {\n            return []interface{}{largestNegative,\
    \ smallestPositive}\n        } else {\n            return []interface{}{largestNegative,\
    \ nil}\n        }\n    } else {\n        if smallestPositiveFound {\n        \
    \    return []interface{}{nil, smallestPositive}\n        } else {\n         \
    \   return []interface{}{nil, nil}\n        }\n    }\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeSet bool\n    var\
    \ smallestPositiveSet bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeSet {\n                largestNegative = v\n \
    \               largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   if !largestNegativeSet {\n        largestNegative = -1\n    }\n    if !smallestPositiveSet\
    \ {\n        smallestPositive = -1\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeFound bool\n    var smallestPositiveFound bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = -1\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = -1\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative, smallestPositive int\n    var largestNegativeSet, smallestPositiveSet\
    \ bool\n    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeSet\
    \ || v > largestNegative {\n                largestNegative = v\n            \
    \    largestNegativeSet = true\n            }\n        } else if v > 0 {\n   \
    \         if !smallestPositiveSet || v < smallestPositive {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            }\n        }\n\
    \    }\n    if !largestNegativeSet {\n        largestNegative = 0\n    }\n   \
    \ if !smallestPositiveSet {\n        smallestPositive = 0\n    }\n    return []interface{}{largestNegative,\
    \ smallestPositive}\n}\n", "    var largestNegative int\n    var smallestPositive\
    \ int\n    var largestNegativeFound bool\n    var smallestPositiveFound bool\n\
    \    for _, v := range lst {\n        if v < 0 {\n            if !largestNegativeFound\
    \ {\n                largestNegative = v\n                largestNegativeFound\
    \ = true\n            } else if v > largestNegative {\n                largestNegative\
    \ = v\n            }\n        } else if v > 0 {\n            if !smallestPositiveFound\
    \ {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    if !largestNegativeFound {\n     \
    \   largestNegative = 0\n    }\n    if !smallestPositiveFound {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeFound\
    \ bool\n    var smallestPositiveFound bool\n    for _, v := range lst {\n    \
    \    if v < 0 {\n            if largestNegativeFound == false {\n            \
    \    largestNegative = v\n                largestNegativeFound = true\n      \
    \      } else if v > largestNegative {\n                largestNegative = v\n\
    \            }\n        } else if v > 0 {\n            if smallestPositiveFound\
    \ == false {\n                smallestPositive = v\n                smallestPositiveFound\
    \ = true\n            } else if v < smallestPositive {\n                smallestPositive\
    \ = v\n            }\n        }\n    }\n    var largestNegativeInterface interface{}\n\
    \    var smallestPositiveInterface interface{}\n    if largestNegativeFound {\n\
    \        largestNegativeInterface = largestNegative\n    } else {\n        largestNegativeInterface\
    \ = nil\n    }\n    if smallestPositiveFound {\n        smallestPositiveInterface\
    \ = smallestPositive\n    } else {\n        smallestPositiveInterface = nil\n\
    \    }\n    return []interface{}{largestNegativeInterface, smallestPositiveInterface}\n\
    }\n", "    var largestNegative, smallestPositive int\n    var largestNegativeFound,\
    \ smallestPositiveFound bool\n    for _, v := range lst {\n        if v < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = v\n\
    \                largestNegativeFound = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = v\n                smallestPositiveFound = true\n            } else if v <\
    \ smallestPositive {\n                smallestPositive = v\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = -1\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = -1\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative\
    \ int\n    var smallestPositive int\n    var largestNegativeFound bool\n    var\
    \ smallestPositiveFound bool\n    for _, i := range lst {\n        if i < 0 {\n\
    \            if !largestNegativeFound {\n                largestNegative = i\n\
    \                largestNegativeFound = true\n            } else if i > largestNegative\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if !smallestPositiveFound {\n                smallestPositive\
    \ = i\n                smallestPositiveFound = true\n            } else if i <\
    \ smallestPositive {\n                smallestPositive = i\n            }\n  \
    \      }\n    }\n    if !largestNegativeFound {\n        largestNegative = 0\n\
    \    }\n    if !smallestPositiveFound {\n        smallestPositive = 0\n    }\n\
    \    return []interface{}{largestNegative, smallestPositive}\n}\n", "    var largestNegative,\
    \ smallestPositive int\n    var largestNegativeExists, smallestPositiveExists\
    \ bool\n    for _, val := range lst {\n        if val < 0 {\n            if !largestNegativeExists\
    \ {\n                largestNegative = val\n                largestNegativeExists\
    \ = true\n            } else if val > largestNegative {\n                largestNegative\
    \ = val\n            }\n        } else if val > 0 {\n            if !smallestPositiveExists\
    \ {\n                smallestPositive = val\n                smallestPositiveExists\
    \ = true\n            } else if val < smallestPositive {\n                smallestPositive\
    \ = val\n            }\n        }\n    }\n    if !largestNegativeExists {\n  \
    \      largestNegative = 0\n    }\n    if !smallestPositiveExists {\n        smallestPositive\
    \ = 0\n    }\n    return []interface{}{largestNegative, smallestPositive}\n}\n",
  "    var largestNegative int\n    var smallestPositive int\n    var largestNegativeSet\
    \ bool\n    var smallestPositiveSet bool\n    for _, v := range lst {\n      \
    \  if v < 0 {\n            if !largestNegativeSet {\n                largestNegative\
    \ = v\n                largestNegativeSet = true\n            } else if v > largestNegative\
    \ {\n                largestNegative = v\n            }\n        } else if v >\
    \ 0 {\n            if !smallestPositiveSet {\n                smallestPositive\
    \ = v\n                smallestPositiveSet = true\n            } else if v < smallestPositive\
    \ {\n                smallestPositive = v\n            }\n        }\n    }\n \
    \   var largestNegativeInterface interface{}\n    var smallestPositiveInterface\
    \ interface{}\n    if largestNegativeSet {\n        largestNegativeInterface =\
    \ largestNegative\n    } else {\n        largestNegativeInterface = nil\n    }\n\
    \    if smallestPositiveSet {\n        smallestPositiveInterface = smallestPositive\n\
    \    } else {\n        smallestPositiveInterface = nil\n    }\n    return []interface{}{largestNegativeInterface,\
    \ smallestPositiveInterface}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
