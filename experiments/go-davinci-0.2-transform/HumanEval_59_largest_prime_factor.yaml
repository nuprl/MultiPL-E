name: HumanEval_59_largest_prime_factor
language: go_test.go
prompt: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunc largest_prime_factor(n int) int {\n"
tests: "func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
  \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
  \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
  \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // TODO: implement this function\n    return 0\n}\n", "    // Start\
    \ with the smallest prime factor and work up.\n    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    // TODO: Implement me!\n    return 0\n\
    }\n", "    // Start with the smallest prime factor and work up.\n    for i :=\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // Find the largest prime factor\
    \ of n.\n    //\n    // First, find the smallest prime factor of n.\n    // Then,\
    \ divide n by that factor.\n    // Repeat until n is prime.\n    //\n    // The\
    \ largest prime factor of n is the last prime factor found.\n    //\n    // The\
    \ smallest prime factor of n is the smallest prime number that\n    // divides\
    \ n.\n    //\n    // The smallest prime factor of n is the smallest prime number\
    \ that\n    // divides n.\n    //\n    // The smallest prime factor of n is the\
    \ smallest prime number that\n    // divides n.\n    //\n    // The smallest prime\
    \ factor of n is the smallest prime number that\n    // divides n.\n    //\n \
    \   // The smallest prime factor of n is the smallest prime number that\n    //\
    \ divides n.\n    //\n    // The smallest prime factor of n is the smallest prime\
    \ number that\n    // divides n.\n    //\n    // The smallest prime factor of\
    \ n is the smallest prime number that\n    // divides n.\n    //\n    // The smallest\
    \ prime factor of n is the smallest prime number that\n    // divides n.\n   \
    \ //\n    // The smallest prime factor of n is the smallest prime number that\n\
    \    // divides n.\n    //\n    // The smallest prime factor of n is the smallest\
    \ prime number that\n    // divides n.\n    //\n    // The smallest prime factor\
    \ of n is the smallest prime number that\n    // divides n.\n    //\n    // The\
    \ smallest prime factor of n is the smallest prime number that\n    // divides\
    \ n.\n    //\n    // The smallest prime factor of n is the smallest prime number\
    \ that\n    // divides n.\n    //\n    // The smallest prime factor of n is the\
    \ smallest prime number that\n    // divides n.\n    //\n    // The smallest prime\
    \ factor of n is the smallest prime number that\n    // divides n.\n    //\n \
    \   // The smallest prime factor of n is the smallest prime number that\n    //\
    \ divides n.\n    //\n    // The smallest prime factor of n is the smallest prime\
    \ number that\n    // divides n.\n    //\n    // The smallest prime factor of\
    \ n is the smallest prime number that\n    // divides n.\n    //\n    // The smallest\
    \ prime factor of n is the", "    for i := 2; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    // TODO: implement\n    return 0\n}\n", "    // TODO: implement\
    \ this function\n    return 0\n}\n", "    var largest_prime int\n    for i :=\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            largest_prime = largest_prime_factor(n\
    \ / i)\n            break\n        }\n    }\n    if largest_prime == 0 {\n   \
    \     largest_prime = n\n    }\n    return largest_prime\n}\n", "    // TODO:\
    \ implement\n    return 0\n}\n", "    for i := 2; i <= n; i++ {\n        if n\
    \ % i == 0 {\n            n /= i\n            i--\n        }\n    }\n    return\
    \ n\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    var largest int\n    for i := 2; i <= n; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n            n /= i\n            i = 1\n \
    \       }\n    }\n    return largest\n}\n", "    var i int = 2\n    for i < n\
    \ {\n        if n % i == 0 {\n            n = n / i\n        } else {\n      \
    \      i += 1\n        }\n    }\n    return n\n}\n", "    var i int = 2\n    for\
    \ ; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    // TODO: implement\n    return 0\n}\n", "    var i int = 2\n \
    \   for ; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", " \
    \   var i int = 2\n    for i * i <= n {\n        if n % i == 0 {\n           \
    \ n /= i\n        } else {\n            i++\n        }\n    }\n    return n\n\
    }\n", "    // TODO: implement\n    return 0\n}\n", "    // TODO: Implement me!\n\
    \    return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n         \
    \   n /= i\n            i--\n        }\n    }\n    return i\n}\n", "    var i\
    \ int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            n /=\
    \ i\n            i--\n        }\n    }\n    return i\n}\n", "    for i := 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO\n    return 0\n}\n",
  "    // TODO: implement\n    return 0\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", " \
    \   // TODO: implement this function\n    return 0\n}\n", "    // The largest\
    \ prime factor of n is at most n/2.\n    for i := n/2; i > 1; i-- {\n        if\
    \ n % i == 0 && is_prime(i) {\n            return i\n        }\n    }\n    return\
    \ 1\n}\n", "    // TODO: implement me\n    return 0\n}\n", "    // Start with\
    \ the smallest prime factor.\n    factor := 2\n    // Loop until we have no more\
    \ factors.\n    for n > 1 {\n        // If n is divisible by factor, divide it\
    \ out.\n        for n % factor == 0 {\n            n /= factor\n        }\n  \
    \      // Move to the next factor.\n        factor += 1\n    }\n    // Return\
    \ the last factor.\n    return factor\n}\n", "    var i int\n    for i = 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            n /= i\n            i--\n \
    \       }\n    }\n    return i\n}\n", "    // TODO: implement\n    return 0\n\
    }\n", "    var largest_prime int\n    for i := 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            if is_prime(i) {\n                largest_prime = i\n\
    \            }\n        }\n    }\n    return largest_prime\n}\n", "    var i int\
    \ = 2\n    for i < n {\n        if n % i == 0 {\n            n = n / i\n     \
    \   } else {\n            i += 1\n        }\n    }\n    return n\n}\n", "    for\
    \ i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    var largest_factor int = 1\n\
    \    var i int = 2\n    for i * i <= n {\n        if n % i == 0 {\n          \
    \  largest_factor = i\n            n /= i\n        } else {\n            i +=\
    \ 1\n        }\n    }\n    if n > 1 {\n        largest_factor = n\n    }\n   \
    \ return largest_factor\n}\n", "    for i := 2; i < n; i++ {\n        if n % i\
    \ == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n \
    \   return n\n}\n", "    // TODO: Implement me!\n    return 0\n}\n", "    // TODO:\
    \ implement this function\n    return 0\n}\n", "    // Start with the smallest\
    \ prime factor.\n    factor := 2\n    for n > 1 {\n        // If n is divisible\
    \ by factor, divide it out.\n        for n % factor == 0 {\n            n /= factor\n\
    \        }\n        // Move on to the next factor.\n        factor += 1\n    }\n\
    \    return factor\n}\n", "    // Start with the smallest prime factor, 2.\n \
    \   factor := 2\n    // Keep dividing by the factor until it is no longer a factor.\n\
    \    for n % factor == 0 {\n        n /= factor\n    }\n    // The next factor\
    \ is the next prime number.\n    factor = 3\n    // Keep dividing by the factor\
    \ until it is no longer a factor.\n    for n > 1 {\n        for n % factor ==\
    \ 0 {\n            n /= factor\n        }\n        // The next factor is the next\
    \ prime number.\n        factor += 2\n    }\n    // The last factor is the largest\
    \ prime factor.\n    return factor - 2\n}\n", "    var largest_prime int\n   \
    \ for i := 2; i < n; i++ {\n        if n % i == 0 {\n            largest_prime\
    \ = i\n            n = n / i\n            i = 1\n        }\n    }\n    return\
    \ largest_prime\n}\n", "    // TODO\n    return 0\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    // TODO: implement\n    return 0\n}\n", "    // TODO:\
    \ implement\n    return 0\n}\n", "    // TODO: Implement me!\n    return 0\n}\n",
  "    // TODO: implement\n    return 0\n}\n", "    var i int\n    for i = 2; i <\
    \ n; i++ {\n        if n % i == 0 {\n            n /= i\n            i--\n   \
    \     }\n    }\n    return i\n}\n", "    var i int\n    for i = 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return largest_prime_factor(n / i)\n\
    \        }\n    }\n    return n\n}\n", "    // We can start at 2 because we know\
    \ that n is not a prime.\n    for i := 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            // i is a factor of n.\n            // Check if i is prime.\n\
    \            for j := 2; j < i; j++ {\n                if i % j == 0 {\n     \
    \               // i is not prime.\n                    break\n              \
    \  }\n            }\n            // i is prime.\n            return i\n      \
    \  }\n    }\n    // n is prime.\n    return n\n}\n", "    // TODO\n    return\
    \ 0\n}\n", "    var largest_prime int\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            largest_prime = i\n            n = n / i\n       \
    \     i = 1\n        }\n    }\n    return largest_prime\n}\n", "    // Start with\
    \ the smallest prime factor, 2.\n    factor := 2\n    // Keep going until we've\
    \ reached the largest prime factor.\n    for n > factor {\n        // If n is\
    \ divisible by factor, divide it out.\n        for n % factor == 0 {\n       \
    \     n /= factor\n        }\n        // Next factor.\n        factor += 1\n \
    \   }\n    return factor\n}\n", "    // TODO: implement\n    return 0\n}\n", " \
    \   var i int = 2\n    for i < n {\n        if n % i == 0 {\n            n = n\
    \ / i\n        } else {\n            i++\n        }\n    }\n    return n\n}\n",
  "    // TODO: implement\n    return 0\n}\n", "    var largest int\n    for i :=\
    \ 2; i <= n; i++ {\n        if n % i == 0 {\n            largest = i\n       \
    \     n /= i\n            i--\n        }\n    }\n    return largest\n}\n", " \
    \   var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n        \
    \    return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n",
  "    // Start with the smallest prime factor, 2.\n    factor := 2\n    // Keep dividing\
    \ n by factor until n is no longer divisible by factor.\n    for n % factor ==\
    \ 0 {\n        n /= factor\n    }\n    // Factor is now the next prime factor.\n\
    \    factor = 3\n    // Keep dividing n by factor until n is no longer divisible\
    \ by factor.\n    for n > 1 {\n        for n % factor == 0 {\n            n /=\
    \ factor\n        }\n        // Factor is now the next prime factor.\n       \
    \ factor += 2\n    }\n    // Return the last factor that was used to divide n.\n\
    \    return factor - 2\n}\n", "    // TODO: implement\n    return 0\n}\n", " \
    \   // Start with the smallest prime factor, 2.\n    factor := 2\n    for n >\
    \ 1 {\n        // If n is divisible by factor, divide it out.\n        for n %\
    \ factor == 0 {\n            n /= factor\n        }\n        // Move on to the\
    \ next factor.\n        factor += 1\n    }\n    return factor\n}\n", "    // We\
    \ can skip even numbers.\n    for i := 3; i < n; i += 2 {\n        if n % i ==\
    \ 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    // TODO\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n", "    // TODO: implement\n    return 0\n}\n", "    var i int\n\
    \    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            n /= i\n  \
    \          i--\n        }\n    }\n    return i\n}\n", "    // TODO: Implement\
    \ me!\n    return 0\n}\n", "    // Start with the smallest prime factor and work\
    \ up.\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // Start\
    \ with the smallest prime factor, 2.\n    factor := 2\n    // Keep going until\
    \ the factor is greater than n.\n    for factor <= n {\n        // If factor is\
    \ a factor of n, divide it out.\n        if n % factor == 0 {\n            n /=\
    \ factor\n        } else {\n            // Otherwise, increment the factor by\
    \ one.\n            factor += 1\n        }\n    }\n    // The last factor is the\
    \ largest prime factor.\n    return factor\n}\n", "    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return largest_prime_factor(n / i)\n\
    \        }\n    }\n    return n\n}\n", "    for i := 2; i < n; i++ {\n       \
    \ if n % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n\
    \    }\n    return n\n}\n", "    // TODO\n    return 0\n}\n", "    var largest\
    \ int\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            largest\
    \ = i\n            n = n / i\n            i = 1\n        }\n    }\n    return\
    \ largest\n}\n", "    // TODO: Implement me!\n    return 0\n}\n", "    // TODO\n\
    \    return 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            n /= i\n            i--\n        }\n    }\n    return\
    \ i\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n          \
    \  return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", " \
    \   // TODO: Implement me!\n    return 0\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    var i int\n    for i = 2; i\
    \ <= n; i++ {\n        if n % i == 0 {\n            n /= i\n            i--\n\
    \        }\n    }\n    return i\n}\n", "    // Start with the smallest prime factor,\
    \ 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible by factor,\
    \ divide it out.\n        for n % factor == 0 {\n            n /= factor\n   \
    \     }\n        // Move to the next factor.\n        factor += 1\n    }\n   \
    \ return factor\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0\
    \ {\n            n /= i\n            i--\n        }\n    }\n    return i\n}\n",
  "    // Start with the smallest prime factor, 2.\n    factor := 2\n    for n > 1\
    \ {\n        // If n is divisible by factor, divide it out.\n        if n % factor\
    \ == 0 {\n            n /= factor\n        } else {\n            // Otherwise,\
    \ increment factor.\n            factor += 1\n        }\n    }\n    return factor\n\
    }\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           n /= i\n            i--\n        }\n    }\n    return i\n}\n", " \
    \   // TODO: implement\n    return 0\n}\n", "    // Start with the smallest prime\
    \ factor, 2.\n    factor := 2\n    // Keep dividing by 2 until n is odd.\n   \
    \ for n % factor == 0 {\n        n /= factor\n    }\n    // Now factor is odd.\n\
    \    // Start with 3 and increment by 2 to get the next odd number.\n    factor\
    \ = 3\n    // Keep dividing by the next odd number until n is 1.\n    for n >\
    \ 1 {\n        for n % factor == 0 {\n            n /= factor\n        }\n   \
    \     factor += 2\n    }\n    // Now factor is the largest prime factor of n.\n\
    \    return factor\n}\n", "    // TODO: Implement me!\n    return 0\n}\n", " \
    \   var i int = 2\n    var largest int = 0\n    for ; i <= n; i++ {\n        if\
    \ n % i == 0 {\n            largest = i\n            n = n / i\n            i\
    \ = 1\n        }\n    }\n    return largest\n}\n", "    // Start with the smallest\
    \ prime factor, 2.\n    factor := 2\n    for n > 1 {\n        // If n is divisible\
    \ by factor, divide it out.\n        for n % factor == 0 {\n            n /= factor\n\
    \        }\n        // Move on to the next factor.\n        factor += 1\n    }\n\
    \    return factor\n}\n", "    // Start with the smallest prime factor, 2.\n \
    \   factor := 2\n    for n > 1 {\n        // If n is divisible by factor, divide\
    \ it out.\n        for n % factor == 0 {\n            n /= factor\n        }\n\
    \        // Move on to the next factor.\n        factor += 1\n    }\n    return\
    \ factor\n}\n", "    // Start with the smallest prime factor, 2.\n    p := 2\n\
    \    for n % p == 0 {\n        n /= p\n    }\n    // Now p is the largest prime\
    \ factor of n.\n    return p\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    // TODO: Implement me!\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n  \
    \  }\n    return n\n}\n", "    if n <= 1 {\n        return 0\n    }\n    if is_prime(n)\
    \ {\n        return n\n    }\n    for i := 2; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ 0\n}\n", "    var largest int\n    for i := 2; i <= n; i++ {\n        if n %\
    \ i == 0 {\n            largest = i\n            n /= i\n            i = 1\n \
    \       }\n    }\n    return largest\n}\n", "    for i := 2; i < n; i++ {\n  \
    \      if n % i == 0 {\n            return largest_prime_factor(n / i)\n     \
    \   }\n    }\n    return n\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    var largest_prime int\n    for i := 2;\
    \ i <= n; i++ {\n        if n % i == 0 {\n            largest_prime = i\n    \
    \        n /= i\n            i--\n        }\n    }\n    return largest_prime\n\
    }\n", "    // TODO: implement\n    return 0\n}\n", "    // Use trial division\
    \ to find the largest prime factor.\n    // This is not the most efficient algorithm,\
    \ but it is simple.\n    // The largest prime factor of n is at most n/2.\n  \
    \  for i := n/2; i > 1; i-- {\n        if n % i == 0 && is_prime(i) {\n      \
    \      return i\n        }\n    }\n    return 1\n}\n", "    var i int\n    for\
    \ i = 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // TODO: implement me\n   \
    \ return 0\n}\n", "    // TODO: implement\n    return 0\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    // TODO: Implement me!\n    return 0\n}\n", "    //\
    \ TODO: Implement me!\n    return 0\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    var largest_prime int\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            largest_prime = largest_prime_factor(n / i)\n    \
    \        break\n        }\n    }\n    if largest_prime == 0 {\n        return\
    \ n\n    }\n    return largest_prime\n}\n", "    var i int\n    for i = 2; i <\
    \ n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    // Find the largest prime factor\
    \ of n.\n    // Start with the smallest prime number, 2.\n    // If n is divisible\
    \ by 2, then 2 is a prime factor of n.\n    // Divide n by 2 and continue.\n \
    \   // If n is not divisible by 2, then increment the prime number\n    // and\
    \ try again.\n    // Stop when the prime number is greater than n.\n    // The\
    \ last prime number is the largest prime factor of n.\n    var largest_prime_factor\
    \ int\n    var prime int = 2\n    for prime <= n {\n        if n % prime == 0\
    \ {\n            largest_prime_factor = prime\n            n = n / prime\n   \
    \     } else {\n            prime = next_prime(prime)\n        }\n    }\n    return\
    \ largest_prime_factor\n}\n", "    // TODO: implement\n    return 0\n}\n", " \
    \   // Find the largest prime factor of n.\n    //\n    // First, find the smallest\
    \ prime factor of n.\n    // Then, divide n by that factor.\n    // Repeat until\
    \ n is prime.\n    //\n    // The largest prime factor of n is the last prime\
    \ factor found.\n    //\n    // The smallest prime factor of n is the smallest\
    \ prime number that\n    // divides n.\n    //\n    // The smallest prime number\
    \ is 2.\n    //\n    // The smallest prime factor of n is the smallest prime number\
    \ that\n    // divides n.\n    //\n    // The smallest prime number is 2.\n  \
    \  //\n    // The smallest prime factor of n is the smallest prime number that\n\
    \    // divides n.\n    //\n    // The smallest prime number is 2.\n    //\n \
    \   // The smallest prime factor of n is the smallest prime number that\n    //\
    \ divides n.\n    //\n    // The smallest prime number is 2.\n    //\n    // The\
    \ smallest prime factor of n is the smallest prime number that\n    // divides\
    \ n.\n    //\n    // The smallest prime number is 2.\n    //\n    // The smallest\
    \ prime factor of n is the smallest prime number that\n    // divides n.\n   \
    \ //\n    // The smallest prime number is 2.\n    //\n    // The smallest prime\
    \ factor of n is the smallest prime number that\n    // divides n.\n    //\n \
    \   // The smallest prime number is 2.\n    //\n    // The smallest prime factor\
    \ of n is the smallest prime number that\n    // divides n.\n    //\n    // The\
    \ smallest prime number is 2.\n    //\n    // The smallest prime factor of n is\
    \ the smallest prime number that\n    // divides n.\n    //\n    // The smallest\
    \ prime number is 2.\n    //\n    // The smallest prime factor of n is the smallest\
    \ prime number that\n    // divides n.\n    //\n    // The smallest prime number\
    \ is 2.\n    //\n    // The smallest prime factor of n is the smallest prime number\
    \ that\n    // divides n.\n    //\n    // The smallest prime number is 2.\n  \
    \  //\n    // The smallest prime factor of n is the smallest prime number that\n\
    \    // divides n.\n    //\n    // The smallest prime number is 2.\n   ", "  \
    \  // start with the smallest prime factor\n    factor := 2\n    for n > 1 {\n\
    \        for n % factor == 0 {\n            n /= factor\n        }\n        factor\
    \ += 1\n    }\n    return factor - 1\n}\n", "    // TODO: Implement me!\n    return\
    \ 0\n}\n", "    // TODO: implement\n    return 0\n}\n", "    for i := 2; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    // TODO: implement\n    return 0\n}\n", "    var largest_prime int\n    for\
    \ i := 2; i < n; i++ {\n        if n % i == 0 {\n            largest_prime = i\n\
    \            n = n / i\n            i = 1\n        }\n    }\n    return largest_prime\n\
    }\n", "    // The largest prime factor of n is at most n/2.\n    for i := n/2;\
    \ i > 1; i-- {\n        if n % i == 0 && is_prime(i) {\n            return i\n\
    \        }\n    }\n    return 1\n}\n", "    var i int\n    for i = 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return largest_prime_factor(n / i)\n\
    \        }\n    }\n    return n\n}\n", "    // TODO: Implement me!\n    return\
    \ 0\n}\n", "    // TODO\n    return 0\n}\n", "    // We only need to check up\
    \ to the square root of n.\n    // If n is not a prime, then it must have a prime\
    \ factor less than or equal to sqrt(n).\n    // If n is a prime, then it is its\
    \ own largest prime factor.\n    for i := 2; i * i <= n; i++ {\n        if n %\
    \ i == 0 {\n            // n is divisible by i, so i is a factor of n.\n     \
    \       // If i is prime, then it is the largest prime factor of n.\n        \
    \    if is_prime(i) {\n                return i\n            }\n            //\
    \ Otherwise, i is not prime, so it is not the largest prime factor of n.\n   \
    \         // We can divide n by i to get a smaller number, and then find the largest\
    \ prime factor of that number.\n            return largest_prime_factor(n / i)\n\
    \        }\n    }\n    // If we get here, then n is prime.\n    return n\n}\n",
  "    var largest_prime int = 1\n    var i int = 2\n    for i * i <= n {\n      \
    \  if n % i == 0 {\n            largest_prime = i\n            n /= i\n      \
    \  } else {\n            i += 1\n        }\n    }\n    if n > 1 {\n        largest_prime\
    \ = n\n    }\n    return largest_prime\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    var largest_prime int\n    var i int\n    for i = 2; i <= n; i++\
    \ {\n        if n % i == 0 {\n            largest_prime = i\n            n /=\
    \ i\n            i = 1\n        }\n    }\n    return largest_prime\n}\n", "  \
    \  var i, largest int\n    for i = 2; i <= n; i++ {\n        if n % i == 0 {\n\
    \            n /= i\n            largest = i\n        }\n    }\n    return largest\n\
    }\n", "    // TODO: implement\n    return 0\n}\n", "    // TODO: implement this\
    \ function\n    return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n", "    if n <= 1 {\n        return n\n    }\n    // Find the\
    \ smallest prime factor of n.\n    for i := 2; i < n; i++ {\n        if n % i\
    \ == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n \
    \   return n\n}\n", "    largest := 1\n    for i := 2; i <= n; i++ {\n       \
    \ if n % i == 0 {\n            largest = i\n            n /= i\n            i--\n\
    \        }\n    }\n    return largest\n}\n", "    // TODO\n    return 0\n}\n",
  "    // Find the largest prime factor of n.\n    // We start with the smallest prime\
    \ factor, 2, and work our way up.\n    // We can stop when we reach the square\
    \ root of n.\n    // If n is prime, then we will return n.\n    for i := 2; i\
    \ <= n; i++ {\n        if n % i == 0 {\n            // i is a factor of n.\n \
    \           // If i is prime, then it is the largest prime factor of n.\n    \
    \        if is_prime(i) {\n                return i\n            }\n         \
    \   // i is not prime, so we need to find the largest prime factor of i.\n   \
    \         // We can do this recursively.\n            return largest_prime_factor(i)\n\
    \        }\n    }\n    // n is prime, so it is its own largest prime factor.\n\
    \    return n\n}\n", "    if n <= 1 {\n        return 0\n    }\n    if n == 2\
    \ {\n        return 2\n    }\n    if n % 2 == 0 {\n        return largest_prime_factor(n\
    \ / 2)\n    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n    \
    \        return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           n /= i\n            i--\n        }\n    }\n    return i\n}\n", " \
    \   // TODO\n    return 0\n}\n", "    var largest_prime int\n    for i := 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            largest_prime = i\n       \
    \     n = n / i\n            i = 2\n        }\n    }\n    return largest_prime\n\
    }\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    // TODO\n\
    \    return 0\n}\n", "    // Start with the smallest prime factor, 2.\n    factor\
    \ := 2\n    // Keep going until we have a prime factor.\n    for n % factor !=\
    \ 0 {\n        factor += 1\n    }\n    // If we are at the end, we have our answer.\n\
    \    if factor == n {\n        return factor\n    }\n    // Otherwise, we have\
    \ a composite number.\n    return largest_prime_factor(n / factor)\n}\n", "  \
    \  var largest_prime int = 1\n    var i int = 2\n    for i * i <= n {\n      \
    \  if n % i == 0 {\n            largest_prime = i\n            n /= i\n      \
    \  } else {\n            i += 1\n        }\n    }\n    if n > 1 {\n        largest_prime\
    \ = n\n    }\n    return largest_prime\n}\n", "    // Find the largest prime factor\
    \ of n.\n    // We will use the fact that n is not a prime.\n    // So we can\
    \ start with 2 and go up to n/2.\n    // If we find a factor, we can divide n\
    \ by it and continue.\n    // If we don't find a factor, then n is a prime.\n\
    \    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return\
    \ largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", "    var\
    \ i int = 2\n    for i * i <= n {\n        if n % i == 0 {\n            n /= i\n\
    \        } else {\n            i += 1\n        }\n    }\n    return n\n}\n", " \
    \   var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n        \
    \    break\n        }\n    }\n    if i == n {\n        return n\n    }\n    return\
    \ largest_prime_factor(n / i)\n}\n", "    // TODO\n    return 0\n}\n", "    //\
    \ The largest prime factor of n is less than or equal to sqrt(n).\n    // So we\
    \ only need to check factors up to sqrt(n).\n    //\n    // If n is not a prime,\
    \ then it must have a prime factor less than or equal\n    // to sqrt(n).\n  \
    \  //\n    // Proof:\n    // Suppose n is not a prime and has a prime factor p\
    \ > sqrt(n).\n    // Then n = p * q, where q > sqrt(n).\n    // Since p > sqrt(n),\
    \ then p * q > sqrt(n) * sqrt(n) = n.\n    // This is a contradiction.\n    //\n\
    \    // Therefore, n has a prime factor less than or equal to sqrt(n).\n    //\n\
    \    // We can also prove that n has a prime factor less than or equal to sqrt(n)\n\
    \    // by contradiction.\n    //\n    // Suppose n has no prime factor less than\
    \ or equal to sqrt(n).\n    // Then n has no prime factor less than or equal to\
    \ sqrt(n) + 1.\n    // Then n has no prime factor less than or equal to sqrt(n)\
    \ + 2.\n    // ...\n    // Then n has no prime factor less than or equal to n\
    \ - 1.\n    // Then n has no prime factor less than or equal to n.\n    // This\
    \ is a contradiction.\n    //\n    // Therefore, n has a prime factor less than\
    \ or equal to sqrt(n).\n    for i := 2; i * i <= n; i++ {\n        if n % i ==\
    \ 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n    return\
    \ n\n}\n", "    var largest_prime int\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            largest_prime = i\n            n = n / i\n       \
    \     i = 2\n        }\n    }\n    return largest_prime\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n\
    \ % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n", "    // TODO: Implement me!\n    return 0\n}\n", "    var\
    \ largest int\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n       \
    \     largest = i\n            n = n / i\n            i = 1\n        }\n    }\n\
    \    return largest\n}\n", "    // Start with the smallest prime factor\n    factor\
    \ := 2\n    // Divide out all factors of 2\n    for n % factor == 0 {\n      \
    \  n /= factor\n    }\n    // Now look for odd factors\n    factor = 3\n    maxFactor\
    \ := n\n    for factor * factor <= maxFactor {\n        if n % factor == 0 {\n\
    \            n /= factor\n            maxFactor = n\n        } else {\n      \
    \      factor += 2\n        }\n    }\n    if n == 1 {\n        return maxFactor\n\
    \    }\n    return n\n}\n", "    largest := 0\n    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            largest = i\n            n = n / i\n   \
    \         i = 1\n        }\n    }\n    return largest\n}\n", "    // Start with\
    \ the smallest prime number.\n    factor := 2\n    // Keep going until we find\
    \ a factor that is larger than the square root of n.\n    for factor * factor\
    \ <= n {\n        // If n is divisible by factor, divide it out.\n        for\
    \ n % factor == 0 {\n            n /= factor\n        }\n        // Move on to\
    \ the next prime number.\n        factor += 1\n    }\n    // The last factor we\
    \ found is the largest prime factor.\n    return n\n}\n", "    // TODO: Implement\
    \ me!\n    return 0\n}\n", "    var largest_prime int\n    for i := 2; i < n;\
    \ i++ {\n        if n % i == 0 {\n            largest_prime = i\n            n\
    \ = n / i\n            i = 1\n        }\n    }\n    return largest_prime\n}\n",
  "    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n         \
    \   n /= i\n            i--\n        }\n    }\n    return i\n}\n", "    // Start\
    \ with the smallest prime factor, 2.\n    prime := 2\n    for n % prime == 0 {\n\
    \        n /= prime\n    }\n    // Now we can skip even numbers.\n    prime =\
    \ 3\n    for n > 1 {\n        for n % prime == 0 {\n            n /= prime\n \
    \       }\n        prime += 2\n    }\n    return prime - 2\n}\n", "    // We only\
    \ need to check up to the square root of n.\n    for i := 2; i*i <= n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return largest_prime_factor(n / i)\n        }\n  \
    \  }\n    return n\n}\n", "    // Start with the smallest prime factor, 2.\n \
    \   largest_prime_factor := 2\n    for n % largest_prime_factor == 0 {\n     \
    \   n /= largest_prime_factor\n    }\n    // Now we can start with 3.\n    largest_prime_factor\
    \ = 3\n    for n > 1 {\n        for n % largest_prime_factor == 0 {\n        \
    \    n /= largest_prime_factor\n        }\n        largest_prime_factor += 2\n\
    \    }\n    return largest_prime_factor - 2\n}\n", "    // TODO: implement\n \
    \   return 0\n}\n", "    for i := 2; i < n; i++ {\n        if n % i == 0 {\n \
    \           return largest_prime_factor(n / i)\n        }\n    }\n    return n\n\
    }\n", "    // Find the largest prime factor of n.\n    //\n    // First, find\
    \ the smallest prime factor of n.\n    //\n    // Then, divide n by the smallest\
    \ prime factor.\n    //\n    // Repeat until n is prime.\n    //\n    // The largest\
    \ prime factor is the last prime factor found.\n    //\n    // The smallest prime\
    \ factor of n is at most sqrt(n).\n    //\n    // The smallest prime factor of\
    \ n is at least 2.\n    //\n    // The smallest prime factor of n is odd.\n  \
    \  //\n    // The smallest prime factor of n is not a multiple of 3.\n    //\n\
    \    // The smallest prime factor of n is not a multiple of 5.\n    //\n    //\
    \ The smallest prime factor of n is not a multiple of 7.\n    //\n    // The smallest\
    \ prime factor of n is not a multiple of 11.\n    //\n    // The smallest prime\
    \ factor of n is not a multiple of 13.\n    //\n    // The smallest prime factor\
    \ of n is not a multiple of 17.\n    //\n    // The smallest prime factor of n\
    \ is not a multiple of 19.\n    //\n    // The smallest prime factor of n is not\
    \ a multiple of 23.\n    //\n    // The smallest prime factor of n is not a multiple\
    \ of 29.\n    //\n    // The smallest prime factor of n is not a multiple of 31.\n\
    \    //\n    // The smallest prime factor of n is not a multiple of 37.\n    //\n\
    \    // The smallest prime factor of n is not a multiple of 41.\n    //\n    //\
    \ The smallest prime factor of n is not a multiple of 43.\n    //\n    // The\
    \ smallest prime factor of n is not a multiple of 47.\n    //\n    // The smallest\
    \ prime factor of n is not a multiple of 53.\n    //\n    // The smallest prime\
    \ factor of n is not a multiple of 59.\n    //\n    // The smallest prime factor\
    \ of n is not a multiple of 61.\n    //\n    // The smallest prime factor of n\
    \ is not a multiple of 67.\n    //\n    // The smallest prime factor of n is not\
    \ a multiple of 71.\n    //\n    // The smallest prime factor of n is not a multiple\
    \ of 73.\n    //\n    // The smallest", "    var i int\n    for i = 2; i < n;\
    \ i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n /\
    \ i)\n        }\n    }\n    return n\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    // TODO: implement\n    return 0\n}\n", "    // TODO: implement\n\
    \    return 0\n}\n", "    // TODO: implement\n    return 0\n}\n", "    // Start\
    \ with the smallest prime factor, 2.\n    factor := 2\n    for n > 1 {\n     \
    \   for n % factor == 0 {\n            n /= factor\n        }\n        factor++\n\
    \    }\n    return factor - 1\n}\n", "    // TODO: implement\n    return 0\n}\n",
  "    var i int = 2\n    for ; i < n; i++ {\n        if n % i == 0 {\n          \
    \  return largest_prime_factor(n / i)\n        }\n    }\n    return n\n}\n", " \
    \   // TODO: implement\n    return 0\n}\n", "    // Start with the smallest prime\
    \ number, 2.\n    // Keep dividing n by 2 until n is no longer divisible by 2.\n\
    \    // Then, increment the prime number by 1 and repeat the process.\n    //\
    \ Stop when the prime number is greater than the square root of n.\n    // The\
    \ last prime number that divides n is the largest prime factor of n.\n    prime\
    \ := 2\n    for prime <= n / prime {\n        for n % prime == 0 {\n         \
    \   n /= prime\n        }\n        prime += 1\n    }\n    return n\n}\n", "  \
    \  // The largest prime factor of n is at most n/2.\n    // So we only need to\
    \ check the numbers up to n/2.\n    for i := n/2; i > 1; i-- {\n        if n %\
    \ i == 0 {\n            return largest_prime_factor(i)\n        }\n    }\n   \
    \ return n\n}\n", "    var i int\n    for i = 2; i < n; i++ {\n        if n %\
    \ i == 0 {\n            return largest_prime_factor(n / i)\n        }\n    }\n\
    \    return n\n}\n", "    // TODO: implement\n    return 0\n}\n", "    var i int\n\
    \    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            return largest_prime_factor(n\
    \ / i)\n        }\n    }\n    return n\n}\n", "    var largest_prime int\n   \
    \ for i := 2; i < n; i++ {\n        if n % i == 0 {\n            largest_prime\
    \ = i\n            n = n / i\n            i = 1\n        }\n    }\n    return\
    \ largest_prime\n}\n", "    // Start with the largest possible factor and work\
    \ down\n    for i := n / 2; i > 1; i-- {\n        if n % i == 0 {\n          \
    \  // i is a factor of n, so check if it is prime\n            if is_prime(i)\
    \ {\n                return i\n            }\n        }\n    }\n    return 1\n\
    }\n", "    // TODO: implement me\n    return 0\n}\n", "    // TODO: implement\
    \ this function.\n    return 0\n}\n", "    // TODO: implement\n    return 0\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
