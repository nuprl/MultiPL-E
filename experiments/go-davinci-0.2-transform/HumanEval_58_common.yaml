name: HumanEval_58_common
language: go_test.go
prompt: "package common_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
  \ sorted unique common elements for two lists.\n// >>> common([]int{1, 4, 3, 34,\
  \ 653, 2, 5}, []int{5, 7, 1, 5, 9, 653, 121})\n// []int{1, 5, 653}\n// >>> common([]int{5,\
  \ 3, 2, 8}, []int{3, 2})\n// []int{2, 3}\nfunc common(l1 []int, l2 []int) []int\
  \ {\n"
tests: "func TestCommon(t *testing.T) {\n  candidate := common\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{1, 4, 3, 34, 653, 2, 5}, []int{5, 7, 1, 5, 9, 653,\
  \ 121}), expected: []int{1, 5, 653} },\n     { actual: candidate([]int{5, 3, 2,\
  \ 8}, []int{3, 2}), expected: []int{2, 3} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{3, 2, 4}), expected: []int{2, 3, 4} },\n     { actual: candidate([]int{4,\
  \ 3, 2, 8}, []int{}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\
  \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v]\
    \ = true\n    }\n    var r []int\n    for _, v := range l2 {\n        if m[v]\
    \ {\n            r = append(r, v)\n        }\n    }\n    return r\n}\n", "   \
    \ // TODO: implement\n    return []int{}\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var res []int\n    for _, v1 := range l1\
    \ {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n            \
    \    res = append(res, v1)\n            }\n        }\n    }\n    return res\n\
    }\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n        m[v] =\
    \ true\n    }\n    var result []int\n    for _, v := range l2 {\n        if m[v]\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range l1 {\n        m[v] =\
    \ 1\n    }\n    for _, v := range l2 {\n        if m[v] == 1 {\n            m[v]\
    \ = 2\n        }\n    }\n    var result []int\n    for k, v := range m {\n   \
    \     if v == 2 {\n            result = append(result, k)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    m := make(map[int]int)\n    for _, v := range l1 {\n        m[v] = 1\n    }\n\
    \    for _, v := range l2 {\n        if _, ok := m[v]; ok {\n            m[v]++\n\
    \        }\n    }\n    var r []int\n    for k, v := range m {\n        if v >\
    \ 1 {\n            r = append(r, k)\n        }\n    }\n    return r\n}\n", " \
    \   // TODO: implement\n    return []int{}\n}\n", "    var result []int\n    for\
    \ _, v1 := range l1 {\n        for _, v2 := range l2 {\n            if v1 == v2\
    \ {\n                result = append(result, v1)\n            }\n        }\n \
    \   }\n    return result\n}\n", "    var result []int\n    for _, v1 := range\
    \ l1 {\n        for _, v2 := range l2 {\n            if v1 == v2 {\n         \
    \       result = append(result, v1)\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    // TODO:\
    \ implement\n    return []int{}\n}\n", "    // TODO: Implement me!\n    return\
    \ []int{}\n}\n", "    m := make(map[int]bool)\n    for _, v := range l1 {\n  \
    \      m[v] = true\n    }\n    var result []int\n    for _, v := range l2 {\n\
    \        if m[v] {\n            result = append(result, v)\n        }\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v1 := range l1 {\n\
    \        for _, v2 := range l2 {\n            if v1 == v2 {\n                result\
    \ = append(result, v1)\n            }\n        }\n    }\n    return result\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    // TODO: implement me\n    return\
    \ []int{}\n}\n", "    var result []int\n    for _, v1 := range l1 {\n        for\
    \ _, v2 := range l2 {\n            if v1 == v2 {\n                result = append(result,\
    \ v1)\n            }\n        }\n    }\n    return result\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range l1 {\n        m[v]++\n    }\n    for _, v := range l2 {\n\
    \        m[v]++\n    }\n    var result []int\n    for k, v := range m {\n    \
    \    if v > 1 {\n            result = append(result, k)\n        }\n    }\n  \
    \  return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
