language: go_test.go
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    i\
    \ := 5\n    for i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n  \
    \          return false\n        }\n        i += 6\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <\
    \ n; i += 2 {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <\
    \ n; i += 2 {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <\
    \ n; i += 2 {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    i\
    \ := 5\n    for i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n  \
    \          return false\n        }\n        i += 6\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n\
    \    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmph96ca8uq_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <\
    \ n; i += 2 {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <\
    \ n; i += 2 {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <\
    \ n; i += 2 {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Your\
    \ code here\n    return false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpe3vtshc3_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpe3vtshc3_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpe3vtshc3_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpe3vtshc3_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpe3vtshc3_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpe3vtshc3_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpe3vtshc3_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
