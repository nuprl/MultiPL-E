language: go_test.go
name: HumanEval_40_triples_sum_to_zero
results:
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // if the list is empty, return false\n    if len(l) == 0\
    \ {\n        return false\n    }\n    // if the list has only one element, return\
    \ false\n    if len(l) == 1 {\n        return false\n    }\n    // if the list\
    \ has only two elements, return false\n    if len(l) == 2 {\n        return false\n\
    \    }\n    // if the list has three elements, check if they sum to zero\n   \
    \ if len(l) == 3 {\n        if l[0] + l[1] + l[2] == 0 {\n            return true\n\
    \        } else {\n            return false\n        }\n    }\n    // if the list\
    \ has more than three elements,\n    // check if the first three elements sum\
    \ to zero\n    if l[0] + l[1] + l[2] == 0 {\n        return true\n    }\n    //\
    \ if the first three elements do not sum to zero,\n    // check if the remaining\
    \ elements sum to zero\n    return triples_sum_to_zero(l[1:])\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmppwx1vv_t_test.go:73: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmppwx1vv_t_test.go:73:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpqvu9bozb_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqvu9bozb_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n          \
    \  for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, v := range l {\n        for j, w := range l {\n  \
    \          for k, x := range l {\n                if i != j && i != k && j !=\
    \ k {\n                    if v + w + x == 0 {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, v := range l {\n        for j, w := range l {\n  \
    \          for k, x := range l {\n                if i != j && i != k && j !=\
    \ k {\n                    if v + w + x == 0 {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n          \
    \  for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, v := range l {\n        for j, w := range l {\n  \
    \          for k, x := range l {\n                if i != j && i != k && j !=\
    \ k {\n                    if v + w + x == 0 {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpndomwmps_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpndomwmps_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n          \
    \  for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, v := range l {\n        for j, w := range l {\n  \
    \          for k, x := range l {\n                if i != j && i != k && j !=\
    \ k {\n                    if v + w + x == 0 {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me!\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpndomwmps_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpndomwmps_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n          \
    \  for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmphgy4rfxf_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmphgy4rfxf_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, v := range l {\n        for j, w := range l {\n  \
    \          for k, x := range l {\n                if i != j && i != k && j !=\
    \ k {\n                    if v + w + x == 0 {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpqvu9bozb_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpqvu9bozb_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: write your code here\n    return false\n}\n\nfunc\
    \ TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpde0rz0r2_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpde0rz0r2_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // write your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpwaf1h7b5_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpwaf1h7b5_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n          \
    \  for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] ==\
    \ 0 {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return false\n    }\n    for i :=\
    \ 0; i < len(l) - 2; i++ {\n        for j := i + 1; j < len(l) - 1; j++ {\n  \
    \          for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] +\
    \ l[k] == 0 {\n                    return true\n                }\n          \
    \  }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T)\
    \ {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpaxw_9kl0_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpaxw_9kl0_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j\
    \ < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n           \
    \     if l[i] + l[j] + l[k] == 0 {\n                    return true\n        \
    \        }\n            }\n        }\n    }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    for i, v := range l {\n        for j, w := range l {\n  \
    \          for k, x := range l {\n                if i != j && i != k && j !=\
    \ k {\n                    if v + w + x == 0 {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \   }\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t *testing.T) {\n \
    \ candidate := triples_sum_to_zero\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 3, 5, 0}), expected: false },\n     { actual: candidate([]int{1, 3, 5, -1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, -2, 1}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 3, 7}), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 5, 7}), expected: false },\n     { actual:\
    \ candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n     { actual: candidate([]int{1}),\
    \ expected: false },\n     { actual: candidate([]int{1, 3, 5, -100}), expected:\
    \ false },\n     { actual: candidate([]int{100, 3, 5, -100}), expected: false\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement me\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmp8qzn30c7_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmp8qzn30c7_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // your code here\n    return false\n}\n\nfunc TestTriples_Sum_To_Zero(t\
    \ *testing.T) {\n  candidate := triples_sum_to_zero\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{1, 3, 5, 0}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 7}),\
    \ expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}), expected: false\
    \ },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected: true },\n\
    \     { actual: candidate([]int{1}), expected: false },\n     { actual: candidate([]int{1,\
    \ 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100, 3, 5,\
    \ -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpz5c673pd_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpz5c673pd_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package triples_sum_to_zero_test\n\nimport (\n    \"testing\"\n    \"\
    fmt\"\n)\n\n// triples_sum_to_zero takes a list of integers as an input.\n// it\
    \ returns True if there are three distinct elements in the list that\n// sum to\
    \ zero, and False otherwise.\n// >>> triples_sum_to_zero([]int{1, 3, 5, 0})\n\
    // false\n// >>> triples_sum_to_zero([]int{1, 3, -2, 1})\n// true\n// >>> triples_sum_to_zero([]int{1,\
    \ 2, 3, 7})\n// false\n// >>> triples_sum_to_zero([]int{2, 4, -5, 3, 9, 7})\n\
    // true\n// >>> triples_sum_to_zero([]int{1})\n// false\nfunc triples_sum_to_zero(l\
    \ []int) bool {\n    // TODO: implement this function\n    return false\n}\n\n\
    func TestTriples_Sum_To_Zero(t *testing.T) {\n  candidate := triples_sum_to_zero\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 3, 5, 0}), expected: false\
    \ },\n     { actual: candidate([]int{1, 3, 5, -1}), expected: false },\n     {\
    \ actual: candidate([]int{1, 3, -2, 1}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 3, 7}), expected: false },\n     { actual: candidate([]int{1, 2, 5, 7}),\
    \ expected: false },\n     { actual: candidate([]int{2, 4, -5, 3, 9, 7}), expected:\
    \ true },\n     { actual: candidate([]int{1}), expected: false },\n     { actual:\
    \ candidate([]int{1, 3, 5, -100}), expected: false },\n     { actual: candidate([]int{100,\
    \ 3, 5, -100}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriples_Sum_To_Zero (0.00s)\n    --- FAIL: TestTriples_Sum_To_Zero/test_num__2\
    \ (0.00s)\n        tmpc5d3g9kp_test.go:47: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestTriples_Sum_To_Zero/test_num__5 (0.00s)\n        tmpc5d3g9kp_test.go:47:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074722
