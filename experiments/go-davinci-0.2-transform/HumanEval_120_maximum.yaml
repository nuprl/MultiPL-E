name: HumanEval_120_maximum
language: go_test.go
prompt: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ an array arr of integers and a positive integer k, return a sorted list \n// of\
  \ length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
  \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4},\
  \ 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1},\
  \ 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in the range\
  \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
  \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n"
tests: "func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
  \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n     {\
  \ actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n \
  \    { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
  \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
  \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8, 0},\
  \ 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
  \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
  \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4}, 2),\
  \ expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2), expected:\
  \ []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243, -400, 0},\
  \ 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for l := k - 1; l > j; l-- {\n                    res[l] = res[l\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n   \
    \     return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    // \n    // 1. Sort the array\n    // 2. Return the first k elements\n  \
    \  //\n    // Time complexity: O(n log n)\n    // Space complexity: O(1)\n   \
    \ //\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[:k]\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k >= len(arr) {\n        return\
    \ arr\n    }\n    // if k < len(arr) {\n    //     // sort\n    //     for i :=\
    \ 0; i < len(arr); i++ {\n    //         for j := i + 1; j < len(arr); j++ {\n\
    \    //             if arr[i] < arr[j] {\n    //                 arr[i], arr[j]\
    \ = arr[j], arr[i]\n    //             }\n    //         }\n    //     }\n   \
    \ //     return arr[:k]\n    // }\n    // return []int{}\n    // heap\n    heap\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    // k > 1\n    var res\
    \ []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n     \
    \       res[0] = arr[i]\n            for j := 1; j < k; j++ {\n              \
    \  if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1], res[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k >= len(arr) {\n        return arr\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] < res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    if k == 0 {\n        return []int{}\n    }\n \
    \   if k == len(arr) {\n        return arr\n    }\n    var result []int\n    for\
    \ i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j-1] {\n                    result[j], result[j-1] = result[j-1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for m := k - 1; m > j; m-- {\n       \
    \             result[m] = result[m - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n \
    \       max := arr[0]\n        for _, v := range arr {\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    max := make([]int, k)\n    for i := 0; i < k; i++ {\n        max[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > max[j] {\n                max[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return max\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    // k < len(arr)\n    // 1. sort\n    // 2. return the first k elements\n\
    \    return arr[:k]\n}\n", "    if k == 0 {\n        return []int{}\n    }\n \
    \   if k >= len(arr) {\n        return arr\n    }\n    var res []int\n    for\
    \ i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n\
    \            for j := 1; j < k; j++ {\n                if res[j] > res[j-1] {\n\
    \                    res[j], res[j-1] = res[j-1], res[j]\n                } else\
    \ {\n                    break\n                }\n            }\n        }\n\
    \    }\n    return res\n}\n", "    return arr\n}\n", "    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    // heapify\n    for i := k/2 - 1; i >= 0; i-- {\n  \
    \      heapify(arr, k, i)\n    }\n    for i := k; i < len(arr); i++ {\n      \
    \  if arr[i] > arr[0] {\n            arr[0] = arr[i]\n            heapify(arr,\
    \ k, 0)\n        }\n    }\n    return arr[:k]\n}\n", "    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   // Use a min heap to store the maximum k numbers.\n    heap := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i\
    \ := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n            heap[0] =\
    \ arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n    return heap\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    // TODO: Implement\n\
    \    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n \
    \   }\n    if k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n     \
    \   max := arr[0]\n        for _, v := range arr {\n            if v > max {\n\
    \                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr)\
    \ {\n        return []int{}\n    }\n    result := make([]int, k)\n    for i :=\
    \ 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j-1]\
    \ {\n                    result[j-1], result[j] = result[j], result[j-1]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    // k < len(arr)\n\
    \    // \u5148\u6392\u5E8F\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[len(arr)\
    \ - k:]\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        return []int{max}\n    }\n    if k >=\
    \ len(arr) {\n        return arr\n    }\n    result := make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i <\
    \ len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j]\
    \ {\n                for l := k - 1; l > j; l-- {\n                    result[l]\
    \ = result[l - 1]\n                }\n                result[j] = arr[i]\n   \
    \             break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k <= 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n      \
    \  return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n     \
    \           result[j] = arr[i]\n                break\n            }\n       \
    \ }\n    }\n    return result\n}\n", "    return maximum_heap(arr, k)\n}\n", " \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n\
    \                    result[j], result[j-1] = result[j-1], result[j]\n       \
    \         } else {\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    if k == 1 {\n        max :=\
    \ arr[0]\n        for _, v := range arr {\n            if v > max {\n        \
    \        max = v\n            }\n        }\n        return []int{max}\n    }\n\
    \    // k > 1\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n  \
    \      result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n      \
    \  if arr[i] > result[0] {\n            result[0] = arr[i]\n            for j\
    \ := 1; j < k; j++ {\n                if result[j] < result[j-1] {\n         \
    \           result[j], result[j-1] = result[j-1], result[j]\n                }\
    \ else {\n                    break\n                }\n            }\n      \
    \  }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k > len(arr) {\n\
    \        k = len(arr)\n    }\n    if k == len(arr) {\n        return arr\n   \
    \ }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] =\
    \ arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > res[j] {\n                for l := k - 1;\
    \ l > j; l-- {\n                    res[l] = res[l - 1]\n                }\n \
    \               res[j] = arr[i]\n                break\n            }\n      \
    \  }\n    }\n    return res\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        max := arr[0]\n        maxIndex := 0\n\
    \        for j := 1; j < len(arr); j++ {\n            if arr[j] > max {\n    \
    \            max = arr[j]\n                maxIndex = j\n            }\n     \
    \   }\n        result = append(result, max)\n        arr = append(arr[:maxIndex],\
    \ arr[maxIndex+1:]...)\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k >= len(arr) {\n        return\
    \ arr\n    }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] < res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    if k > len(arr) {\n        return []int{}\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n               \
    \ for l := k - 1; l > j; l-- {\n                    res[l] = res[l - 1]\n    \
    \            }\n                res[j] = arr[i]\n                break\n     \
    \       }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var res\
    \ []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n \
    \           if arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for l := k - 1; l > j; l-- {\n       \
    \             result[l] = result[l - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    // TODO\n    return []int{}\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n      \
    \  return arr\n    }\n    // use a min heap to store the maximum k numbers\n \
    \   minHeap := make([]int, k)\n    for i := 0; i < k; i++ {\n        minHeap[i]\
    \ = arr[i]\n    }\n    buildMinHeap(minHeap)\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > minHeap[0] {\n            minHeap[0] = arr[i]\n     \
    \       minHeapify(minHeap, 0)\n        }\n    }\n    return minHeap\n}\n", " \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n  \
    \      result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr)\
    \ {\n        return []int{}\n    }\n    var result []int\n    for i := 0; i <\
    \ k; i++ {\n        result = append(result, arr[i])\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] >\
    \ result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > res[j] {\n                for m := k - 1;\
    \ m > j; m-- {\n                    res[m] = res[m - 1]\n                }\n \
    \               res[j] = arr[i]\n                break\n            }\n      \
    \  }\n    }\n    return res\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    if k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n    \
    \    max := arr[0]\n        for _, v := range arr {\n            if v > max {\n\
    \                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    // use heap to\
    \ find the maximum k numbers\n    heap := make([]int, k)\n    copy(heap, arr[:k])\n\
    \    for i := k/2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n   \
    \ for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n           \
    \ heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n    return\
    \ heap\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    var result []int\n    for i :=\
    \ 0; i < k; i++ {\n        max := arr[0]\n        maxIndex := 0\n        for j\
    \ := 1; j < len(arr); j++ {\n            if arr[j] > max {\n                max\
    \ = arr[j]\n                maxIndex = j\n            }\n        }\n        result\
    \ = append(result, max)\n        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n\
    \    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n   \
    \     max := arr[0]\n        for _, v := range arr {\n            if v > max {\n\
    \                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        result = append(result, max)\n      \
    \  for j, v := range arr {\n            if v == max {\n                arr = append(arr[:j],\
    \ arr[j+1:]...)\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j-1]\
    \ {\n                    result[j], result[j-1] = result[j-1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n    max :=\
    \ make([]int, k)\n    for i := 0; i < k; i++ {\n        max[i] = arr[i]\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > max[j] {\n                max[j] = arr[i]\n              \
    \  break\n            }\n        }\n    }\n    return max\n}\n", "    if k ==\
    \ 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    // use a min heap to store the maximum k numbers\n    heap := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    // build\
    \ the min heap\n    for i := k / 2 - 1; i >= 0; i-- {\n        minHeapify(heap,\
    \ i, k)\n    }\n    // traverse the rest of the array\n    for i := k; i < len(arr);\
    \ i++ {\n        // if the current number is larger than the root of the min heap,\n\
    \        // replace the root with the current number and heapify the heap\n  \
    \      if arr[i] > heap[0] {\n            heap[0] = arr[i]\n            minHeapify(heap,\
    \ 0, k)\n        }\n    }\n    return heap\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                for t := k\
    \ - 1; t > j; t-- {\n                    result[t] = result[t - 1]\n         \
    \       }\n                result[j] = arr[i]\n                break\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    // TODO: implement\n    return []int{}\n}\n", "    if k == 0 {\n \
    \       return []int{}\n    }\n    if k == len(arr) {\n        return arr\n  \
    \  }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n\
    \            if v > max {\n                max = v\n            }\n        }\n\
    \        return []int{max}\n    }\n    // k > 1\n    result := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ < result[j-1] {\n                    result[j], result[j-1] = result[j-1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    // sort the\
    \ array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr);\
    \ j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            }\n        }\n    }\n    return arr[len(arr) - k:]\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n\
    \                    result[j], result[j-1] = result[j-1], result[j]\n       \
    \         } else {\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    if k <= 0 {\n        return\
    \ []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                for m := k - 1; m > j; m--\
    \ {\n                    result[m] = result[m - 1]\n                }\n      \
    \          result[j] = arr[i]\n                break\n            }\n        }\n\
    \    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n\
    \        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n\
    \        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for _, v := range arr {\n        if len(result) < k {\n            result\
    \ = append(result, v)\n        } else {\n            if v > result[0] {\n    \
    \            result = append(result, v)\n                result = result[1:]\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if len(arr) ==\
    \ 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        min := result[0]\n      \
    \  minIndex := 0\n        for j := 1; j < k; j++ {\n            if result[j] <\
    \ min {\n                min = result[j]\n                minIndex = j\n     \
    \       }\n        }\n        if arr[i] > min {\n            result[minIndex]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for k := k - 1; k > j; k-- {\n       \
    \             result[k] = result[k - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        return []int{max}\n    }\n    if k ==\
    \ len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n        return\
    \ []int{}\n    }\n    // k < len(arr)\n    res := make([]int, k)\n    for i :=\
    \ 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n\
    \                for l := k - 1; l > j; l-- {\n                    res[l] = res[l\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0\
    \ {\n        return arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n  \
    \      return []int{}\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j-1]\
    \ {\n                    result[j], result[j-1] = result[j-1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for m := k - 1; m > j; m-- {\n       \
    \             result[m] = result[m - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k >=\
    \ len(arr) {\n        return arr\n    }\n    var result []int\n    for i := 0;\
    \ i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for i := k;\
    \ i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for _, v := range arr {\n        if len(result)\
    \ < k {\n            result = append(result, v)\n        } else {\n          \
    \  for i, r := range result {\n                if v > r {\n                  \
    \  result = append(result[:i], append([]int{v}, result[i:]...)...)\n         \
    \           break\n                }\n            }\n            if len(result)\
    \ > k {\n                result = result[:k]\n            }\n        }\n    }\n\
    \    return result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n  \
    \  }\n    if k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n      \
    \  max := arr[0]\n        for _, v := range arr {\n            if v > max {\n\
    \                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                for t := k - 1; t > j; t-- {\n          \
    \          res[t] = res[t - 1]\n                }\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        max := arr[0]\n        for _, v := range arr {\n            if\
    \ v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if\
    \ k > len(arr) {\n        return []int{}\n    }\n    result := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > result[j] {\n                for l := k - 1; l > j; l-- {\n              \
    \      result[l] = result[l - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        return []int{max}\n    }\n    if k >=\
    \ len(arr) {\n        return arr\n    }\n    // k < len(arr)\n    // 1. find the\
    \ max\n    max := arr[0]\n    for _, v := range arr {\n        if v > max {\n\
    \            max = v\n        }\n    }\n    // 2. find the kth max\n    kth :=\
    \ max\n    for i := 0; i < k; i++ {\n        kth = max\n        for _, v := range\
    \ arr {\n            if v > kth && v < max {\n                kth = v\n      \
    \      }\n        }\n        max = kth\n    }\n    // 3. find the kth max and\
    \ all the max\n    result := []int{}\n    for _, v := range arr {\n        if\
    \ v >= kth {\n            result = append(result, v)\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n\
    \        for _, v := range arr {\n            if v > max {\n                max\
    \ = v\n            }\n        }\n        return []int{max}\n    }\n    if k ==\
    \ len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n        return\
    \ []int{}\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n       \
    \ result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        min := result[0]\n        minIndex := 0\n        for j := 1; j < k; j++\
    \ {\n            if result[j] < min {\n                min = result[j]\n     \
    \           minIndex = j\n            }\n        }\n        if arr[i] > min {\n\
    \            result[minIndex] = arr[i]\n        }\n    }\n    return result\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n     \
    \   for _, v := range arr {\n            if v > max {\n                max = v\n\
    \            }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    for i := 0; i < k; i++ {\n        for j := len(arr) - 1; j > i; j--\
    \ {\n            if arr[j] > arr[j - 1] {\n                arr[j], arr[j - 1]\
    \ = arr[j - 1], arr[j]\n            }\n        }\n    }\n    return arr[:k]\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    result := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result[j] = arr[i]\n                break\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        max := arr[0]\n        for _, v := range arr {\n            if\
    \ v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                for l := k - 1; l > j; l--\
    \ {\n                    result[l] = result[l - 1]\n                }\n      \
    \          result[j] = arr[i]\n                break\n            }\n        }\n\
    \    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    // k > 1\n    // sort\
    \ arr\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr);\
    \ j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            }\n        }\n    }\n    return arr[:k]\n}\n", "    if k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n          \
    \      result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k >=\
    \ len(arr) {\n        return arr\n    }\n    var result []int\n    for i := 0;\
    \ i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for i := k;\
    \ i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j-1]\
    \ > result[j] {\n                    result[j-1], result[j] = result[j], result[j-1]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == 2 {\n        max1, max2 := arr[0],\
    \ arr[1]\n        if max1 < max2 {\n            max1, max2 = max2, max1\n    \
    \    }\n        for _, v := range arr[2:] {\n            if v > max1 {\n     \
    \           max2 = max1\n                max1 = v\n            } else if v > max2\
    \ {\n                max2 = v\n            }\n        }\n        return []int{max1,\
    \ max2}\n    }\n    return arr\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    // k < len(arr)\n    // 1. find the max element in arr\n    max :=\
    \ arr[0]\n    for _, v := range arr {\n        if v > max {\n            max =\
    \ v\n        }\n    }\n    // 2. find the index of max element in arr\n    maxIndex\
    \ := 0\n    for i, v := range arr {\n        if v == max {\n            maxIndex\
    \ = i\n            break\n        }\n    }\n    // 3. swap the max element to\
    \ the first element\n    arr[0], arr[maxIndex] = arr[maxIndex], arr[0]\n    //\
    \ 4. sort the arr\n    for i := 0; i < k; i++ {\n        for j := i + 1; j < len(arr);\
    \ j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            }\n        }\n    }\n    // 5. return the first k elements\n\
    \    return arr[:k]\n}\n", "    if len(arr) == 0 {\n        return []int{}\n \
    \   }\n    if k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n     \
    \   max := arr[0]\n        for _, v := range arr {\n            if v > max {\n\
    \                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                for m := k - 1; m > j; m-- {\n          \
    \          res[m] = res[m - 1]\n                }\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n\
    \                    result[j], result[j-1] = result[j-1], result[j]\n       \
    \         } else {\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n    \
    \    return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n \
    \   if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n    \
    \        if v > max {\n                max = v\n            }\n        }\n   \
    \     return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        min := result[0]\n        minIndex := 0\n\
    \        for j := 1; j < k; j++ {\n            if result[j] < min {\n        \
    \        min = result[j]\n                minIndex = j\n            }\n      \
    \  }\n        if arr[i] > min {\n            result[minIndex] = arr[i]\n     \
    \   }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        max := arr[0]\n        for _, v := range arr {\n            if\
    \ v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if\
    \ k > len(arr) {\n        return []int{}\n    }\n    for i := 0; i < k; i++ {\n\
    \        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n \
    \   }\n    return arr[:k]\n}\n", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if res[j] <\
    \ res[j-1] {\n                    res[j], res[j-1] = res[j-1], res[j]\n      \
    \          } else {\n                    break\n                }\n          \
    \  }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n\
    \            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n      \
    \          if result[j] < result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k >= len(arr)\
    \ {\n        return arr\n    }\n    // k < len(arr)\n    res := make([]int, k)\n\
    \    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k;\
    \ i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n\
    \            for j := 1; j < k; j++ {\n                if res[j] > res[j-1] {\n\
    \                    res[j], res[j-1] = res[j-1], res[j]\n                } else\
    \ {\n                    break\n                }\n            }\n        }\n\
    \    }\n    return res\n}\n", "    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    var res []int\n    for\
    \ i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n\
    \            for j := 1; j < k; j++ {\n                if res[j] > res[j-1] {\n\
    \                    res[j], res[j-1] = res[j-1], res[j]\n                } else\
    \ {\n                    break\n                }\n            }\n        }\n\
    \    }\n    return res\n}\n", "    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n        max\
    \ := arr[0]\n        for _, v := range arr {\n            if v > max {\n     \
    \           max = v\n            }\n        }\n        return []int{max}\n   \
    \ }\n    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n\
    \            if v > max {\n                max = v\n            }\n        }\n\
    \        return []int{max}\n    }\n    if k > len(arr) {\n        return arr\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                for l := k\
    \ - 1; l > j; l-- {\n                    result[l] = result[l - 1]\n         \
    \       }\n                result[j] = arr[i]\n                break\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j-1] {\n                    result[j-1], result[j] = result[j], result[j-1]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k > len(arr) {\n        k = len(arr)\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] < result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n\
    \                    result[j], result[j-1] = result[j-1], result[j]\n       \
    \         } else {\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j-1] {\n                    result[j], result[j-1] = result[j-1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    if k == 2 {\n       \
    \ max := arr[0]\n        second := arr[1]\n        if second > max {\n       \
    \     max, second = second, max\n        }\n        for _, v := range arr[2:]\
    \ {\n            if v > max {\n                second = max\n                max\
    \ = v\n            } else if v > second {\n                second = v\n      \
    \      }\n        }\n        return []int{max, second}\n    }\n    return arr\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    result := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] < result[j-1] {\n\
    \                    result[j], result[j-1] = result[j-1], result[j]\n       \
    \         } else {\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ == 1 {\n        max := arr[0]\n        for _, v := range arr {\n           \
    \ if v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    if k > len(arr) {\n        return arr\n    }\n    //\
    \ k < len(arr)\n    // use quick sort\n    // find the kth maximum number\n  \
    \  // return the numbers from 0 to kth\n    return quickSort(arr, 0, len(arr)-1,\
    \ k)\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0\
    \ {\n        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j-1]\
    \ {\n                    result[j], result[j-1] = result[j-1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                for l := k\
    \ - 1; l > j; l-- {\n                    result[l] = result[l - 1]\n         \
    \       }\n                result[j] = arr[i]\n                break\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for m := k - 1; m > j; m-- {\n       \
    \             result[m] = result[m - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    // k > 1\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    heapify(result)\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            heapify(result)\n        }\n    }\n   \
    \ return result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    // find the maximum k numbers\
    \ in arr\n    // use a min heap to store the k numbers\n    // the heap is a slice\
    \ of length k\n    // the heap is a min heap\n    // the heap is sorted in ascending\
    \ order\n    // the heap is a complete binary tree\n    // the heap is stored\
    \ in a slice\n    // the heap is stored in a slice in level order\n    // the\
    \ heap is stored in a slice in level order from left to right\n    // the heap\
    \ is stored in a slice in level order from left to right\n    // the heap is stored\
    \ in a slice in level order from left to right\n    // the heap is stored in a\
    \ slice in level order from left to right\n    // the heap is stored in a slice\
    \ in level order from left to right\n    // the heap is stored in a slice in level\
    \ order from left to right\n    // the heap is stored in a slice in level order\
    \ from left to right\n    // the heap is stored in a slice in level order from\
    \ left to right\n    // the heap is stored in a slice in level order from left\
    \ to right\n    // the heap is stored in a slice in level order from left to right\n\
    \    // the heap is stored in a slice in level order from left to right\n    //\
    \ the heap is stored in a slice in level order from left to right\n    // the\
    \ heap is stored in a slice in level order from left to right\n    // the heap\
    \ is stored in a slice in level order from left to right\n    // the heap is stored\
    \ in a slice in level order from left to right\n    // the heap is stored in a\
    \ slice in level order from left to right\n    // the heap is stored in a slice\
    \ in level order from left to right\n    // the heap is stored in a slice in level\
    \ order from left to right\n    // the heap is stored in a slice in level order\
    \ from left to right\n    // the heap is stored in a slice in level order from\
    \ left to right\n    // the heap is stored in a slice in level order from left\
    \ to right\n    // the heap is stored in a slice in level order from left to right\n\
    \    // the heap is stored in a slice in level order from left to right\n   ",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n\
    \                    result[j], result[j-1] = result[j-1], result[j]\n       \
    \         } else {\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var res\
    \ []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n     \
    \       res[0] = arr[i]\n            for j := 1; j < k; j++ {\n              \
    \  if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1], res[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 {\n\
    \        return arr\n    }\n    if k == 0 {\n        return []int{}\n    }\n \
    \   if k == len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n   \
    \     return []int{}\n    }\n    result := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               for m := k - 1; m > j; m-- {\n                    result[m] =\
    \ result[m - 1]\n                }\n                result[j] = arr[i]\n     \
    \           break\n            }\n        }\n    }\n    return result\n}\n", " \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    var max []int\n    for _, v := range arr {\n      \
    \  if len(max) < k {\n            max = append(max, v)\n            continue\n\
    \        }\n        if v > max[0] {\n            max[0] = v\n        }\n     \
    \   for i := 1; i < k; i++ {\n            if max[i-1] < max[i] {\n           \
    \     max[i-1], max[i] = max[i], max[i-1]\n            }\n        }\n    }\n \
    \   return max\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    // The idea is to use a min heap to store the k largest elements.\n\
    \    // The heap will be initialized with the first k elements of the array.\n\
    \    // Then, for each element after the first k elements, we will compare it\
    \ with\n    // the root of the heap. If the element is larger than the root, we\
    \ will replace\n    // the root with the element and heapify the heap.\n    //\
    \ The heap will always store the k largest elements.\n    heap := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    heapify(heap)\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n        \
    \    heap[0] = arr[i]\n            heapify(heap)\n        }\n    }\n    return\
    \ heap\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n   \
    \         for j := 1; j < k; j++ {\n                if result[j] > result[j-1]\
    \ {\n                    result[j], result[j-1] = result[j-1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k >= len(arr) {\n        return arr\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        min := result[0]\n\
    \        minIndex := 0\n        for j := 1; j < k; j++ {\n            if result[j]\
    \ < min {\n                min = result[j]\n                minIndex = j\n   \
    \         }\n        }\n        if arr[i] > min {\n            result[minIndex]\
    \ = arr[i]\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    // create a max heap\n    heap := make([]int, k)\n    for i := 0; i < k;\
    \ i++ {\n        heap[i] = arr[i]\n    }\n    for i := k / 2; i >= 0; i-- {\n\
    \        heapify(heap, i)\n    }\n    for i := k; i < len(arr); i++ {\n      \
    \  if arr[i] > heap[0] {\n            heap[0] = arr[i]\n            heapify(heap,\
    \ 0)\n        }\n    }\n    return heap\n}\n", "    if len(arr) == 0 {\n     \
    \   return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n  \
    \  if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n     \
    \       if v > max {\n                max = v\n            }\n        }\n    \
    \    return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n  \
    \  }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for m := k - 1; m > j; m-- {\n       \
    \             result[m] = result[m - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n        return\
    \ arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range\
    \ arr {\n            if v > max {\n                max = v\n            }\n  \
    \      }\n        return []int{max}\n    }\n    // k > 1\n    // 1. find the max\
    \ value in arr\n    max := arr[0]\n    for _, v := range arr {\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    // 2. find the max value in\
    \ arr, which is not max\n    max2 := arr[0]\n    for _, v := range arr {\n   \
    \     if v > max2 && v < max {\n            max2 = v\n        }\n    }\n    //\
    \ 3. find the max value in arr, which is not max and max2\n    max3 := arr[0]\n\
    \    for _, v := range arr {\n        if v > max3 && v < max && v < max2 {\n \
    \           max3 = v\n        }\n    }\n    // 4. find the max value in arr, which\
    \ is not max, max2 and max3\n    max4 := arr[0]\n    for _, v := range arr {\n\
    \        if v > max4 && v < max && v < max2 && v < max3 {\n            max4 =\
    \ v\n        }\n    }\n    // 5. find the max value in arr, which is not max,\
    \ max2, max3 and max4\n    max5 := arr[0]\n    for _, v := range arr {\n     \
    \   if v > max5 && v < max && v < max2 && v < max3 && v < max4 {\n           \
    \ max5 = v\n        }\n    }\n    // 6. find the max value in arr, which is not\
    \ max, max2, max3, max4 and max5\n    max6 := arr[0]\n    for _, v := range arr\
    \ {\n        if v > max6 && v < max && v < max2 && v < max", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        max := arr[0]\n        for _, v := range arr {\n            if\
    \ v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if\
    \ k > len(arr) {\n        return []int{}\n    }\n    // k < len(arr)\n    // sort\
    \ arr\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr);\
    \ j++ {\n            if arr[i] > arr[j] {\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            }\n        }\n    }\n    return arr[len(arr) - k:]\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                for m := k\
    \ - 1; m > j; m-- {\n                    result[m] = result[m - 1]\n         \
    \       }\n                result[j] = arr[i]\n                break\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    if k == 0 {\n        return result\n    }\n    if k >\
    \ len(arr) {\n        return arr\n    }\n    result = make([]int, k)\n    for\
    \ i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i <\
    \ len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n\
    \            for j := 1; j < k; j++ {\n                if result[j] > result[j-1]\
    \ {\n                    result[j], result[j-1] = result[j-1], result[j]\n   \
    \             } else {\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n\
    \    for i := 0; i < k; i++ {\n        max := arr[0]\n        maxIndex := 0\n\
    \        for j := 1; j < len(arr); j++ {\n            if arr[j] > max {\n    \
    \            max = arr[j]\n                maxIndex = j\n            }\n     \
    \   }\n        res = append(res, max)\n        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n\
    \    }\n    return res\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    if k == 0 {\n        return []int{}\n    }\n    if k >= len(arr) {\n\
    \        return arr\n    }\n    result := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result[j] = arr[i]\n                break\n            }\n   \
    \     }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    // k > 1\n    max :=\
    \ make([]int, k)\n    for i := 0; i < k; i++ {\n        max[i] = arr[i]\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        max = insert(max, arr[i])\n    }\n\
    \    return max\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if\
    \ k == len(arr) {\n        return arr\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        max := arr[0]\n        maxIndex := 0\n        for\
    \ j := 1; j < len(arr); j++ {\n            if arr[j] > max {\n               \
    \ max = arr[j]\n                maxIndex = j\n            }\n        }\n     \
    \   result = append(result, max)\n        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n\
    \    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        j := 0\n        for j < k && arr[i]\
    \ <= result[j] {\n            j++\n        }\n        if j < k {\n           \
    \ result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n     \
    \       result = result[:k]\n        }\n    }\n    return result\n}\n", "    if\
    \ k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        max\
    \ := arr[0]\n        max_index := 0\n        for j := 0; j < len(arr); j++ {\n\
    \            if arr[j] > max {\n                max = arr[j]\n               \
    \ max_index = j\n            }\n        }\n        result = append(result, max)\n\
    \        arr = append(arr[:max_index], arr[max_index+1:]...)\n    }\n    return\
    \ result\n}\n", "    // TODO: implement this function\n    return []int{}\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    heapify(result)\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            heapify(result)\n        }\n    }\n    return result\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n  \
    \  }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n        return\
    \ []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        max := arr[0]\n        for _, v := range arr {\n            if\
    \ v > max {\n                max = v\n            }\n        }\n        return\
    \ []int{max}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if\
    \ k > len(arr) {\n        return []int{}\n    }\n    // k < len(arr)\n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                for l := k - 1; l > j; l--\
    \ {\n                    result[l] = result[l - 1]\n                }\n      \
    \          result[j] = arr[i]\n                break\n            }\n        }\n\
    \    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n\
    \            if v > max {\n                max = v\n            }\n        }\n\
    \        return []int{max}\n    }\n    if k > len(arr) {\n        k = len(arr)\n\
    \    }\n    // fmt.Println(arr)\n    // fmt.Println(k)\n    // fmt.Println(arr[:k])\n\
    \    // fmt.Println(arr[k:])\n    // fmt.Println(maximum(arr[:k], k))\n    //\
    \ fmt.Println(maximum(arr[k:], k))\n    // fmt.Println(merge(maximum(arr[:k],\
    \ k), maximum(arr[k:], k)))\n    return merge(maximum(arr[:k], k), maximum(arr[k:],\
    \ k))\n}\n", "    var result []int\n    if k == 0 {\n        return result\n \
    \   }\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n \
    \   result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n \
    \   result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr)\
    \ {\n        panic(\"k must be less than or equal to the length of arr\")\n  \
    \  }\n    result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] < result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    result := make([]int, k)\n    for i := 0; i < k; i++\
    \ {\n        result[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n\
    \        if arr[i] > result[0] {\n            result[0] = arr[i]\n           \
    \ for j := 1; j < k; j++ {\n                if result[j] < result[j-1] {\n   \
    \                 result[j], result[j-1] = result[j-1], result[j]\n          \
    \      } else {\n                    break\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n\
    \    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   result := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > result[j] {\n                result[j] =\
    \ arr[i]\n                break\n            }\n        }\n    }\n    return result\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n  \
    \  }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], result[j+1:]...)\n               \
    \ result = append(result, arr[i])\n                break\n            }\n    \
    \    }\n    }\n    return result[:k]\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n     \
    \       if arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n\
    \            if v > max {\n                max = v\n            }\n        }\n\
    \        return []int{max}\n    }\n    if k == 2 {\n        max1, max2 := arr[0],\
    \ arr[1]\n        if max1 < max2 {\n            max1, max2 = max2, max1\n    \
    \    }\n        for _, v := range arr[2:] {\n            if v > max1 {\n     \
    \           max2 = max1\n                max1 = v\n            } else if v > max2\
    \ {\n                max2 = v\n            }\n        }\n        return []int{max1,\
    \ max2}\n    }\n    if k == 3 {\n        max1, max2, max3 := arr[0], arr[1], arr[2]\n\
    \        if max1 < max2 {\n            max1, max2 = max2, max1\n        }\n  \
    \      if max1 < max3 {\n            max1, max3 = max3, max1\n        }\n    \
    \    if max2 < max3 {\n            max2, max3 = max3, max2\n        }\n      \
    \  for _, v := range arr[3:] {\n            if v > max1 {\n                max3\
    \ = max2\n                max2 = max1\n                max1 = v\n            }\
    \ else if v > max2 {\n                max3 = max2\n                max2 = v\n\
    \            } else if v > max3 {\n                max3 = v\n            }\n \
    \       }\n        return []int{max1, max2, max3}\n    }\n    return []int{}\n\
    }\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n\
    \        return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n\
    \        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n\
    \    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n    \
    \        if v > max {\n                max = v\n            }\n        }\n   \
    \     return []int{max}\n    }\n    // k > 1\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j-1] {\n                    result[j], result[j-1] = result[j-1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n    \
    \    return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        if arr[i] > result[0] {\n            result[0] = arr[i]\n       \
    \     for j := 1; j < k; j++ {\n                if result[j] > result[j-1] {\n\
    \                    result[j], result[j-1] = result[j-1], result[j]\n       \
    \         } else {\n                    break\n                }\n           \
    \ }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    var result\
    \ []int\n    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n\
    \            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n      \
    \          if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n \
    \   res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n  \
    \          res[0] = arr[i]\n            for j := 1; j < k; j++ {\n           \
    \     if res[j] < res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > res[j] {\n                for m := k - 1;\
    \ m > j; m-- {\n                    res[m] = res[m - 1]\n                }\n \
    \               res[j] = arr[i]\n                break\n            }\n      \
    \  }\n    }\n    return res\n}\n", "    if len(arr) == 0 {\n        return []int{}\n\
    \    }\n    if k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n    \
    \    max := arr[0]\n        for _, v := range arr {\n            if v > max {\n\
    \                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr)\
    \ {\n        return []int{}\n    }\n    max := arr[0]\n    for _, v := range arr\
    \ {\n        if v > max {\n            max = v\n        }\n    }\n    for i, v\
    \ := range arr {\n        if v == max {\n            arr = append(arr[:i], arr[i+1:]...)\n\
    \            break\n        }\n    }\n    return append([]int{max}, maximum(arr,\
    \ k-1)...)\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ len(arr) {\n        return arr\n    }\n    var result []int\n    for i := 0;\
    \ i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for i := k;\
    \ i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    if len(arr) == 0 {\n        return []int{}\n \
    \   }\n    if k == 0 {\n        return []int{}\n    }\n    if k == 1 {\n     \
    \   max := arr[0]\n        for _, v := range arr {\n            if v > max {\n\
    \                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr)\
    \ {\n        return []int{}\n    }\n    var result []int\n    for i := 0; i <\
    \ k; i++ {\n        result = append(result, arr[i])\n    }\n    for i := k; i\
    \ < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] >\
    \ result[j] {\n                result[j] = arr[i]\n                break\n   \
    \         }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0\
    \ {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n    var res\
    \ []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n \
    \           if arr[i] > res[j] {\n                res[j] = arr[i]\n          \
    \      break\n            }\n        }\n    }\n    return res\n}\n", "    if k\
    \ == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result\
    \ = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n     \
    \   for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n          \
    \      result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n\
    \    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   var (\n        res []int\n        i int\n    )\n    for i = 0; i < k; i++\
    \ {\n        res = append(res, arr[i])\n    }\n    for i = k; i < len(arr); i++\
    \ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n            for\
    \ j := 1; j < k; j++ {\n                if res[j] > res[j-1] {\n             \
    \       res[j], res[j-1] = res[j-1], res[j]\n                } else {\n      \
    \              break\n                }\n            }\n        }\n    }\n   \
    \ return res\n}\n", "    var res []int\n    for _, v := range arr {\n        if\
    \ len(res) < k {\n            res = append(res, v)\n        } else {\n       \
    \     for i := 0; i < len(res); i++ {\n                if v > res[i] {\n     \
    \               res = append(res[:i], append([]int{v}, res[i:]...)...)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return res\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k\
    \ == len(arr) {\n        return arr\n    }\n    // use a min heap to store the\
    \ k largest numbers\n    heap := make([]int, k)\n    for i := 0; i < k; i++ {\n\
    \        heap[i] = arr[i]\n    }\n    for i := k / 2 - 1; i >= 0; i-- {\n    \
    \    heapify(heap, i, k)\n    }\n    for i := k; i < len(arr); i++ {\n       \
    \ if arr[i] > heap[0] {\n            heap[0] = arr[i]\n            heapify(heap,\
    \ 0, k)\n        }\n    }\n    return heap\n}\n", "    if len(arr) == 0 {\n  \
    \      return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k >= len(arr) {\n        return arr\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k >= len(arr) {\n        return arr\n    }\n    var result []int\n\
    \    for i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n\
    \    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n      \
    \      result[0] = arr[i]\n            for j := 1; j < k; j++ {\n            \
    \    if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    var result []int\n    for i\
    \ := 0; i < k; i++ {\n        max := arr[0]\n        maxIndex := 0\n        for\
    \ j := 1; j < len(arr); j++ {\n            if arr[j] > max {\n               \
    \ max = arr[j]\n                maxIndex = j\n            }\n        }\n     \
    \   result = append(result, max)\n        arr = append(arr[:maxIndex], arr[maxIndex+1:]...)\n\
    \    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n  \
    \  }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n \
    \   for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    // TODO - Add your code\
    \ here\n    return nil\n}\n", "    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == len(arr) {\n        return arr\n    }\n    if k > len(arr) {\n  \
    \      return []int{}\n    }\n    var result []int\n    for i := 0; i < k; i++\
    \ {\n        result = append(result, arr[i])\n    }\n    for i := k; i < len(arr);\
    \ i++ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n\
    \                result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    // len(arr) > k\n\
    \    // use a min heap to store the maximum k numbers\n    // the heap size is\
    \ k\n    // the heap top is the minimum of the maximum k numbers\n    // the heap\
    \ bottom is the maximum of the maximum k numbers\n    // the heap is a min heap\n\
    \    // the heap is sorted from top to bottom\n    // the heap is sorted from\
    \ minimum to maximum\n    // the heap is sorted from maximum to minimum\n    //\
    \ the heap is sorted from bottom to top\n    // the heap is sorted from maximum\
    \ to minimum\n    // the heap is sorted from minimum to maximum\n    // the heap\
    \ is sorted from top to bottom\n    // the heap is sorted from minimum to maximum\n\
    \    // the heap is sorted from maximum to minimum\n    // the heap is sorted\
    \ from bottom to top\n    // the heap is sorted from maximum to minimum\n    //\
    \ the heap is sorted from minimum to maximum\n    // the heap is sorted from top\
    \ to bottom\n    // the heap is sorted from minimum to maximum\n    // the heap\
    \ is sorted from maximum to minimum\n    // the heap is sorted from bottom to\
    \ top\n    // the heap is sorted from maximum to minimum\n    // the heap is sorted\
    \ from minimum to maximum\n    // the heap is sorted from top to bottom\n    //\
    \ the heap is sorted from minimum to maximum\n    // the heap is sorted from maximum\
    \ to minimum\n    // the heap is sorted from bottom to top\n    // the heap is\
    \ sorted from maximum to minimum\n    // the heap is sorted from minimum to maximum\n\
    \    // the heap is sorted from top to bottom\n    // the heap is sorted from\
    \ minimum to maximum\n    // the heap is sorted from maximum to minimum\n    //\
    \ the heap is sorted from bottom to top\n    // the heap is sorted from maximum\
    \ to minimum\n    // the heap is sorted from minimum to maximum\n    // the heap\
    \ is sorted from top to bottom\n    // the heap is sorted from minimum to maximum\n\
    \    // the heap is sorted from maximum to minimum\n    // the heap is sorted\
    \ from bottom to top\n    // the heap is sorted from maximum to minimum\n    //\
    \ the heap is sorted from minimum to maximum\n    // the heap is sorted from top\
    \ to bottom\n    // the", "    if k == 0 {\n        return []int{}\n    }\n  \
    \  if k == len(arr) {\n        return arr\n    }\n    var result []int\n    for\
    \ i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                result = append(result[:j], append([]int{arr[i]},\
    \ result[j:]...)...)\n                result = result[:k]\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n", "    if k == 0 {\n\
    \        return []int{}\n    }\n    if k == len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _, v\
    \ := range arr {\n            if v > max {\n                max = v\n        \
    \    }\n        }\n        return []int{max}\n    }\n    var res []int\n    for\
    \ i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if arr[i]\
    \ > res[j] {\n                res = append(res[:j], append([]int{arr[i]}, res[j:]...)...)\n\
    \                res = res[:k]\n                break\n            }\n       \
    \ }\n    }\n    return res\n}\n", "    if k == 0 {\n        return []int{}\n \
    \   }\n    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n  \
    \      max := arr[0]\n        for _, v := range arr {\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > res[j] {\n                for m := k - 1;\
    \ m > j; m-- {\n                    res[m] = res[m - 1]\n                }\n \
    \               res[j] = arr[i]\n                break\n            }\n      \
    \  }\n    }\n    return res\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    var res []int\n\
    \    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    res := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        res[i] = arr[i]\n    }\n    for i\
    \ := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > res[j] {\n                for m := k - 1; m > j; m-- {\n          \
    \          res[m] = res[m - 1]\n                }\n                res[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return res\n}\n",
  "    if len(arr) == 0 {\n        return arr\n    }\n    if k == 0 {\n        return\
    \ []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n    if k\
    \ > len(arr) {\n        return []int{}\n    }\n    // sort.Ints(arr)\n    // return\
    \ arr[len(arr)-k:]\n    return quickSort(arr, k)\n}\n", "    if len(arr) == 0\
    \ {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k == len(arr) {\n        return\
    \ arr\n    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n\
    \            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n      \
    \          if result[j] > result[j-1] {\n                    result[j-1], result[j]\
    \ = result[j], result[j-1]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
