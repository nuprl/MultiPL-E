name: HumanEval_120_maximum
language: go_test.go
prompt: "package maximum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ an array arr of integers and a positive integer k, return a sorted list \n// of\
  \ length k with the maximum k numbers in arr.\n// Example 1:\n// >>> maximum([]int{-3,\
  \ -4, 5}, 3)\n// []int{-4, -3, 5}\n// Example 2:\n// >>> maximum([]int{4, -4, 4},\
  \ 2)\n// []int{4, 4}\n// Example 3:\n// >>> maximum([]int{-3, 2, 1, 2, -1, -2, 1},\
  \ 1)\n// []int{2}\n// Note:\n// 1. The length of the array will be in the range\
  \ of [1, 1000].\n// 2. The elements in the array will be in the range of [-1000,\
  \ 1000].\n// 3. 0 <= k <= len(arr)\nfunc maximum(arr []int, k int) []int {\n"
tests: "func TestMaximum(t *testing.T) {\n  candidate := maximum\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{-3, -4, 5}, 3), expected: []int{-4, -3, 5} },\n\
  \     { actual: candidate([]int{4, -4, 4}, 2), expected: []int{4, 4} },\n     {\
  \ actual: candidate([]int{-3, 2, 1, 2, -1, -2, 1}, 1), expected: []int{2} },\n \
  \    { actual: candidate([]int{123, -123, 20, 0, 1, 2, -3}, 3), expected: []int{2,\
  \ 20, 123} },\n     { actual: candidate([]int{-123, 20, 0, 1, 2, -3}, 4), expected:\
  \ []int{0, 1, 2, 20} },\n     { actual: candidate([]int{5, 15, 0, 3, -13, -8, 0},\
  \ 7), expected: []int{-13, -8, 0, 0, 3, 5, 15} },\n     { actual: candidate([]int{-1,\
  \ 0, 2, 5, 3, -10}, 2), expected: []int{3, 5} },\n     { actual: candidate([]int{1,\
  \ 0, 5, -7}, 1), expected: []int{5} },\n     { actual: candidate([]int{4, -4}, 2),\
  \ expected: []int{-4, 4} },\n     { actual: candidate([]int{-10, 10}, 2), expected:\
  \ []int{-10, 10} },\n     { actual: candidate([]int{1, 2, 3, -23, 243, -400, 0},\
  \ 0), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    res := make([]int, k)\n    for i := 0; i <\
    \ k; i++ {\n        res[i] = arr[i]\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > res[j] {\n    \
    \            for l := k - 1; l > j; l-- {\n                    res[l] = res[l\
    \ - 1]\n                }\n                res[j] = arr[i]\n                break\n\
    \            }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n   \
    \     return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    // \n    // 1. Sort the array\n    // 2. Return the first k elements\n  \
    \  //\n    // Time complexity: O(n log n)\n    // Space complexity: O(1)\n   \
    \ //\n    quickSort(arr, 0, len(arr) - 1)\n    return arr[:k]\n}\n", "    if len(arr)\
    \ == 0 {\n        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == 1 {\n        max := arr[0]\n        for _, v := range arr\
    \ {\n            if v > max {\n                max = v\n            }\n      \
    \  }\n        return []int{max}\n    }\n    if k >= len(arr) {\n        return\
    \ arr\n    }\n    // if k < len(arr) {\n    //     // sort\n    //     for i :=\
    \ 0; i < len(arr); i++ {\n    //         for j := i + 1; j < len(arr); j++ {\n\
    \    //             if arr[i] < arr[j] {\n    //                 arr[i], arr[j]\
    \ = arr[j], arr[i]\n    //             }\n    //         }\n    //     }\n   \
    \ //     return arr[:k]\n    // }\n    // return []int{}\n    // heap\n    heap\
    \ := make([]int, k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n\
    \    }\n    for i := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n \
    \   }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n  \
    \          heap[0] = arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n\
    \    return heap\n}\n", "    if len(arr) == 0 {\n        return arr\n    }\n \
    \   if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n     \
    \   return arr\n    }\n    if k == 1 {\n        max := arr[0]\n        for _,\
    \ v := range arr {\n            if v > max {\n                max = v\n      \
    \      }\n        }\n        return []int{max}\n    }\n    // k > 1\n    var res\
    \ []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n   \
    \ }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n     \
    \       res[0] = arr[i]\n            for j := 1; j < k; j++ {\n              \
    \  if res[j] > res[j-1] {\n                    res[j], res[j-1] = res[j-1], res[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k >= len(arr) {\n        return arr\n\
    \    }\n    res := make([]int, k)\n    for i := 0; i < k; i++ {\n        res[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > res[0]\
    \ {\n            res[0] = arr[i]\n            for j := 1; j < k; j++ {\n     \
    \           if res[j] < res[j-1] {\n                    res[j], res[j-1] = res[j-1],\
    \ res[j]\n                } else {\n                    break\n              \
    \  }\n            }\n        }\n    }\n    return res\n}\n", "    // TODO: implement\n\
    \    return []int{}\n}\n", "    if k == 0 {\n        return []int{}\n    }\n \
    \   if k == len(arr) {\n        return arr\n    }\n    var result []int\n    for\
    \ i := 0; i < k; i++ {\n        result = append(result, arr[i])\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        if arr[i] > result[0] {\n            result[0]\
    \ = arr[i]\n            for j := 1; j < k; j++ {\n                if result[j]\
    \ > result[j-1] {\n                    result[j], result[j-1] = result[j-1], result[j]\n\
    \                } else {\n                    break\n                }\n    \
    \        }\n        }\n    }\n    return result\n}\n", "    if len(arr) == 0 {\n\
    \        return []int{}\n    }\n    if k == 0 {\n        return []int{}\n    }\n\
    \    if k == 1 {\n        max := arr[0]\n        for _, v := range arr {\n   \
    \         if v > max {\n                max = v\n            }\n        }\n  \
    \      return []int{max}\n    }\n    if k == len(arr) {\n        return arr\n\
    \    }\n    if k > len(arr) {\n        return []int{}\n    }\n    result := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        result[i] = arr[i]\n    }\n    for\
    \ i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n            if\
    \ arr[i] > result[j] {\n                for m := k - 1; m > j; m-- {\n       \
    \             result[m] = result[m - 1]\n                }\n                result[j]\
    \ = arr[i]\n                break\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    var result []int\n    for i := 0; i < k; i++ {\n   \
    \     result = append(result, arr[i])\n    }\n    for i := k; i < len(arr); i++\
    \ {\n        for j := 0; j < k; j++ {\n            if arr[i] > result[j] {\n \
    \               result = append(result[:j], append([]int{arr[i]}, result[j:]...)...)\n\
    \                result = result[:k]\n                break\n            }\n \
    \       }\n    }\n    return result\n}\n", "    if k == 0 {\n        return []int{}\n\
    \    }\n    if k == len(arr) {\n        return arr\n    }\n    if k == 1 {\n \
    \       max := arr[0]\n        for _, v := range arr {\n            if v > max\
    \ {\n                max = v\n            }\n        }\n        return []int{max}\n\
    \    }\n    max := make([]int, k)\n    for i := 0; i < k; i++ {\n        max[i]\
    \ = arr[i]\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j\
    \ < k; j++ {\n            if arr[i] > max[j] {\n                max[j] = arr[i]\n\
    \                break\n            }\n        }\n    }\n    return max\n}\n",
  "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == 1 {\n        max := arr[0]\n        for\
    \ _, v := range arr {\n            if v > max {\n                max = v\n   \
    \         }\n        }\n        return []int{max}\n    }\n    if k == len(arr)\
    \ {\n        return arr\n    }\n    if k > len(arr) {\n        return []int{}\n\
    \    }\n    // k < len(arr)\n    // 1. sort\n    // 2. return the first k elements\n\
    \    return arr[:k]\n}\n", "    if k == 0 {\n        return []int{}\n    }\n \
    \   if k >= len(arr) {\n        return arr\n    }\n    var res []int\n    for\
    \ i := 0; i < k; i++ {\n        res = append(res, arr[i])\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > res[0] {\n            res[0] = arr[i]\n\
    \            for j := 1; j < k; j++ {\n                if res[j] > res[j-1] {\n\
    \                    res[j], res[j-1] = res[j-1], res[j]\n                } else\
    \ {\n                    break\n                }\n            }\n        }\n\
    \    }\n    return res\n}\n", "    return arr\n}\n", "    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j <\
    \ k; j++ {\n            if arr[i] > result[j] {\n                result = append(result[:j],\
    \ append([]int{arr[i]}, result[j:]...)...)\n                result = result[:k]\n\
    \                break\n            }\n        }\n    }\n    return result\n}\n",
  "    if k == 0 {\n        return []int{}\n    }\n    if k == len(arr) {\n      \
    \  return arr\n    }\n    // heapify\n    for i := k/2 - 1; i >= 0; i-- {\n  \
    \      heapify(arr, k, i)\n    }\n    for i := k; i < len(arr); i++ {\n      \
    \  if arr[i] > arr[0] {\n            arr[0] = arr[i]\n            heapify(arr,\
    \ k, 0)\n        }\n    }\n    return arr[:k]\n}\n", "    if k == 0 {\n      \
    \  return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n\
    \    var res []int\n    for i := 0; i < k; i++ {\n        res = append(res, arr[i])\n\
    \    }\n    for i := k; i < len(arr); i++ {\n        for j := 0; j < k; j++ {\n\
    \            if arr[i] > res[j] {\n                res = append(res[:j], append([]int{arr[i]},\
    \ res[j:]...)...)\n                res = res[:k]\n                break\n    \
    \        }\n        }\n    }\n    return res\n}\n", "    if k == 0 {\n       \
    \ return []int{}\n    }\n    if k == len(arr) {\n        return arr\n    }\n \
    \   // Use a min heap to store the maximum k numbers.\n    heap := make([]int,\
    \ k)\n    for i := 0; i < k; i++ {\n        heap[i] = arr[i]\n    }\n    for i\
    \ := k / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, k)\n    }\n    for i :=\
    \ k; i < len(arr); i++ {\n        if arr[i] > heap[0] {\n            heap[0] =\
    \ arr[i]\n            heapify(heap, 0, k)\n        }\n    }\n    return heap\n\
    }\n", "    if len(arr) == 0 {\n        return []int{}\n    }\n    if k == 0 {\n\
    \        return []int{}\n    }\n    if k >= len(arr) {\n        return arr\n \
    \   }\n    var result []int\n    for i := 0; i < k; i++ {\n        result = append(result,\
    \ arr[i])\n    }\n    for i := k; i < len(arr); i++ {\n        if arr[i] > result[0]\
    \ {\n            result[0] = arr[i]\n            for j := 1; j < k; j++ {\n  \
    \              if result[j] > result[j-1] {\n                    result[j], result[j-1]\
    \ = result[j-1], result[j]\n                } else {\n                    break\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
