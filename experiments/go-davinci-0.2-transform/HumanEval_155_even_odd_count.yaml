name: HumanEval_155_even_odd_count
language: go_test.go
prompt: "package even_odd_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// []interface{}{1, 1}\n\
  // >>> even_odd_count(123)\n// []interface{}{1, 2}\nfunc even_odd_count(num int)\
  \ []interface{} {\n"
tests: "func TestEven_Odd_Count(t *testing.T) {\n  candidate := even_odd_count\n\t\
  type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n  \
  \ tests := []test{\n     { actual: candidate(7), expected: []interface{}{0, 1} },\n\
  \     { actual: candidate(-78), expected: []interface{}{1, 1} },\n     { actual:\
  \ candidate(3452), expected: []interface{}{2, 2} },\n     { actual: candidate(346211),\
  \ expected: []interface{}{3, 3} },\n     { actual: candidate(-345821), expected:\
  \ []interface{}{3, 3} },\n     { actual: candidate(-2), expected: []interface{}{1,\
  \ 0} },\n     { actual: candidate(-45347), expected: []interface{}{2, 3} },\n  \
  \   { actual: candidate(0), expected: []interface{}{1, 0} },\n   }\n\n\tfor i, tc\
  \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    even, odd := 0, 0\n    for num != 0 {\n        if num % 2 == 0\
    \ {\n            even++\n        } else {\n            odd++\n        }\n    \
    \    num /= 10\n    }\n    return []interface{}{even, odd}\n}\n", "    even :=\
    \ 0\n    odd := 0\n    for num != 0 {\n        if num % 2 == 0 {\n           \
    \ even += 1\n        } else {\n            odd += 1\n        }\n        num /=\
    \ 10\n    }\n    return []interface{}{even, odd}\n}\n", "    even_count := 0\n\
    \    odd_count := 0\n    for num != 0 {\n        if num % 2 == 0 {\n         \
    \   even_count++\n        } else {\n            odd_count++\n        }\n     \
    \   num /= 10\n    }\n    return []interface{}{even_count, odd_count}\n}\n", " \
    \   var even, odd int\n    for num != 0 {\n        if num % 2 == 0 {\n       \
    \     even += 1\n        } else {\n            odd += 1\n        }\n        num\
    \ /= 10\n    }\n    return []interface{}{even, odd}\n}\n", "    var even, odd\
    \ int\n    for num != 0 {\n        if num % 2 == 0 {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n        num /= 10\n    }\n\
    \    return []interface{}{even, odd}\n}\n", "    even, odd := 0, 0\n    for num\
    \ != 0 {\n        if num % 2 == 0 {\n            even++\n        } else {\n  \
    \          odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n", "    even := 0\n    odd := 0\n    for num != 0 {\n        if num\
    \ % 2 == 0 {\n            even += 1\n        } else {\n            odd += 1\n\
    \        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n}\n",
  "    even, odd := 0, 0\n    for num != 0 {\n        if num % 2 == 0 {\n        \
    \    even += 1\n        } else {\n            odd += 1\n        }\n        num\
    \ /= 10\n    }\n    return []interface{}{even, odd}\n}\n", "    even, odd := 0,\
    \ 0\n    for num != 0 {\n        if num % 2 == 0 {\n            even += 1\n  \
    \      } else {\n            odd += 1\n        }\n        num /= 10\n    }\n \
    \   return []interface{}{even, odd}\n}\n", "    even := 0\n    odd := 0\n    for\
    \ num != 0 {\n        if num % 2 == 0 {\n            even += 1\n        } else\
    \ {\n            odd += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even,\
    \ odd}\n}\n", "    even, odd := 0, 0\n    for num != 0 {\n        if num % 2 ==\
    \ 0 {\n            even++\n        } else {\n            odd++\n        }\n  \
    \      num /= 10\n    }\n    return []interface{}{even, odd}\n}\n", "    even,\
    \ odd := 0, 0\n    for num != 0 {\n        if num % 2 == 0 {\n            even\
    \ += 1\n        } else {\n            odd += 1\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even, odd}\n}\n", "    even := 0\n    odd :=\
    \ 0\n    for num != 0 {\n        if num % 2 == 0 {\n            even++\n     \
    \   } else {\n            odd++\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even, odd}\n}\n", "    even, odd := 0, 0\n    for num != 0 {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n", "    even, odd := 0, 0\n    for num != 0 {\n        if num % 2 == 0 {\n\
    \            even += 1\n        } else {\n            odd += 1\n        }\n  \
    \      num /= 10\n    }\n    return []interface{}{even, odd}\n}\n", "    even,\
    \ odd := 0, 0\n    for num != 0 {\n        if num % 2 == 0 {\n            even\
    \ += 1\n        } else {\n            odd += 1\n        }\n        num /= 10\n\
    \    }\n    return []interface{}{even, odd}\n}\n", "    even, odd := 0, 0\n  \
    \  for num != 0 {\n        if num % 2 == 0 {\n            even += 1\n        }\
    \ else {\n            odd += 1\n        }\n        num /= 10\n    }\n    return\
    \ []interface{}{even, odd}\n}\n", "    var even, odd int\n    for num != 0 {\n\
    \        if num % 2 == 0 {\n            even++\n        } else {\n           \
    \ odd++\n        }\n        num /= 10\n    }\n    return []interface{}{even, odd}\n\
    }\n", "    even_count := 0\n    odd_count := 0\n    for num > 0 {\n        if\
    \ num % 2 == 0 {\n            even_count += 1\n        } else {\n            odd_count\
    \ += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n", "    even_count := 0\n    odd_count := 0\n    for num != 0\
    \ {\n        if num % 2 == 0 {\n            even_count += 1\n        } else {\n\
    \            odd_count += 1\n        }\n        num /= 10\n    }\n    return []interface{}{even_count,\
    \ odd_count}\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
