name: HumanEval_117_select_words
language: go_test.go
prompt: "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
  // Given a string s and a natural number n, you have been tasked to implement \n\
  // a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"\
  Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary\
  \ had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"\
  simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n\
  // []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"\
  }\nfunc select_words(s string, n int) []string {\n"
tests: "func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected:\
  \ []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\",\
  \ 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple\
  \ white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\"\
  , 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\",\
  \ 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected:\
  \ []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"\
  b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var words []string\n    var word string\n    var consonants int\n\
    \    var vowels = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n\
    \            if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    var consonants int\n    for _, ch := range s {\n        if ch ==\
    \ ' ' {\n            if consonants == n {\n                result = append(result,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(ch)\n            if is_consonant(ch)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var result []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                result = append(result, word)\n            }\n     \
    \       word = \"\"\n            consonants = 0\n        } else {\n          \
    \  word += string(c)\n            if c != 'a' && c != 'e' && c != 'i' && c !=\
    \ 'o' && c != 'u' {\n                consonants++\n            }\n        }\n\
    \    }\n    if consonants == n {\n        result = append(result, word)\n    }\n\
    \    return result\n}\n", "    var words []string\n    var word string\n    for\
    \ _, c := range s {\n        if c == ' ' {\n            if len(word) > 0 {\n \
    \               words = append(words, word)\n                word = \"\"\n   \
    \         }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        words = append(words, word)\n    }\n    var result\
    \ []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if is_consonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ char := range s {\n        if char == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(char)\n\
    \            if isConsonant(char) {\n                consonants++\n          \
    \  }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if is_consonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if is_consonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var result []string\n    var word string\n    var consonants\
    \ int\n    var vowels = \"aeiou\"\n    var is_consonant bool\n    var is_vowel\
    \ bool\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                result = append(result, word)\n            }\n     \
    \       word = \"\"\n            consonants = 0\n        } else {\n          \
    \  is_consonant = true\n            is_vowel = false\n            for _, v :=\
    \ range vowels {\n                if c == v {\n                    is_vowel =\
    \ true\n                    is_consonant = false\n                    break\n\
    \                }\n            }\n            if is_consonant {\n           \
    \     consonants++\n            }\n            if is_vowel {\n               \
    \ consonants = 0\n            }\n            word += string(c)\n        }\n  \
    \  }\n    if consonants == n {\n        result = append(result, word)\n    }\n\
    \    return result\n}\n", "    words := make([]string, 0)\n    for _, word :=\
    \ range split_words(s) {\n        if count_consonants(word) == n {\n         \
    \   words = append(words, word)\n        }\n    }\n    return words\n}\n", " \
    \   var result []string\n    var word string\n    var consonants int\n    for\
    \ _, c := range s {\n        if c == ' ' {\n            if consonants == n {\n\
    \                result = append(result, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        result = append(result, word)\n\
    \    }\n    return result\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n         \
    \   }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    words := []string{}\n    for _, word\
    \ := range strings.Split(s, \" \") {\n        if len(word) == n {\n          \
    \  words = append(words, word)\n        }\n    }\n    return words\n}\n", "  \
    \  var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var result []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if count_consonants(word)\
    \ == n {\n                result = append(result, word)\n            }\n     \
    \       word = \"\"\n        } else {\n            word += string(c)\n       \
    \ }\n    }\n    if count_consonants(word) == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    var result []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                result = append(result,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var result []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              result = append(result, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        result = append(result, word)\n\
    \    }\n    return result\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if !isVowel(c) {\n      \
    \          consonants++\n            }\n        }\n    }\n    if consonants ==\
    \ n {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words\
    \ = append(words, word)\n    }\n    var result []string\n    for _, word := range\
    \ words {\n        if count_consonants(word) == n {\n            result = append(result,\
    \ word)\n        }\n    }\n    return result\n}\n", "    var words []string\n\
    \    var word string\n    var consonants int\n    var vowels = \"aeiou\"\n   \
    \ for _, c := range s {\n        if c == ' ' {\n            if consonants == n\
    \ {\n                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if !strings.Contains(vowels, string(c)) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                result = append(result,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    words := make([]string, 0)\n    word := \"\"\n    for _, c := range s {\n \
    \       if c == ' ' {\n            if count_consonants(word) == n {\n        \
    \        words = append(words, word)\n            }\n            word = \"\"\n\
    \        } else {\n            word += string(c)\n        }\n    }\n    if count_consonants(word)\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    // TODO: implement the function\n    return nil\n}\n", "    var words []string\n\
    \    var word string\n    var consonants int\n    for _, c := range s {\n    \
    \    if c == ' ' {\n            if consonants == n {\n                words =\
    \ append(words, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n        } else {\n            if c != 'a' && c != 'e' && c != 'i' && c\
    \ != 'o' && c != 'u' {\n                consonants++\n            }\n        \
    \    word += string(c)\n        }\n    }\n    if consonants == n {\n        words\
    \ = append(words, word)\n    }\n    return words\n}\n", "    var words []string\n\
    \    var word string\n    var consonants int\n    for _, c := range s {\n    \
    \    if c == ' ' {\n            if consonants == n {\n                words =\
    \ append(words, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    for _, word := range(strings.Split(s, \" \")) {\n \
    \       if len(word) == n {\n            words = append(words, word)\n       \
    \ }\n    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n         \
    \   }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var words\
    \ []string\n    var word string\n    var consonants int\n    var vowels = \"aeiou\"\
    \n    var is_consonant bool\n    var is_vowel bool\n    var is_space bool\n  \
    \  var is_letter bool\n    var is_word bool\n    var is_consonant_count bool\n\
    \    var is_vowel_count bool\n    var is_word_count bool\n    var is_space_count\
    \ bool\n    var is_letter_count bool\n    var is_word_start bool\n    var is_word_end\
    \ bool\n    var is_word_start_count bool\n    var is_word_end_count bool\n   \
    \ var is_word_start_count_reset bool\n    var is_word_end_count_reset bool\n \
    \   var is_consonant_count_reset bool\n    var is_vowel_count_reset bool\n   \
    \ var is_word_count_reset bool\n    var is_space_count_reset bool\n    var is_letter_count_reset\
    \ bool\n    var is_word_start_count_reset_reset bool\n    var is_word_end_count_reset_reset\
    \ bool\n    var is_consonant_count_reset_reset bool\n    var is_vowel_count_reset_reset\
    \ bool\n    var is_word_count_reset_reset bool\n    var is_space_count_reset_reset\
    \ bool\n    var is_letter_count_reset_reset bool\n    var is_word_start_count_reset_reset_reset\
    \ bool\n    var is_word_end_count_reset_reset_reset bool\n    var is_consonant_count_reset_reset_reset\
    \ bool\n    var is_vowel_count_reset_reset_reset bool\n    var is_word_count_reset_reset_reset\
    \ bool\n    var is_space_count_reset_reset_reset bool\n    var is_letter_count_reset_reset_reset\
    \ bool\n    var is_word_start_count_reset_reset_reset_reset bool\n    var is_word_end_count_reset_reset_reset_reset\
    \ bool\n    var is_consonant_count_reset_reset_", "    var words []string\n  \
    \  var word string\n    for _, c := range s {\n        if c == ' ' {\n       \
    \     if len(word) > 0 {\n                if count_consonants(word) == n {\n \
    \                   words = append(words, word)\n                }\n         \
    \       word = \"\"\n            }\n        } else {\n            word += string(c)\n\
    \        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word) ==\
    \ n {\n            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    var words []string\n    var word string\n    var vowels = map[rune]bool{'a':\
    \ true, 'e': true, 'i': true, 'o': true, 'u': true}\n    var consonants int\n\
    \    for _, r := range s {\n        if r == ' ' {\n            if consonants ==\
    \ n {\n                words = append(words, word)\n            }\n          \
    \  word = \"\"\n            consonants = 0\n        } else {\n            if _,\
    \ ok := vowels[r]; !ok {\n                consonants++\n            }\n      \
    \      word += string(r)\n        }\n    }\n    if consonants == n {\n       \
    \ words = append(words, word)\n    }\n    return words\n}\n", "    var words []string\n\
    \    var word string\n    var consonants int\n    var vowel bool\n\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n            vowel = false\n        } else\
    \ {\n            word += string(c)\n            if !vowel {\n                switch\
    \ c {\n                case 'a', 'e', 'i', 'o', 'u':\n                    vowel\
    \ = true\n                default:\n                    consonants++\n       \
    \         }\n            }\n        }\n    }\n    if consonants == n {\n     \
    \   words = append(words, word)\n    }\n    return words\n}\n", "    var words\
    \ []string\n    var word string\n    var consonants int\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            if consonants == n {\n             \
    \   words = append(words, word)\n            }\n            word = \"\"\n    \
    \        consonants = 0\n        } else {\n            word += string(c)\n   \
    \         if isConsonant(c) {\n                consonants++\n            }\n \
    \       }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if isConsonant(c) {\n   \
    \             consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if len(word) >\
    \ 0 {\n                words = append(words, word)\n                word = \"\"\
    \n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   var result []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    // TODO: implement\n    return []string{}\n}\n", "    var\
    \ words []string\n    var word string\n    var consonants int\n    for _, c :=\
    \ range s {\n        if c == ' ' {\n            if consonants == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    return nil\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if is_consonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    var consonants int\n    for _, char := range s {\n        if char\
    \ == ' ' {\n            if consonants == n {\n                result = append(result,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(char)\n            if isConsonant(char)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var result []string\n    var word string\n    for _, char := range s {\n  \
    \      if char == ' ' {\n            if count_consonants(word) == n {\n      \
    \          result = append(result, word)\n            }\n            word = \"\
    \"\n        } else {\n            word += string(char)\n        }\n    }\n   \
    \ if count_consonants(word) == n {\n        result = append(result, word)\n  \
    \  }\n    return result\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if isConsonant(c) {\n   \
    \             consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    words := make([]string, 0)\n    for _, word := range split(s) {\n        if\
    \ count_consonants(word) == n {\n            words = append(words, word)\n   \
    \     }\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    var vowels = \"aeiou\"\n    for _, c :=\
    \ range s {\n        if c == ' ' {\n            if consonants == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if !strings.Contains(vowels, string(c)) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                consonants++\n            }\n            word\
    \ += string(c)\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if !isVowel(c) {\n\
    \                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var result []string\n    var word string\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            if len(word) == n {\n                result = append(result,\
    \ word)\n            }\n            word = \"\"\n        } else {\n          \
    \  word += string(c)\n        }\n    }\n    if len(word) == n {\n        result\
    \ = append(result, word)\n    }\n    return result\n}\n", "    var result []string\n\
    \    var word string\n    var consonants int\n    for _, c := range s {\n    \
    \    if c == ' ' {\n            if consonants == n {\n                result =\
    \ append(result, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    words := make([]string, 0)\n    for _, word := range(strings.Split(s, \" \"\
    )) {\n        if len(word) == 0 {\n            continue\n        }\n        if\
    \ count_consonants(word) == n {\n            words = append(words, word)\n   \
    \     }\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   var result []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    var words []string\n    var word string\n    for _, c :=\
    \ range s {\n        if c == ' ' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    var result\
    \ []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    var words []string\n    var word string\n    for _, c :=\
    \ range s {\n        if c == ' ' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    var result\
    \ []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if is_consonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    var isWord bool\n    for _, c := range s {\n    \
    \    if c == ' ' {\n            if isWord {\n                if consonants ==\
    \ n {\n                    words = append(words, word)\n                }\n  \
    \              word = \"\"\n                consonants = 0\n                isWord\
    \ = false\n            }\n        } else {\n            isWord = true\n      \
    \      if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n       \
    \         consonants++\n            }\n            word += string(c)\n       \
    \ }\n    }\n    if isWord {\n        if consonants == n {\n            words =\
    \ append(words, word)\n        }\n    }\n    return words\n}\n", "    var words\
    \ []string\n    var word string\n    var consonants int\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            if consonants == n {\n             \
    \   words = append(words, word)\n            }\n            word = \"\"\n    \
    \        consonants = 0\n        } else {\n            word += string(c)\n   \
    \         if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c != ' ' {\n  \
    \          word += string(c)\n            if !isVowel(c) {\n                consonants++\n\
    \            }\n        } else {\n            if consonants == n {\n         \
    \       words = append(words, word)\n            }\n            word = \"\"\n\
    \            consonants = 0\n        }\n    }\n    if consonants == n {\n    \
    \    words = append(words, word)\n    }\n    return words\n}\n", "    var words\
    \ []string\n    var word string\n    var consonants int\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            if consonants == n {\n             \
    \   words = append(words, word)\n            }\n            word = \"\"\n    \
    \        consonants = 0\n        } else {\n            if c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n      \
    \      }\n            word += string(c)\n        }\n    }\n    if consonants ==\
    \ n {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    var is_consonant bool\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if consonants == n {\n                words\
    \ = append(words, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n            continue\n        }\n        is_consonant = true\n        switch\
    \ c {\n        case 'a', 'e', 'i', 'o', 'u':\n            is_consonant = false\n\
    \        }\n        if is_consonant {\n            consonants++\n        }\n \
    \       word += string(c)\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if is_consonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    var vowels\
    \ = \"aeiou\"\n    var isVowel bool\n    for _, c := range s {\n        if c ==\
    \ ' ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            isVowel = false\n            for _, v := range\
    \ vowels {\n                if c == v {\n                    isVowel = true\n\
    \                    break\n                }\n            }\n            if !isVowel\
    \ {\n                consonants++\n            }\n            word += string(c)\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if is_consonant(c) {\n  \
    \              consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var result []string\n    var word string\n    var consonants int\n    var vowels\
    \ = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n            if\
    \ consonants == n {\n                result = append(result, word)\n         \
    \   }\n            word = \"\"\n            consonants = 0\n        } else {\n\
    \            word += string(c)\n            if !strings.Contains(vowels, string(c))\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if len(word) >\
    \ 0 {\n                words = append(words, word)\n                word = \"\"\
    \n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   var result []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if is_consonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    words := make([]string, 0)\n    for\
    \ _, word := range strings.Split(s, \" \") {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words\
    \ = append(words, word)\n    }\n    var result []string\n    for _, word := range\
    \ words {\n        if count_consonants(word) == n {\n            result = append(result,\
    \ word)\n        }\n    }\n    return result\n}\n", "    var words []string\n\
    \    var word string\n    var consonants int\n    for _, c := range s {\n    \
    \    if c == ' ' {\n            if consonants == n {\n                words =\
    \ append(words, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    var vowels = \"aeiou\"\n    var is_consonant bool\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                words = append(words, word)\n            }\n          \
    \  word = \"\"\n            consonants = 0\n        } else {\n            is_consonant\
    \ = true\n            for _, v := range vowels {\n                if c == v {\n\
    \                    is_consonant = false\n                    break\n       \
    \         }\n            }\n            if is_consonant {\n                consonants++\n\
    \            }\n            word += string(c)\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    // TODO: implement this function\n    return []string{}\n}\n", "    var words\
    \ []string\n    var word string\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, char := range s {\n        if char == ' ' {\n            if\
    \ consonants == n {\n                words = append(words, word)\n           \
    \ }\n            word = \"\"\n            consonants = 0\n        } else {\n \
    \           word += string(char)\n            if isConsonant(char) {\n       \
    \         consonants++\n            }\n        }\n    }\n    if consonants ==\
    \ n {\n        words = append(words, word)\n    }\n    return words\n}\n", " \
    \   var words []string\n    var word string\n    var consonants int\n    var vowels\
    \ = \"aeiouAEIOU\"\n    for _, char := range s {\n        if char == ' ' {\n \
    \           if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(char)\n            if !strings.Contains(vowels,\
    \ string(char)) {\n                consonants++\n            }\n        }\n  \
    \  }\n    if consonants == n {\n        words = append(words, word)\n    }\n \
    \   return words\n}\n", "    var words []string\n    var word string\n    var\
    \ consonants int\n    var is_consonant bool\n    for _, char := range s {\n  \
    \      if char == ' ' {\n            if consonants == n {\n                words\
    \ = append(words, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n            continue\n        }\n        is_consonant = true\n        switch\
    \ char {\n        case 'a', 'e', 'i', 'o', 'u':\n            is_consonant = false\n\
    \        }\n        if is_consonant {\n            consonants++\n        }\n \
    \       word += string(char)\n    }\n    if consonants == n {\n        words =\
    \ append(words, word)\n    }\n    return words\n}\n", "    var words []string\n\
    \    var word string\n    var consonants int\n    for _, c := range s {\n    \
    \    if c == ' ' {\n            if consonants == n {\n                words =\
    \ append(words, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n        } else {\n            word += string(c)\n            if is_consonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if len(word) >\
    \ 0 {\n                if count_consonants(word) == n {\n                    words\
    \ = append(words, word)\n                }\n                word = \"\"\n    \
    \        }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        if count_consonants(word) == n {\n          \
    \  words = append(words, word)\n        }\n    }\n    return words\n}\n", "  \
    \  var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n         \
    \   }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    var vowels = map[rune]bool{'a': true, 'e':\
    \ true, 'i': true, 'o': true, 'u': true}\n    for _, c := range s {\n        if\
    \ c == ' ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            if _, ok := vowels[c]; !ok {\n                consonants++\n\
    \            }\n            word += string(c)\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    words := make([]string, 0)\n    for _, word := range(strings.Split(s, \" \"\
    )) {\n        if len(word) == 0 {\n            continue\n        }\n        if\
    \ count_consonants(word) == n {\n            words = append(words, word)\n   \
    \     }\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    var consonants int\n    var vowels = \"aeiou\"\n    for _, c :=\
    \ range s {\n        if c == ' ' {\n            if consonants == n {\n       \
    \         result = append(result, word)\n            }\n            word = \"\"\
    \n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if !strings.Contains(vowels, string(c)) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if len(word) >\
    \ 0 {\n                if count_consonants(word) == n {\n                    words\
    \ = append(words, word)\n                }\n                word = \"\"\n    \
    \        }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        if count_consonants(word) == n {\n          \
    \  words = append(words, word)\n        }\n    }\n    return words\n}\n", "  \
    \  var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    var is_consonant bool\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if consonants == n {\n                words\
    \ = append(words, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n            continue\n        }\n        is_consonant = true\n        switch\
    \ c {\n        case 'a', 'e', 'i', 'o', 'u':\n            is_consonant = false\n\
    \        }\n        if is_consonant {\n            consonants++\n        }\n \
    \       word += string(c)\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    var isConsonant bool\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            if consonants == n {\n             \
    \   words = append(words, word)\n            }\n            word = \"\"\n    \
    \        consonants = 0\n            continue\n        }\n        isConsonant\
    \ = true\n        switch c {\n        case 'a', 'e', 'i', 'o', 'u':\n        \
    \    isConsonant = false\n        }\n        if isConsonant {\n            consonants++\n\
    \        }\n        word += string(c)\n    }\n    if consonants == n {\n     \
    \   words = append(words, word)\n    }\n    return words\n}\n", "    var words\
    \ []string\n    var word string\n    var consonants int\n    var vowels = \"aeiou\"\
    \n    var is_vowel bool\n    var is_word bool\n    for _, c := range s {\n   \
    \     is_vowel = false\n        for _, v := range vowels {\n            if c ==\
    \ v {\n                is_vowel = true\n                break\n            }\n\
    \        }\n        if c == ' ' {\n            if is_word && consonants == n {\n\
    \                words = append(words, word)\n            }\n            word\
    \ = \"\"\n            consonants = 0\n            is_word = false\n        } else\
    \ {\n            is_word = true\n            if !is_vowel {\n                consonants++\n\
    \            }\n            word += string(c)\n        }\n    }\n    if is_word\
    \ && consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    return nil\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n         \
    \   }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   var result []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    var words []string\n    var word string\n    for _, c :=\
    \ range s {\n        if c == ' ' {\n            if len(word) > 0 {\n         \
    \       words = append(words, word)\n                word = \"\"\n           \
    \ }\n        } else {\n            word += string(c)\n        }\n    }\n    if\
    \ len(word) > 0 {\n        words = append(words, word)\n    }\n    var result\
    \ []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    var vowels = \"aeiouAEIOU\"\n    for _, c := range s {\n        if\
    \ c == ' ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    var result []string\n    var words []string\n    var word\
    \ string\n    var consonants int\n    var vowels = \"aeiou\"\n    var isVowel\
    \ bool\n    var isConsonant bool\n    var isWord bool\n    var isSpace bool\n\
    \    var isLetter bool\n    var isEnd bool\n    var isStart bool\n    var isFirst\
    \ bool\n    var isLast bool\n    var isEmpty bool\n    var isNotEmpty bool\n \
    \   var isNotSpace bool\n    var isNotLetter bool\n    var isNotEnd bool\n   \
    \ var isNotStart bool\n    var isNotFirst bool\n    var isNotLast bool\n    var\
    \ isNotEmpty bool\n    var isNotVowel bool\n    var isNotConsonant bool\n    var\
    \ isNotWord bool\n    var isNotSpace bool\n    var isNotLetter bool\n    var isNotEnd\
    \ bool\n    var isNotStart bool\n    var isNotFirst bool\n    var isNotLast bool\n\
    \    var isNotEmpty bool\n    var isNotVowel bool\n    var isNotConsonant bool\n\
    \    var isNotWord bool\n    var isNotSpace bool\n    var isNotLetter bool\n \
    \   var isNotEnd bool\n    var isNotStart bool\n    var isNotFirst bool\n    var\
    \ isNotLast bool\n    var isNotEmpty bool\n    var isNotVowel bool\n    var isNotConsonant\
    \ bool\n    var isNotWord bool\n    var isNotSpace bool\n    var isNotLetter bool\n\
    \    var isNotEnd bool\n    var isNotStart bool\n    var isNotFirst bool\n   \
    \ var isNotLast bool\n    var isNotEmpty bool\n    var isNotVowel bool\n    var\
    \ isNotConsonant bool\n    var isNotWord bool\n    var isNotSpace bool\n    var\
    \ isNotLetter bool\n    var isNotEnd bool\n    var isNotStart bool\n    var isNotFirst\
    \ bool\n    var isNotLast bool\n    var isNotEmpty bool\n    var isNotVowel bool\n\
    \    var isNotConsonant bool\n    var isNotWord bool\n    var isNotSpace bool\n\
    \    var isNotLetter bool\n    var isNotEnd bool\n    var isNotStart bool\n  \
    \  var isNotFirst bool\n   ", "    var words []string\n    var word string\n \
    \   var consonants int\n    for _, c := range s {\n        if c == ' ' {\n   \
    \         if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n         \
    \   }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    words := make([]string, 0)\n    for\
    \ _, word := range split_words(s) {\n        if count_consonants(word) == n {\n\
    \            words = append(words, word)\n        }\n    }\n    return words\n\
    }\n", "    var words []string\n    var word string\n    var count int\n    for\
    \ _, c := range s {\n        if c == ' ' {\n            if count == n {\n    \
    \            words = append(words, word)\n            }\n            word = \"\
    \"\n            count = 0\n        } else {\n            word += string(c)\n \
    \           if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n  \
    \              count++\n            }\n        }\n    }\n    if count == n {\n\
    \        words = append(words, word)\n    }\n    return words\n}\n", "    var\
    \ words []string\n    var word string\n    var consonants int\n    var vowels\
    \ = \"aeiou\"\n    var is_vowel bool\n    for _, c := range s {\n        if c\
    \ == ' ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            is_vowel = false\n            for _, v := range\
    \ vowels {\n                if c == v {\n                    is_vowel = true\n\
    \                    break\n                }\n            }\n            if !is_vowel\
    \ {\n                consonants++\n            }\n            word += string(c)\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if is_consonant(c) {\n  \
    \              consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    var is_consonant\
    \ bool\n    var is_word bool\n\n    for _, c := range s {\n        is_consonant\
    \ = false\n        is_word = false\n\n        switch c {\n        case 'a', 'e',\
    \ 'i', 'o', 'u', 'y':\n            consonants = 0\n            is_word = true\n\
    \        case ' ', '\\t', '\\n':\n            if is_word {\n                if\
    \ consonants == n {\n                    words = append(words, word)\n       \
    \         }\n                word = \"\"\n                is_word = false\n  \
    \          }\n        default:\n            is_consonant = true\n            is_word\
    \ = true\n        }\n\n        if is_consonant {\n            consonants++\n \
    \       }\n\n        if is_word {\n            word += string(c)\n        }\n\
    \    }\n\n    if is_word && consonants == n {\n        words = append(words, word)\n\
    \    }\n\n    return words\n}\n", "    var result []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if len(word) >\
    \ 0 {\n                if count_consonants(word) == n {\n                    result\
    \ = append(result, word)\n                }\n                word = \"\"\n   \
    \         }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        if count_consonants(word) == n {\n          \
    \  result = append(result, word)\n        }\n    }\n    return result\n}\n", " \
    \   var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if isConsonant(c) {\n   \
    \             consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var result []string\n    var words []string\n    var word string\n    var consonants\
    \ int\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var is_vowel\
    \ bool\n    for _, char := range s {\n        if char == ' ' {\n            words\
    \ = append(words, word)\n            word = \"\"\n        } else {\n         \
    \   word += string(char)\n        }\n    }\n    words = append(words, word)\n\
    \    for _, word := range words {\n        consonants = 0\n        for _, char\
    \ := range word {\n            is_vowel = false\n            for _, vowel := range\
    \ vowels {\n                if string(char) == vowel {\n                    is_vowel\
    \ = true\n                    break\n                }\n            }\n      \
    \      if !is_vowel {\n                consonants++\n            }\n        }\n\
    \        if consonants == n {\n            result = append(result, word)\n   \
    \     }\n    }\n    return result\n}\n", "    var result []string\n    var word\
    \ string\n    var consonants int\n    for _, char := range s {\n        if char\
    \ == ' ' {\n            if consonants == n {\n                result = append(result,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(char)\n            if is_consonant(char)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if isConsonant(c) {\n   \
    \             consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if len(word) >\
    \ 0 {\n                if count_consonants(word) == n {\n                    words\
    \ = append(words, word)\n                }\n                word = \"\"\n    \
    \        }\n        } else {\n            word += string(c)\n        }\n    }\n\
    \    if len(word) > 0 {\n        if count_consonants(word) == n {\n          \
    \  words = append(words, word)\n        }\n    }\n    return words\n}\n", "  \
    \  words := []string{}\n    for _, word := range strings.Split(s, \" \") {\n \
    \       if count_consonants(word) == n {\n            words = append(words, word)\n\
    \        }\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word)\
    \ == n {\n                result = append(result, word)\n            }\n     \
    \       word = \"\"\n        } else {\n            word += string(c)\n       \
    \ }\n    }\n    if len(word) == n {\n        result = append(result, word)\n \
    \   }\n    return result\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, char := range s {\n        if char == ' '\
    \ {\n            if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(char)\n            if char != 'a' && char\
    \ != 'e' && char != 'i' && char != 'o' && char != 'u' {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if is_consonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var result []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                result = append(result, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if is_consonant(c) {\n  \
    \              consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        result = append(result, word)\n    }\n    return result\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    var vowels\
    \ = \"aeiou\"\n    for _, c := range s {\n        if c == ' ' {\n            if\
    \ consonants == n {\n                words = append(words, word)\n           \
    \ }\n            word = \"\"\n            consonants = 0\n        } else {\n \
    \           word += string(c)\n            if !strings.Contains(vowels, string(c))\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if isConsonant(c) {\n   \
    \             consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if len(word) >\
    \ 0 {\n                words = append(words, word)\n                word = \"\"\
    \n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   var selected []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            selected = append(selected, word)\n        }\n    }\n  \
    \  return selected\n}\n", "    var words []string\n    var word string\n    var\
    \ consonants int\n    for _, c := range s {\n        if c == ' ' {\n         \
    \   if consonants == n {\n                words = append(words, word)\n      \
    \      }\n            word = \"\"\n            consonants = 0\n        } else\
    \ {\n            word += string(c)\n            if isConsonant(c) {\n        \
    \        consonants++\n            }\n        }\n    }\n    if consonants == n\
    \ {\n        words = append(words, word)\n    }\n    return words\n}\n", "   \
    \ return nil\n}\n", "    var words []string\n    for _, word := range strings.Fields(s)\
    \ {\n        if count_consonants(word) == n {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    var words []string\n \
    \   var word string\n    for _, c := range s {\n        if c == ' ' {\n      \
    \      if count_consonants(word) == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n        } else {\n          \
    \  word += string(c)\n        }\n    }\n    if count_consonants(word) == n {\n\
    \        words = append(words, word)\n    }\n    return words\n}\n", "    var\
    \ words []string\n    var word string\n    var consonants int\n    for _, c :=\
    \ range s {\n        if c == ' ' {\n            if consonants == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    var vowels\
    \ = \"aeiou\"\n    var is_consonant bool\n    for _, c := range s {\n        if\
    \ c == ' ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            is_consonant = true\n            for _, v := range\
    \ vowels {\n                if c == v {\n                    is_consonant = false\n\
    \                    break\n                }\n            }\n            if is_consonant\
    \ {\n                consonants++\n            }\n            word += string(c)\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if is_consonant(c) {\n  \
    \              consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if is_consonant(c) {\n  \
    \              consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if is_consonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, char := range s {\n        if char\
    \ == ' ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(char)\n            if isConsonant(char)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if is_consonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    for _, c := range s {\n        if c == ' ' {\n            if len(word) >\
    \ 0 {\n                words = append(words, word)\n                word = \"\"\
    \n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   var result []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    var result []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                result = append(result, word)\n            }\n     \
    \       word = \"\"\n            consonants = 0\n        } else {\n          \
    \  word += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words\
    \ = append(words, word)\n    }\n    var result []string\n    for _, word := range\
    \ words {\n        if count_consonants(word) == n {\n            result = append(result,\
    \ word)\n        }\n    }\n    return result\n}\n", "    var result []string\n\
    \    var word string\n    for _, c := range s {\n        if c == ' ' {\n     \
    \       if count_consonants(word) == n {\n                result = append(result,\
    \ word)\n            }\n            word = \"\"\n        } else {\n          \
    \  word += string(c)\n        }\n    }\n    if count_consonants(word) == n {\n\
    \        result = append(result, word)\n    }\n    return result\n}\n", "    var\
    \ words []string\n    var word string\n    var consonants int\n    for _, c :=\
    \ range s {\n        if c == ' ' {\n            if consonants == n {\n       \
    \         words = append(words, word)\n            }\n            word = \"\"\n\
    \            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words\
    \ = append(words, word)\n    }\n    var result []string\n    for _, word := range\
    \ words {\n        if count_consonants(word) == n {\n            result = append(result,\
    \ word)\n        }\n    }\n    return result\n}\n", "    var words []string\n\
    \    var word string\n    var consonants int\n    for _, c := range s {\n    \
    \    if c == ' ' {\n            if consonants == n {\n                words =\
    \ append(words, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n        } else {\n            word += string(c)\n            if is_consonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    var vowels = \"aeiou\"\n    var is_vowel\
    \ bool\n    var is_consonant bool\n    for _, char := range s {\n        if char\
    \ == ' ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            is_vowel = false\n            is_consonant = false\n\
    \            for _, vowel := range vowels {\n                if char == vowel\
    \ {\n                    is_vowel = true\n                    break\n        \
    \        }\n            }\n            if !is_vowel {\n                is_consonant\
    \ = true\n            }\n            if is_consonant {\n                consonants++\n\
    \            }\n            word += string(char)\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n \
    \               consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    words := []string{}\n    for _, word := range\
    \ split(s) {\n        if count_consonants(word) == n {\n            words = append(words,\
    \ word)\n        }\n    }\n    return words\n}\n", "    var words []string\n \
    \   var word string\n    var consonants int\n    for _, c := range s {\n     \
    \   if c == ' ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if isConsonant(c)\
    \ {\n                consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    var vowels = \"aeiouAEIOU\"\n    for _, c := range s {\n        if\
    \ c == ' ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if !strings.Contains(vowels,\
    \ string(c)) {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    var result []string\n    var word string\n    for _, c :=\
    \ range s {\n        if c == ' ' {\n            if len(word) > 0 {\n         \
    \       if count_consonants(word) == n {\n                    result = append(result,\
    \ word)\n                }\n                word = \"\"\n            }\n     \
    \   } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        if count_consonants(word) == n {\n            result = append(result,\
    \ word)\n        }\n    }\n    return result\n}\n", "    var words []string\n\
    \    var word string\n    var consonants int\n    for _, c := range s {\n    \
    \    if c == ' ' {\n            if consonants == n {\n                words =\
    \ append(words, word)\n            }\n            word = \"\"\n            consonants\
    \ = 0\n        } else {\n            word += string(c)\n            if c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var result []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word)\
    \ > 0 {\n                if count_consonants(word) == n {\n                  \
    \  result = append(result, word)\n                }\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        if count_consonants(word) == n {\n   \
    \         result = append(result, word)\n        }\n    }\n    return result\n\
    }\n", "    var words []string\n    var word string\n    for _, c := range s {\n\
    \        if c == ' ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    words = append(words, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            words = append(words, word)\n        }\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o' &&\
    \ c != 'u' {\n                consonants++\n            }\n        }\n    }\n\
    \    if consonants == n {\n        words = append(words, word)\n    }\n    return\
    \ words\n}\n", "    var words []string\n    var word string\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            if len(word) > 0 {\n               \
    \ words = append(words, word)\n                word = \"\"\n            }\n  \
    \      } else {\n            word += string(c)\n        }\n    }\n    if len(word)\
    \ > 0 {\n        words = append(words, word)\n    }\n    var result []string\n\
    \    for _, word := range words {\n        if count_consonants(word) == n {\n\
    \            result = append(result, word)\n        }\n    }\n    return result\n\
    }\n", "    var result []string\n    var word string\n    var consonants int\n\
    \    for _, char := range s {\n        if char == ' ' {\n            if consonants\
    \ == n {\n                result = append(result, word)\n            }\n     \
    \       word = \"\"\n            consonants = 0\n        } else {\n          \
    \  word += string(char)\n            if isConsonant(char) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        result = append(result,\
    \ word)\n    }\n    return result\n}\n", "    return nil\n}\n", "    var words\
    \ []string\n    var word string\n    var consonants int\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            if consonants == n {\n             \
    \   words = append(words, word)\n            }\n            word = \"\"\n    \
    \        consonants = 0\n        } else {\n            word += string(c)\n   \
    \         if isConsonant(c) {\n                consonants++\n            }\n \
    \       }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if is_consonant(c) {\n  \
    \              consonants++\n            }\n        }\n    }\n    if consonants\
    \ == n {\n        words = append(words, word)\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    var consonants int\n    for _,\
    \ c := range s {\n        if c == ' ' {\n            if consonants == n {\n  \
    \              words = append(words, word)\n            }\n            word =\
    \ \"\"\n            consonants = 0\n        } else {\n            word += string(c)\n\
    \            if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        words = append(words, word)\n\
    \    }\n    return words\n}\n", "    var words []string\n    var word string\n\
    \    var consonants int\n    for _, c := range s {\n        if c == ' ' {\n  \
    \          if consonants == n {\n                words = append(words, word)\n\
    \            }\n            word = \"\"\n            consonants = 0\n        }\
    \ else {\n            word += string(c)\n            if c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n         \
    \   }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            word += string(c)\n            if c != 'a' && c\
    \ != 'e' && c != 'i' && c != 'o' && c != 'u' {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    var consonants int\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if consonants == n {\n                words = append(words,\
    \ word)\n            }\n            word = \"\"\n            consonants = 0\n\
    \        } else {\n            if c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u' {\n                consonants++\n            }\n            word\
    \ += string(c)\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word)\
    \ > 0 {\n                words = append(words, word)\n                word = \"\
    \"\n            }\n        } else {\n            word += string(c)\n        }\n\
    \    }\n    if len(word) > 0 {\n        words = append(words, word)\n    }\n \
    \   var result []string\n    for _, word := range words {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    // your code here\n    return nil\n}\n", "    var result\
    \ []string\n    var word string\n    for _, c := range s {\n        if c == '\
    \ ' {\n            if len(word) > 0 {\n                if count_consonants(word)\
    \ == n {\n                    result = append(result, word)\n                }\n\
    \                word = \"\"\n            }\n        } else {\n            word\
    \ += string(c)\n        }\n    }\n    if len(word) > 0 {\n        if count_consonants(word)\
    \ == n {\n            result = append(result, word)\n        }\n    }\n    return\
    \ result\n}\n", "    var words []string\n    var word string\n    var consonants\
    \ int\n    for _, c := range s {\n        if c == ' ' {\n            if consonants\
    \ == n {\n                words = append(words, word)\n            }\n       \
    \     word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if isConsonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    return nil\n}\n", "    var result\
    \ []string\n    var word string\n    var consonants int\n    for _, c := range\
    \ s {\n        if c == ' ' {\n            if consonants == n {\n             \
    \   result = append(result, word)\n            }\n            word = \"\"\n  \
    \          consonants = 0\n        } else {\n            word += string(c)\n \
    \           if isConsonant(c) {\n                consonants++\n            }\n\
    \        }\n    }\n    if consonants == n {\n        result = append(result, word)\n\
    \    }\n    return result\n}\n", "    var result []string\n    words := strings.Split(s,\
    \ \" \")\n    for _, word := range words {\n        if len(word) == n {\n    \
    \        result = append(result, word)\n        }\n    }\n    return result\n\
    }\n", "    var words []string\n    var word string\n    var consonants int\n \
    \   for _, c := range s {\n        if c == ' ' {\n            if consonants ==\
    \ n {\n                words = append(words, word)\n            }\n          \
    \  word = \"\"\n            consonants = 0\n        } else {\n            word\
    \ += string(c)\n            if is_consonant(c) {\n                consonants++\n\
    \            }\n        }\n    }\n    if consonants == n {\n        words = append(words,\
    \ word)\n    }\n    return words\n}\n", "    var words []string\n    var word\
    \ string\n    for _, c := range s {\n        if c == ' ' {\n            if len(word)\
    \ > 0 {\n                if countConsonants(word) == n {\n                   \
    \ words = append(words, word)\n                }\n                word = \"\"\n\
    \            }\n        } else {\n            word += string(c)\n        }\n \
    \   }\n    if len(word) > 0 {\n        if countConsonants(word) == n {\n     \
    \       words = append(words, word)\n        }\n    }\n    return words\n}\n",
  "    var words []string\n    var word string\n    for _, c := range s {\n      \
    \  if c == ' ' {\n            if len(word) > 0 {\n                words = append(words,\
    \ word)\n                word = \"\"\n            }\n        } else {\n      \
    \      word += string(c)\n        }\n    }\n    if len(word) > 0 {\n        words\
    \ = append(words, word)\n    }\n    var selected []string\n    for _, word :=\
    \ range words {\n        if count_consonants(word) == n {\n            selected\
    \ = append(selected, word)\n        }\n    }\n    return selected\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
