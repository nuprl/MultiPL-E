name: HumanEval_95_check_dict_case
language: go_test.go
prompt: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a dictionary, return True if all keys are strings in lower \n// case\
  \ or all keys are strings in upper case, else return False.\n// The function should\
  \ return False is the given dictionary is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
  a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
  a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
  a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
  STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
  \ bool {\n"
tests: "func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
  , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
  , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
  }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
  Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
  \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_keys\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower_case_keys = true\n            break\n        }\n    }\n    for\
    \ k, _ := range dict {\n        if lower_case_keys {\n            if k != strings.ToLower(k)\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if k != strings.ToUpper(k) {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    upper := true\n    lower := true\n    for k, _ := range dict\
    \ {\n        if k != strings.ToUpper(k) {\n            upper = false\n       \
    \ }\n        if k != strings.ToLower(k) {\n            lower = false\n       \
    \ }\n    }\n    return upper || lower\n}\n", "    if len(dict) == 0 {\n      \
    \  return false\n    }\n    var lower_case_keys, upper_case_keys bool\n    for\
    \ k, _ := range dict {\n        if k == strings.ToLower(k) {\n            lower_case_keys\
    \ = true\n        } else if k == strings.ToUpper(k) {\n            upper_case_keys\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ lower_case_keys || upper_case_keys\n}\n", "    if len(dict) == 0 {\n       \
    \ return false\n    }\n    lower := true\n    upper := true\n    for k, _ := range\
    \ dict {\n        if k != strings.ToLower(k) {\n            lower = false\n  \
    \      }\n        if k != strings.ToUpper(k) {\n            upper = false\n  \
    \      }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    var is_lower bool\n    for k, _ := range dict\
    \ {\n        if is_lower == false && k == strings.ToLower(k) {\n            is_lower\
    \ = true\n        } else if is_lower == true && k == strings.ToUpper(k) {\n  \
    \          is_lower = false\n        } else {\n            return false\n    \
    \    }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var lower_case bool\n    for k, _ := range dict {\n      \
    \  if k == strings.ToLower(k) {\n            lower_case = true\n        } else\
    \ {\n            lower_case = false\n            break\n        }\n    }\n   \
    \ if lower_case {\n        return true\n    }\n    for k, _ := range dict {\n\
    \        if k == strings.ToUpper(k) {\n            return true\n        }\n  \
    \  }\n    return false\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var lower, upper bool\n    for k, _ := range dict {\n        if k\
    \ == strings.ToLower(k) {\n            lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else {\n            return false\n  \
    \      }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    var is_upper bool\n    for k, _ := range dict\
    \ {\n        if k == strings.ToUpper(k) {\n            is_upper = true\n     \
    \   } else if k == strings.ToLower(k) {\n            is_upper = false\n      \
    \  } else {\n            return false\n        }\n    }\n    return true\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n \
    \   for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            is_lower = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var lowerCase bool\n    for k, _ := range dict {\n       \
    \ if k == strings.ToLower(k) {\n            lowerCase = true\n        } else {\n\
    \            lowerCase = false\n            break\n        }\n    }\n    if lowerCase\
    \ {\n        return true\n    }\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToUpper(k) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for\
    \ k, _ := range dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n    for\
    \ k, _ := range dict {\n        if k == strings.ToLower(k) {\n            is_lower\
    \ = true\n        } else if k == strings.ToUpper(k) {\n            is_lower =\
    \ false\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    var isUpper\
    \ bool\n    for k, _ := range dict {\n        if isUpper {\n            if k !=\
    \ strings.ToUpper(k) {\n                return false\n            }\n        }\
    \ else {\n            if k != strings.ToLower(k) {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    var lower bool\n    for k, _ := range\
    \ dict {\n        if k == strings.ToLower(k) {\n            lower = true\n   \
    \     } else {\n            lower = false\n            break\n        }\n    }\n\
    \    if lower {\n        return true\n    }\n    for k, _ := range dict {\n  \
    \      if k == strings.ToUpper(k) {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    var lower_case bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower_case = true\n        } else {\n            lower_case =\
    \ false\n            break\n        }\n    }\n    if lower_case {\n        return\
    \ true\n    }\n    var upper_case bool\n    for k, _ := range dict {\n       \
    \ if k == strings.ToUpper(k) {\n            upper_case = true\n        } else\
    \ {\n            upper_case = false\n            break\n        }\n    }\n   \
    \ return upper_case\n}\n", "    if len(dict) == 0 {\n        return false\n  \
    \  }\n    var lower_case_keys bool\n    for k, _ := range dict {\n        if k\
    \ == strings.ToLower(k) {\n            lower_case_keys = true\n            break\n\
    \        }\n    }\n    if lower_case_keys {\n        for k, _ := range dict {\n\
    \            if k != strings.ToLower(k) {\n                return false\n    \
    \        }\n        }\n    } else {\n        for k, _ := range dict {\n      \
    \      if k != strings.ToUpper(k) {\n                return false\n          \
    \  }\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n    \
    \    return false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n\
    \        if is_lower {\n            if k != k {\n                return false\n\
    \            }\n        } else {\n            if k == k {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var lower_case_keys bool\n    for key,\
    \ _ := range dict {\n        if key == strings.ToLower(key) {\n            lower_case_keys\
    \ = true\n            break\n        }\n    }\n    for key, _ := range dict {\n\
    \        if lower_case_keys {\n            if key != strings.ToLower(key) {\n\
    \                return false\n            }\n        } else {\n            if\
    \ key != strings.ToUpper(key) {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n        if\
    \ k == strings.ToLower(k) {\n            is_lower = true\n        } else if k\
    \ == strings.ToUpper(k) {\n            is_lower = false\n        } else {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    lower := true\n    upper := true\n\
    \    for key, _ := range dict {\n        if key != strings.ToLower(key) {\n  \
    \          lower = false\n        }\n        if key != strings.ToUpper(key) {\n\
    \            upper = false\n        }\n    }\n    return lower || upper\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    var is_upper bool\n \
    \   for k, _ := range dict {\n        if is_upper {\n            if k != k.ToUpper()\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if k != k.ToLower() {\n                return false\n            }\n     \
    \   }\n        is_upper = !is_upper\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var is_upper bool\n    for k, _ :=\
    \ range dict {\n        if k[0] >= 'A' && k[0] <= 'Z' {\n            is_upper\
    \ = true\n            break\n        }\n    }\n    for k, _ := range dict {\n\
    \        if is_upper {\n            if k[0] >= 'a' && k[0] <= 'z' {\n        \
    \        return false\n            }\n        } else {\n            if k[0] >=\
    \ 'A' && k[0] <= 'Z' {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    is_lower := true\n    is_upper := true\n    for k, _ := range dict\
    \ {\n        if k != strings.ToLower(k) {\n            is_lower = false\n    \
    \    }\n        if k != strings.ToUpper(k) {\n            is_upper = false\n \
    \       }\n    }\n    return is_lower || is_upper\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    var lower_case_count int = 0\n    var\
    \ upper_case_count int = 0\n    for key, _ := range dict {\n        if key ==\
    \ \"\" {\n            return false\n        }\n        if key == strings.ToLower(key)\
    \ {\n            lower_case_count++\n        } else if key == strings.ToUpper(key)\
    \ {\n            upper_case_count++\n        } else {\n            return false\n\
    \        }\n    }\n    if lower_case_count == len(dict) || upper_case_count ==\
    \ len(dict) {\n        return true\n    }\n    return false\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var is_lower bool\n    for k, _ :=\
    \ range dict {\n        if is_lower == false && k == strings.ToLower(k) {\n  \
    \          is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            is_lower = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var lower_count, upper_count int\n    for key, _ := range\
    \ dict {\n        if key == strings.ToLower(key) {\n            lower_count++\n\
    \        } else if key == strings.ToUpper(key) {\n            upper_count++\n\
    \        }\n    }\n    return lower_count == len(dict) || upper_count == len(dict)\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_keys,\
    \ upper_case_keys int\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case_keys += 1\n        } else if key == strings.ToUpper(key)\
    \ {\n            upper_case_keys += 1\n        }\n    }\n    if lower_case_keys\
    \ == len(dict) || upper_case_keys == len(dict) {\n        return true\n    }\n\
    \    return false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    var lower_case_keys, upper_case_keys bool\n    for k, _ := range dict {\n\
    \        if k == k {\n            lower_case_keys = true\n        } else {\n \
    \           upper_case_keys = true\n        }\n    }\n    return lower_case_keys\
    \ || upper_case_keys\n}\n", "    if len(dict) == 0 {\n        return false\n \
    \   }\n    upper := true\n    lower := true\n    for k, _ := range dict {\n  \
    \      if k != strings.ToUpper(k) {\n            upper = false\n        }\n  \
    \      if k != strings.ToLower(k) {\n            lower = false\n        }\n  \
    \  }\n    return upper || lower\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    upper := true\n    lower := true\n    for k, _ := range dict\
    \ {\n        if k != strings.ToUpper(k) {\n            upper = false\n       \
    \ }\n        if k != strings.ToLower(k) {\n            lower = false\n       \
    \ }\n    }\n    return upper || lower\n}\n", "    if len(dict) == 0 {\n      \
    \  return false\n    }\n    var is_upper bool\n    for k, _ := range dict {\n\
    \        if is_upper {\n            if k != k.ToUpper() {\n                return\
    \ false\n            }\n        } else {\n            if k != k.ToLower() {\n\
    \                return false\n            }\n        }\n        is_upper = !is_upper\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var upper bool\n    for key, _ := range dict {\n        if key ==\
    \ strings.ToUpper(key) {\n            upper = true\n        } else if key == strings.ToLower(key)\
    \ {\n            upper = false\n        } else {\n            return false\n \
    \       }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n        if\
    \ k[0] >= 'a' && k[0] <= 'z' {\n            is_lower = true\n            break\n\
    \        }\n    }\n    for k, _ := range dict {\n        if is_lower {\n     \
    \       if k[0] >= 'A' && k[0] <= 'Z' {\n                return false\n      \
    \      }\n        } else {\n            if k[0] >= 'a' && k[0] <= 'z' {\n    \
    \            return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower {\n            if k\
    \ != k[:1] + k[1:].ToLower() {\n                return false\n            }\n\
    \        } else {\n            if k != k[:1] + k[1:].ToUpper() {\n           \
    \     return false\n            }\n        }\n        is_lower = !is_lower\n \
    \   }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var lower, upper bool\n    for k, _ := range dict {\n        if k\
    \ == strings.ToLower(k) {\n            lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else {\n            return false\n  \
    \      }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    var lower_case bool\n    for k, _ := range dict\
    \ {\n        if k[0] >= 'a' && k[0] <= 'z' {\n            lower_case = true\n\
    \            break\n        }\n    }\n    for k, _ := range dict {\n        if\
    \ lower_case {\n            if k[0] >= 'A' && k[0] <= 'Z' {\n                return\
    \ false\n            }\n        } else {\n            if k[0] >= 'a' && k[0] <=\
    \ 'z' {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    upper\
    \ := true\n    lower := true\n    for k, _ := range dict {\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n    }\n    return upper || lower\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    is_lower := true\n\
    \    is_upper := true\n    for key, _ := range dict {\n        if key != strings.ToLower(key)\
    \ {\n            is_lower = false\n        }\n        if key != strings.ToUpper(key)\
    \ {\n            is_upper = false\n        }\n    }\n    return is_lower || is_upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k, _ := range\
    \ dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var is_lower bool\n    for k, _ :=\
    \ range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n            is_lower\
    \ = true\n            break\n        }\n    }\n    for k, _ := range dict {\n\
    \        if is_lower {\n            if k[0] >= 'A' && k[0] <= 'Z' {\n        \
    \        return false\n            }\n        } else {\n            if k[0] >=\
    \ 'a' && k[0] <= 'z' {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var lowerCase bool\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            lowerCase = true\n        } else {\n     \
    \       lowerCase = false\n            break\n        }\n    }\n    if lowerCase\
    \ {\n        return true\n    }\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToUpper(k) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    var\
    \ is_upper bool\n    for key, _ := range dict {\n        if key == \"\" {\n  \
    \          return false\n        }\n        if is_upper {\n            if key\
    \ != strings.ToUpper(key) {\n                return false\n            }\n   \
    \     } else {\n            if key != strings.ToLower(key) {\n               \
    \ return false\n            }\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, _ := range dict {\n\
    \        if k != strings.ToLower(k) && k != strings.ToUpper(k) {\n           \
    \ return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    var is_upper bool\n    for k, _ := range\
    \ dict {\n        if is_upper {\n            if k != k.ToUpper() {\n         \
    \       return false\n            }\n        } else {\n            if k != k.ToLower()\
    \ {\n                return false\n            }\n        }\n        is_upper\
    \ = !is_upper\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n      \
    \  return false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n\
    \        if is_lower {\n            if k != k[:1] + k[1:].ToLower() {\n      \
    \          return false\n            }\n        } else {\n            if k !=\
    \ k[:1] + k[1:].ToUpper() {\n                return false\n            }\n   \
    \     }\n        is_lower = !is_lower\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var is_upper bool\n    for k, _ :=\
    \ range dict {\n        if k == strings.ToUpper(k) {\n            is_upper = true\n\
    \        } else if k == strings.ToLower(k) {\n            is_upper = false\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower bool\n\
    \    var upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n      \
    \  return false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n\
    \        if is_lower == false && k == strings.ToLower(k) {\n            is_lower\
    \ = true\n        } else if is_lower == true && k == strings.ToUpper(k) {\n  \
    \          is_lower = false\n        } else {\n            return false\n    \
    \    }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for key, _ := range dict {\n        if key != strings.ToLower(key)\
    \ && key != strings.ToUpper(key) {\n            return false\n        }\n    }\n\
    \    return true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    var is_lower bool\n    for k, _ := range dict {\n        if is_lower == false\
    \ && k == strings.ToLower(k) {\n            is_lower = true\n        } else if\
    \ is_lower == true && k == strings.ToUpper(k) {\n            is_lower = false\n\
    \        } else {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var upper bool\n\
    \    var lower bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n", "    if len(dict) == 0 {\n      \
    \  return false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n\
    \        if k[0] >= 'a' && k[0] <= 'z' {\n            is_lower = true\n      \
    \      break\n        }\n    }\n    for k, _ := range dict {\n        if is_lower\
    \ {\n            if k[0] >= 'A' && k[0] <= 'Z' {\n                return false\n\
    \            }\n        } else {\n            if k[0] >= 'a' && k[0] <= 'z' {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key, _ :=\
    \ range dict {\n        if key != strings.ToLower(key) && key != strings.ToUpper(key)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var upper bool\n    for k,\
    \ _ := range dict {\n        if k == strings.ToUpper(k) {\n            upper =\
    \ true\n        } else {\n            upper = false\n            break\n     \
    \   }\n    }\n    for k, _ := range dict {\n        if upper {\n            if\
    \ k != strings.ToUpper(k) {\n                return false\n            }\n   \
    \     } else {\n            if k != strings.ToLower(k) {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var lower bool\n    for k, _ := range\
    \ dict {\n        if k == strings.ToLower(k) {\n            lower = true\n   \
    \     } else {\n            lower = false\n            break\n        }\n    }\n\
    \    if lower {\n        return true\n    }\n    for k, _ := range dict {\n  \
    \      if k == strings.ToUpper(k) {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    var lower_case_keys bool\n    for key, _ := range dict {\n        if key\
    \ == strings.ToLower(key) {\n            lower_case_keys = true\n            break\n\
    \        }\n    }\n    for key, _ := range dict {\n        if lower_case_keys\
    \ {\n            if key != strings.ToLower(key) {\n                return false\n\
    \            }\n        } else {\n            if key != strings.ToUpper(key) {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            is_lower = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var lower, upper bool\n    for key, _ := range dict {\n  \
    \      if key == strings.ToLower(key) {\n            lower = true\n        } else\
    \ if key == strings.ToUpper(key) {\n            upper = true\n        } else {\n\
    \            return false\n        }\n    }\n    return lower || upper\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    is_lower := true\n  \
    \  is_upper := true\n    for key, _ := range dict {\n        if key != strings.ToLower(key)\
    \ {\n            is_lower = false\n        }\n        if key != strings.ToUpper(key)\
    \ {\n            is_upper = false\n        }\n    }\n    return is_lower || is_upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_keys,\
    \ upper_case_keys bool\n    for key, _ := range dict {\n        if key == key\
    \ {\n            lower_case_keys = true\n        } else {\n            upper_case_keys\
    \ = true\n        }\n    }\n    return lower_case_keys || upper_case_keys\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n    upper\
    \ := true\n    for key, _ := range dict {\n        if key != strings.ToLower(key)\
    \ {\n            lower = false\n        }\n        if key != strings.ToUpper(key)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower_count\
    \ int = 0\n    var upper_count int = 0\n    for key, _ := range dict {\n     \
    \   if key == strings.ToLower(key) {\n            lower_count += 1\n        }\
    \ else if key == strings.ToUpper(key) {\n            upper_count += 1\n      \
    \  }\n    }\n    if lower_count == len(dict) || upper_count == len(dict) {\n \
    \       return true\n    }\n    return false\n}\n", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    var lower, upper bool\n    for k, _ := range\
    \ dict {\n        if k == strings.ToLower(k) {\n            lower = true\n   \
    \     } else if k == strings.ToUpper(k) {\n            upper = true\n        }\
    \ else {\n            return false\n        }\n    }\n    return lower || upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for key, _ := range dict {\n        if is_lower {\n            if\
    \ key != to_lower(key) {\n                return false\n            }\n      \
    \  } else {\n            if key != to_upper(key) {\n                return false\n\
    \            }\n        }\n        is_lower = !is_lower\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for key, _ :=\
    \ range dict {\n        if key != strings.ToLower(key) && key != strings.ToUpper(key)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n    for\
    \ k, _ := range dict {\n        if k == strings.ToLower(k) {\n            is_lower\
    \ = true\n        } else if k == strings.ToUpper(k) {\n            is_lower =\
    \ false\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            lower = false\n      \
    \      break\n        }\n    }\n    if lower {\n        return true\n    }\n \
    \   for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n         \
    \   return true\n        }\n    }\n    return false\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    var is_lower bool\n    for k, _ := range\
    \ dict {\n        if is_lower == false && k == strings.ToLower(k) {\n        \
    \    is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            is_lower = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var lowerCase bool\n    for key, _ := range dict {\n     \
    \   if key == strings.ToLower(key) {\n            lowerCase = true\n        }\
    \ else {\n            lowerCase = false\n            break\n        }\n    }\n\
    \    if lowerCase {\n        return true\n    }\n    for key, _ := range dict\
    \ {\n        if key == strings.ToUpper(key) {\n            lowerCase = true\n\
    \        } else {\n            lowerCase = false\n            break\n        }\n\
    \    }\n    return lowerCase\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var is_upper bool\n    for k, _ := range dict {\n        if is_upper\
    \ {\n            if k != k.ToUpper() {\n                return false\n       \
    \     }\n        } else {\n            if k != k.ToLower() {\n               \
    \ return false\n            }\n        }\n        is_upper = !is_upper\n    }\n\
    \    return true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    var is_upper bool\n    for k, _ := range dict {\n        if k[0] >= 'A' &&\
    \ k[0] <= 'Z' {\n            is_upper = true\n            break\n        }\n \
    \   }\n    for k, _ := range dict {\n        if is_upper {\n            if k[0]\
    \ >= 'a' && k[0] <= 'z' {\n                return false\n            }\n     \
    \   } else {\n            if k[0] >= 'A' && k[0] <= 'Z' {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var lower_case_keys bool\n    for k,\
    \ _ := range dict {\n        if k == strings.ToLower(k) {\n            lower_case_keys\
    \ = true\n            break\n        }\n    }\n    for k, _ := range dict {\n\
    \        if lower_case_keys {\n            if k != strings.ToLower(k) {\n    \
    \            return false\n            }\n        } else {\n            if k !=\
    \ strings.ToUpper(k) {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    if len(dict) == 1 {\n        return true\n    }\n    var lower_case_keys,\
    \ upper_case_keys int\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower_case_keys++\n        } else if k == strings.ToUpper(k)\
    \ {\n            upper_case_keys++\n        }\n    }\n    if lower_case_keys ==\
    \ len(dict) || upper_case_keys == len(dict) {\n        return true\n    }\n  \
    \  return false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    is_lower := true\n    is_upper := true\n    for k, _ := range dict {\n  \
    \      if k != strings.ToLower(k) {\n            is_lower = false\n        }\n\
    \        if k != strings.ToUpper(k) {\n            is_upper = false\n        }\n\
    \    }\n    return is_lower || is_upper\n}\n", "    if len(dict) == 0 {\n    \
    \    return false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n\
    \        if is_lower == false && k == strings.ToLower(k) {\n            is_lower\
    \ = true\n        } else if is_lower == true && k == strings.ToUpper(k) {\n  \
    \          is_lower = false\n        } else {\n            return false\n    \
    \    }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    for key, _ := range dict {\n        if key == \"\" {\n   \
    \         return false\n        }\n        if key[0] >= 'A' && key[0] <= 'Z' {\n\
    \            for _, c := range key {\n                if c < 'A' || c > 'Z' {\n\
    \                    return false\n                }\n            }\n        }\
    \ else if key[0] >= 'a' && key[0] <= 'z' {\n            for _, c := range key\
    \ {\n                if c < 'a' || c > 'z' {\n                    return false\n\
    \                }\n            }\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    is_lower := false\n    is_upper := false\n    for k, _ :=\
    \ range dict {\n        if k == strings.ToLower(k) {\n            is_lower = true\n\
    \        } else if k == strings.ToUpper(k) {\n            is_upper = true\n  \
    \      } else {\n            return false\n        }\n    }\n    return is_lower\
    \ || is_upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n \
    \   var lower_case_count int = 0\n    var upper_case_count int = 0\n    for key,\
    \ _ := range dict {\n        if key == strings.ToLower(key) {\n            lower_case_count++\n\
    \        } else if key == strings.ToUpper(key) {\n            upper_case_count++\n\
    \        }\n    }\n    if lower_case_count == len(dict) || upper_case_count ==\
    \ len(dict) {\n        return true\n    }\n    return false\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var lowerCase bool\n    for key, _\
    \ := range dict {\n        if key == strings.ToLower(key) {\n            lowerCase\
    \ = true\n        } else {\n            lowerCase = false\n            break\n\
    \        }\n    }\n    for key, _ := range dict {\n        if lowerCase {\n  \
    \          if key != strings.ToLower(key) {\n                return false\n  \
    \          }\n        } else {\n            if key != strings.ToUpper(key) {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            is_lower = true\n            break\n        }\n    }\n    for k,\
    \ _ := range dict {\n        if is_lower {\n            if k[0] >= 'A' && k[0]\
    \ <= 'Z' {\n                return false\n            }\n        } else {\n  \
    \          if k[0] >= 'a' && k[0] <= 'z' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    is_lower := false\n    is_upper := false\n \
    \   for k, _ := range dict {\n        if k == strings.ToLower(k) {\n         \
    \   is_lower = true\n        } else if k == strings.ToUpper(k) {\n           \
    \ is_upper = true\n        } else {\n            return false\n        }\n   \
    \ }\n    return is_lower || is_upper\n}\n", "    if len(dict) == 0 {\n       \
    \ return false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n \
    \       if is_lower {\n            if k != k[:1] + k[1:].ToLower() {\n       \
    \         return false\n            }\n        } else {\n            if k != k[:1]\
    \ + k[1:].ToUpper() {\n                return false\n            }\n        }\n\
    \        is_lower = !is_lower\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var lower, upper bool\n    for k, _\
    \ := range dict {\n        if k == strings.ToLower(k) {\n            lower = true\n\
    \        } else if k == strings.ToUpper(k) {\n            upper = true\n     \
    \   } else {\n            return false\n        }\n    }\n    return lower ||\
    \ upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    lower\
    \ := true\n    upper := true\n    for key, _ := range dict {\n        if key ==\
    \ strings.ToLower(key) {\n            upper = false\n        } else if key ==\
    \ strings.ToUpper(key) {\n            lower = false\n        } else {\n      \
    \      return false\n        }\n    }\n    return lower || upper\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n    for\
    \ k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            is_lower = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower_case bool\n    for key, _ := range dict {\n \
    \       if is_lower_case == false && key == strings.ToLower(key) {\n         \
    \   is_lower_case = true\n        } else if is_lower_case == true && key == strings.ToUpper(key)\
    \ {\n            is_lower_case = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    is_lower := false\n    is_upper := false\n    for k, _ :=\
    \ range dict {\n        if k == strings.ToLower(k) {\n            is_lower = true\n\
    \        } else if k == strings.ToUpper(k) {\n            is_upper = true\n  \
    \      } else {\n            return false\n        }\n    }\n    return is_lower\
    \ || is_upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n \
    \   var is_upper bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else if k == strings.ToLower(k) {\n\
    \            is_upper = false\n        } else {\n            return false\n  \
    \      }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n        if\
    \ is_lower {\n            if k != k.ToLower() {\n                return false\n\
    \            }\n        } else {\n            if k != k.ToUpper() {\n        \
    \        return false\n            }\n        }\n        is_lower = !is_lower\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var lower, upper bool\n    for k, _ := range dict {\n        if k\
    \ == strings.ToLower(k) {\n            lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else {\n            return false\n  \
    \      }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    var lower, upper bool\n    for k, _ := range\
    \ dict {\n        if k == strings.ToLower(k) {\n            lower = true\n   \
    \     } else if k == strings.ToUpper(k) {\n            upper = true\n        }\
    \ else {\n            return false\n        }\n    }\n    return lower || upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower_case = true\n        } else {\n            lower_case = false\n\
    \            break\n        }\n    }\n    return lower_case\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    is_lower := false\n    is_upper :=\
    \ false\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n\
    \            is_lower = true\n        } else if k == strings.ToUpper(k) {\n  \
    \          is_upper = true\n        } else {\n            return false\n     \
    \   }\n    }\n    return is_lower || is_upper\n}\n", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    var lower, upper bool\n    for k, _ := range\
    \ dict {\n        if k == strings.ToLower(k) {\n            lower = true\n   \
    \     } else if k == strings.ToUpper(k) {\n            upper = true\n        }\
    \ else {\n            return false\n        }\n    }\n    return lower || upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case = true\n        } else {\n            lower_case =\
    \ false\n            break\n        }\n    }\n    if lower_case {\n        return\
    \ true\n    }\n    for key, _ := range dict {\n        if key == strings.ToUpper(key)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var upper bool\n    var lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else if k == strings.ToLower(k) {\n      \
    \      lower = true\n        } else {\n            return false\n        }\n \
    \   }\n    return upper || lower\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n        if\
    \ is_lower {\n            if k != k.ToLower() {\n                return false\n\
    \            }\n        } else {\n            if k != k.ToUpper() {\n        \
    \        return false\n            }\n        }\n        is_lower = !is_lower\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var upper bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else {\n            upper = false\n \
    \           break\n        }\n    }\n    if upper {\n        return true\n   \
    \ }\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n    \
    \        return true\n        }\n    }\n    return false\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var upper bool\n    for k, _ := range\
    \ dict {\n        if k == strings.ToUpper(k) {\n            upper = true\n   \
    \     } else {\n            upper = false\n            break\n        }\n    }\n\
    \    if upper {\n        return true\n    }\n    for k, _ := range dict {\n  \
    \      if k == strings.ToLower(k) {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    var is_upper bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            is_upper = true\n        } else if k == strings.ToLower(k) {\n\
    \            is_upper = false\n        } else {\n            return false\n  \
    \      }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower_case bool\n    for key, _ := range dict {\n \
    \       if is_lower_case {\n            if key != key {\n                return\
    \ false\n            }\n        } else {\n            if key == key {\n      \
    \          return false\n            }\n        }\n    }\n    return true\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n \
    \   for k, _ := range dict {\n        if is_lower {\n            if k != k[0:1]\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if k != k[0:1] {\n                is_lower = true\n            }\n       \
    \ }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    is_lower := false\n    is_upper := false\n    for k, _ := range dict\
    \ {\n        if k == strings.ToLower(k) {\n            is_lower = true\n     \
    \   } else if k == strings.ToUpper(k) {\n            is_upper = true\n       \
    \ } else {\n            return false\n        }\n    }\n    return is_lower ||\
    \ is_upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    lower\
    \ := true\n    upper := true\n    for key, _ := range dict {\n        if key !=\
    \ strings.ToLower(key) {\n            lower = false\n        }\n        if key\
    \ != strings.ToUpper(key) {\n            upper = false\n        }\n    }\n   \
    \ return lower || upper\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var lower, upper bool\n    for k, _ := range dict {\n        if k\
    \ == k {\n            lower = true\n        } else {\n            upper = true\n\
    \        }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    var is_lower bool\n    for k, _ := range dict\
    \ {\n        if is_lower {\n            if k != k[:1] + k[1:].ToLower() {\n  \
    \              return false\n            }\n        } else {\n            if k\
    \ != k[:1] + k[1:].ToUpper() {\n                return false\n            }\n\
    \        }\n        is_lower = !is_lower\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var lower bool\n    for k,\
    \ _ := range dict {\n        if k == strings.ToLower(k) {\n            lower =\
    \ true\n        } else {\n            lower = false\n            break\n     \
    \   }\n    }\n    if lower {\n        return true\n    }\n    for k, _ := range\
    \ dict {\n        if k == strings.ToUpper(k) {\n            return true\n    \
    \    }\n    }\n    return false\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n        if\
    \ is_lower {\n            if k != k.ToLower() {\n                return false\n\
    \            }\n        } else {\n            if k != k.ToUpper() {\n        \
    \        return false\n            }\n        }\n        is_lower = !is_lower\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var is_lower bool\n    for key, _ := range dict {\n        if is_lower\
    \ {\n            if key != key {\n                return false\n            }\n\
    \        } else {\n            if key == key {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    lower := true\n    upper := true\n   \
    \ for k, _ := range dict {\n        if k != strings.ToLower(k) {\n           \
    \ lower = false\n        }\n        if k != strings.ToUpper(k) {\n           \
    \ upper = false\n        }\n    }\n    return lower || upper\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    lower := true\n    upper := true\n\
    \    for k, _ := range dict {\n        if k != strings.ToLower(k) {\n        \
    \    lower = false\n        }\n        if k != strings.ToUpper(k) {\n        \
    \    upper = false\n        }\n    }\n    return lower || upper\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n    for\
    \ k, _ := range dict {\n        if k == strings.ToLower(k) {\n            is_lower\
    \ = true\n        } else if k == strings.ToUpper(k) {\n            is_lower =\
    \ false\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    lower\
    \ := true\n    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            is_lower = true\n            break\n        }\n    }\n    for k,\
    \ _ := range dict {\n        if is_lower {\n            if k[0] >= 'A' && k[0]\
    \ <= 'Z' {\n                return false\n            }\n        } else {\n  \
    \          if k[0] >= 'a' && k[0] <= 'z' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n", "    var lower_case, upper_case\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            upper_case = true\n        } else {\n            return false\n\
    \        }\n    }\n    return lower_case || upper_case\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var lower, upper bool\n    for k, _\
    \ := range dict {\n        if k == strings.ToLower(k) {\n            lower = true\n\
    \        } else if k == strings.ToUpper(k) {\n            upper = true\n     \
    \   } else {\n            return false\n        }\n    }\n    return lower ||\
    \ upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for\
    \ k, _ := range dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n    for\
    \ k, _ := range dict {\n        if is_lower {\n            if k != k[:1] + k[1:].ToLower()\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if k != k[:1] + k[1:].ToUpper() {\n                return false\n        \
    \    }\n        }\n        is_lower = !is_lower\n    }\n    return true\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    var lower, upper bool\n\
    \    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n        \
    \    lower = true\n        } else if k == strings.ToUpper(k) {\n            upper\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ lower || upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    is_lower := false\n    is_upper := false\n    for k, _ := range dict {\n\
    \        if k == strings.ToLower(k) {\n            is_lower = true\n        }\
    \ else if k == strings.ToUpper(k) {\n            is_upper = true\n        } else\
    \ {\n            return false\n        }\n    }\n    return is_lower || is_upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'A' && k[0] <= 'Z' {\n\
    \            is_upper = true\n            break\n        }\n    }\n    for k,\
    \ _ := range dict {\n        if is_upper {\n            if k[0] >= 'a' && k[0]\
    \ <= 'z' {\n                return false\n            }\n        } else {\n  \
    \          if k[0] >= 'A' && k[0] <= 'Z' {\n                return false\n   \
    \         }\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    var lower, upper bool\n    for k, _ := range\
    \ dict {\n        if k == strings.ToLower(k) {\n            lower = true\n   \
    \     } else if k == strings.ToUpper(k) {\n            upper = true\n        }\
    \ else {\n            return false\n        }\n    }\n    return lower || upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k, _ := range\
    \ dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var upper, lower bool\n    for key,\
    \ _ := range dict {\n        if key == key {\n            upper = true\n     \
    \   } else {\n            lower = true\n        }\n    }\n    return upper ||\
    \ lower\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    var\
    \ lower, upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n      \
    \  return false\n    }\n    is_upper := true\n    is_lower := true\n    for k,\
    \ _ := range dict {\n        if k != strings.ToUpper(k) {\n            is_upper\
    \ = false\n        }\n        if k != strings.ToLower(k) {\n            is_lower\
    \ = false\n        }\n    }\n    return is_upper || is_lower\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    if len(dict) == 1 {\n        return\
    \ true\n    }\n    var upper bool\n    var lower bool\n    for k, _ := range dict\
    \ {\n        if k == strings.ToUpper(k) {\n            upper = true\n        }\
    \ else if k == strings.ToLower(k) {\n            lower = true\n        } else\
    \ {\n            return false\n        }\n    }\n    if upper && lower {\n   \
    \     return false\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    lower := true\n    upper := true\n    for key,\
    \ _ := range dict {\n        if key != strings.ToLower(key) {\n            lower\
    \ = false\n        }\n        if key != strings.ToUpper(key) {\n            upper\
    \ = false\n        }\n    }\n    return lower || upper\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var lower_keys, upper_keys int\n  \
    \  for key, _ := range dict {\n        if key == strings.ToLower(key) {\n    \
    \        lower_keys += 1\n        } else if key == strings.ToUpper(key) {\n  \
    \          upper_keys += 1\n        }\n    }\n    return lower_keys == len(dict)\
    \ || upper_keys == len(dict)\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var upper bool\n    var lower bool\n    for key, _ := range dict {\n\
    \        if key == strings.ToUpper(key) {\n            upper = true\n        }\
    \ else if key == strings.ToLower(key) {\n            lower = true\n        } else\
    \ {\n            return false\n        }\n    }\n    return upper || lower\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    var lower, upper bool\n\
    \    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n        \
    \    lower = true\n        } else if k == strings.ToUpper(k) {\n            upper\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ lower || upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    var upper bool\n    for k, _ := range dict {\n        if k[0] >= 'A' && k[0]\
    \ <= 'Z' {\n            upper = true\n            break\n        }\n    }\n  \
    \  for k, _ := range dict {\n        if upper {\n            if k[0] >= 'a' &&\
    \ k[0] <= 'z' {\n                return false\n            }\n        } else {\n\
    \            if k[0] >= 'A' && k[0] <= 'Z' {\n                return false\n \
    \           }\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0\
    \ {\n        return false\n    }\n    var all_lower bool\n    var all_upper bool\n\
    \    for key, _ := range dict {\n        if key == strings.ToLower(key) {\n  \
    \          all_lower = true\n        } else if key == strings.ToUpper(key) {\n\
    \            all_upper = true\n        } else {\n            return false\n  \
    \      }\n    }\n    return all_lower || all_upper\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    lower := true\n    upper := true\n   \
    \ for key, _ := range dict {\n        if key != strings.ToLower(key) {\n     \
    \       lower = false\n        }\n        if key != strings.ToUpper(key) {\n \
    \           upper = false\n        }\n    }\n    return lower || upper\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    var upper bool\n    for\
    \ k, _ := range dict {\n        if k == strings.ToUpper(k) {\n            upper\
    \ = true\n        } else {\n            upper = false\n            break\n   \
    \     }\n    }\n    if upper {\n        return true\n    }\n    var lower bool\n\
    \    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n        \
    \    lower = true\n        } else {\n            lower = false\n            break\n\
    \        }\n    }\n    if lower {\n        return true\n    }\n    return false\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           is_lower = true\n        } else if k == strings.ToUpper(k) {\n   \
    \         is_lower = false\n        } else {\n            return false\n     \
    \   }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var upper bool\n    for k, _ := range dict {\n        if k\
    \ == strings.ToUpper(k) {\n            upper = true\n        } else {\n      \
    \      upper = false\n            break\n        }\n    }\n    if upper {\n  \
    \      return true\n    }\n    var lower bool\n    for k, _ := range dict {\n\
    \        if k == strings.ToLower(k) {\n            lower = true\n        } else\
    \ {\n            lower = false\n            break\n        }\n    }\n    if lower\
    \ {\n        return true\n    }\n    return false\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    for key, _ := range dict {\n        if\
    \ key != strings.ToLower(key) && key != strings.ToUpper(key) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    var is_lower_case bool\n    for key, _ := range\
    \ dict {\n        if key == strings.ToLower(key) {\n            is_lower_case\
    \ = true\n        } else if key == strings.ToUpper(key) {\n            is_lower_case\
    \ = false\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower\
    \ bool\n    for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            is_lower = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var lower, upper bool\n    for k, _ := range dict {\n    \
    \    if k == strings.ToLower(k) {\n            lower = true\n        } else if\
    \ k == strings.ToUpper(k) {\n            upper = true\n        } else {\n    \
    \        return false\n        }\n    }\n    return lower || upper\n}\n", "  \
    \  if len(dict) == 0 {\n        return false\n    }\n    for k, _ := range dict\
    \ {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k) {\n       \
    \     return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    for key, _ := range dict {\n      \
    \  if key != strings.ToLower(key) && key != strings.ToUpper(key) {\n         \
    \   return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    var is_lower bool\n    for k, _ := range\
    \ dict {\n        if is_lower {\n            if k != k[:1] + k[1:].ToLower() {\n\
    \                return false\n            }\n        } else {\n            if\
    \ k != k[:1] + k[1:].ToUpper() {\n                return false\n            }\n\
    \        }\n        is_lower = !is_lower\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var lower bool\n    var upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else if k == strings.ToUpper(k) {\n      \
    \      upper = true\n        } else {\n            return false\n        }\n \
    \   }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var lower bool\n    for key, _ := range dict {\n        if\
    \ key == strings.ToLower(key) {\n            lower = true\n        } else if key\
    \ == strings.ToUpper(key) {\n            lower = false\n        } else {\n   \
    \         return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var is_upper bool\n    for k, _ :=\
    \ range dict {\n        if k == strings.ToUpper(k) {\n            is_upper = true\n\
    \        } else if k == strings.ToLower(k) {\n            is_upper = false\n \
    \       } else {\n            return false\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if k == \"\" {\n            return\
    \ false\n        }\n        if k[0] >= 'A' && k[0] <= 'Z' {\n            is_upper\
    \ = true\n        } else if k[0] >= 'a' && k[0] <= 'z' {\n            is_upper\
    \ = false\n        } else {\n            return false\n        }\n        for\
    \ _, c := range k {\n            if is_upper {\n                if c < 'A' ||\
    \ c > 'Z' {\n                    return false\n                }\n           \
    \ } else {\n                if c < 'a' || c > 'z' {\n                    return\
    \ false\n                }\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n\
    \    upper := true\n    for key, _ := range dict {\n        if key != strings.ToLower(key)\
    \ {\n            lower = false\n        }\n        if key != strings.ToUpper(key)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n\
    \            lower_case = true\n            break\n        }\n    }\n    for k,\
    \ _ := range dict {\n        if lower_case {\n            if k[0] < 'a' || k[0]\
    \ > 'z' {\n                return false\n            }\n        } else {\n   \
    \         if k[0] < 'A' || k[0] > 'Z' {\n                return false\n      \
    \      }\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    var lower bool\n    for k, _ := range dict {\n\
    \        if k == strings.ToLower(k) {\n            lower = true\n        } else\
    \ {\n            lower = false\n            break\n        }\n    }\n    if lower\
    \ {\n        return true\n    }\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToUpper(k) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    var\
    \ lower_case_keys, upper_case_keys bool\n    for key, _ := range dict {\n    \
    \    if key == key {\n            lower_case_keys = true\n        } else {\n \
    \           upper_case_keys = true\n        }\n    }\n    return lower_case_keys\
    \ || upper_case_keys\n}\n", "    if len(dict) == 0 {\n        return false\n \
    \   }\n    var is_lower bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if k == strings.ToUpper(k) {\n\
    \            is_lower = false\n        } else {\n            return false\n  \
    \      }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n        if\
    \ is_lower == false && k == strings.ToLower(k) {\n            is_lower = true\n\
    \        } else if is_lower == true && k == strings.ToUpper(k) {\n           \
    \ is_lower = false\n        } else {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var upper bool\n    var lower bool\n    for k, _ := range dict {\n\
    \        if k == strings.ToUpper(k) {\n            upper = true\n        } else\
    \ if k == strings.ToLower(k) {\n            lower = true\n        } else {\n \
    \           return false\n        }\n    }\n    return upper || lower\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n\
    \    for k, _ := range dict {\n        if k[0] >= 'a' && k[0] <= 'z' {\n     \
    \       is_lower = true\n            break\n        }\n    }\n    for k, _ :=\
    \ range dict {\n        if is_lower {\n            if k[0] >= 'A' && k[0] <= 'Z'\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if k[0] >= 'a' && k[0] <= 'z' {\n                return false\n          \
    \  }\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n    \
    \    return false\n    }\n    var is_upper bool\n    for k, _ := range dict {\n\
    \        if is_upper {\n            if !is_upper_case(k) {\n                return\
    \ false\n            }\n        } else {\n            if !is_lower_case(k) {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    is_all_lower\
    \ := true\n    is_all_upper := true\n    for key, _ := range dict {\n        if\
    \ key != strings.ToLower(key) {\n            is_all_lower = false\n        }\n\
    \        if key != strings.ToUpper(key) {\n            is_all_upper = false\n\
    \        }\n    }\n    return is_all_lower || is_all_upper\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var is_lower bool\n    var is_upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           is_lower = true\n        } else if k == strings.ToUpper(k) {\n   \
    \         is_upper = true\n        } else {\n            return false\n      \
    \  }\n    }\n    return is_lower || is_upper\n}\n", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    is_lower := true\n    is_upper := true\n   \
    \ for k, _ := range dict {\n        if k != strings.ToLower(k) {\n           \
    \ is_lower = false\n        }\n        if k != strings.ToUpper(k) {\n        \
    \    is_upper = false\n        }\n    }\n    return is_lower || is_upper\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    lower := true\n    upper\
    \ := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k) {\n\
    \            lower = false\n        }\n        if k != strings.ToUpper(k) {\n\
    \            upper = false\n        }\n    }\n    return lower || upper\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    var upper bool\n    for\
    \ k, _ := range dict {\n        if k == strings.ToUpper(k) {\n            upper\
    \ = true\n        } else {\n            upper = false\n            break\n   \
    \     }\n    }\n    if upper {\n        return true\n    }\n    var lower bool\n\
    \    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n        \
    \    lower = true\n        } else {\n            lower = false\n            break\n\
    \        }\n    }\n    if lower {\n        return true\n    }\n    return false\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    for k, _ := range\
    \ dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k) {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    is_lower := true\n    is_upper := true\n\
    \    for k, _ := range dict {\n        if k[0] >= 'A' && k[0] <= 'Z' {\n     \
    \       is_lower = false\n        } else if k[0] >= 'a' && k[0] <= 'z' {\n   \
    \         is_upper = false\n        } else {\n            return false\n     \
    \   }\n    }\n    return is_lower || is_upper\n}\n", "    if len(dict) == 0 {\n\
    \        return false\n    }\n    var is_lower bool\n    for k, _ := range dict\
    \ {\n        if k[0] >= 'a' && k[0] <= 'z' {\n            is_lower = true\n  \
    \          break\n        }\n    }\n    for k, _ := range dict {\n        if is_lower\
    \ {\n            if k[0] >= 'A' && k[0] <= 'Z' {\n                return false\n\
    \            }\n        } else {\n            if k[0] >= 'a' && k[0] <= 'z' {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower_case\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower_case = true\n        } else {\n            lower_case = false\n\
    \            break\n        }\n    }\n    if lower_case {\n        return true\n\
    \    }\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n \
    \           return true\n        }\n    }\n    return false\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    is_lower := false\n    is_upper :=\
    \ false\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            is_lower = true\n        } else if key == strings.ToUpper(key)\
    \ {\n            is_upper = true\n        } else {\n            return false\n\
    \        }\n    }\n    return is_lower || is_upper\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    var lower_case bool\n    for key, _ :=\
    \ range dict {\n        if key == strings.ToLower(key) {\n            lower_case\
    \ = true\n        } else {\n            lower_case = false\n            break\n\
    \        }\n    }\n    for key, _ := range dict {\n        if lower_case {\n \
    \           if key != strings.ToLower(key) {\n                return false\n \
    \           }\n        } else {\n            if key != strings.ToUpper(key) {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower, upper\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else if k == strings.ToUpper(k) {\n      \
    \      upper = true\n        } else {\n            return false\n        }\n \
    \   }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n        if\
    \ k[0] >= 'a' && k[0] <= 'z' {\n            is_lower = true\n            break\n\
    \        }\n    }\n    if is_lower {\n        for k, _ := range dict {\n     \
    \       if k[0] < 'a' || k[0] > 'z' {\n                return false\n        \
    \    }\n        }\n    } else {\n        for k, _ := range dict {\n          \
    \  if k[0] < 'A' || k[0] > 'Z' {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n        if\
    \ is_lower {\n            if k != k.ToLower() {\n                return false\n\
    \            }\n        } else {\n            if k != k.ToUpper() {\n        \
    \        return false\n            }\n        }\n        is_lower = !is_lower\n\
    \    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var upper, lower bool\n    for key, _ := range dict {\n        if\
    \ key == key {\n            lower = true\n        } else {\n            upper\
    \ = true\n        }\n    }\n    return upper == lower\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var upper bool\n    var lower bool\n\
    \    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n        \
    \    upper = true\n        } else if k == strings.ToLower(k) {\n            lower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ upper || lower\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    for k, _ := range dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    for k, _ := range dict {\n\
    \        if k != strings.ToLower(k) && k != strings.ToUpper(k) {\n           \
    \ return false\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    var lower_case bool\n    var upper_case\
    \ bool\n    for key, _ := range dict {\n        if key == key {\n            lower_case\
    \ = true\n        }\n        if key == key {\n            upper_case = true\n\
    \        }\n    }\n    if lower_case == true && upper_case == true {\n       \
    \ return false\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n     \
    \   return false\n    }\n    var lower bool\n    var upper bool\n    for key,\
    \ _ := range dict {\n        if key == strings.ToLower(key) {\n            lower\
    \ = true\n        } else if key == strings.ToUpper(key) {\n            upper =\
    \ true\n        } else {\n            return false\n        }\n    }\n    return\
    \ lower || upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    var lower_case bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case = true\n        } else {\n            lower_case =\
    \ false\n            break\n        }\n    }\n    if lower_case {\n        return\
    \ true\n    }\n    for key, _ := range dict {\n        if key == strings.ToUpper(key)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var upper_count, lower_count\
    \ int\n    for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n  \
    \          upper_count++\n        } else if k == strings.ToLower(k) {\n      \
    \      lower_count++\n        }\n    }\n    return upper_count == len(dict) ||\
    \ lower_count == len(dict)\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var upper, lower bool\n    for k, _ := range dict {\n        if k\
    \ == k.ToUpper() {\n            upper = true\n        } else if k == k.ToLower()\
    \ {\n            lower = true\n        } else {\n            return false\n  \
    \      }\n    }\n    return upper || lower\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    var is_upper bool\n    var is_lower bool\n  \
    \  for k, _ := range dict {\n        if k == strings.ToUpper(k) {\n          \
    \  is_upper = true\n        } else if k == strings.ToLower(k) {\n            is_lower\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ is_upper || is_lower\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var lower_case bool\n    for key, _ := range dict {\n        if key\
    \ == strings.ToLower(key) {\n            lower_case = true\n        } else {\n\
    \            lower_case = false\n            break\n        }\n    }\n    if lower_case\
    \ {\n        return true\n    }\n    for key, _ := range dict {\n        if key\
    \ == strings.ToUpper(key) {\n            lower_case = true\n        } else {\n\
    \            lower_case = false\n            break\n        }\n    }\n    return\
    \ lower_case\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n  \
    \  var lower_case_keys = true\n    var upper_case_keys = true\n    for key, _\
    \ := range dict {\n        if key != strings.ToLower(key) {\n            lower_case_keys\
    \ = false\n        }\n        if key != strings.ToUpper(key) {\n            upper_case_keys\
    \ = false\n        }\n    }\n    return lower_case_keys || upper_case_keys\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n \
    \   for k, _ := range dict {\n        if k == strings.ToLower(k) {\n         \
    \   is_lower = true\n        } else if k == strings.ToUpper(k) {\n           \
    \ is_lower = false\n        } else {\n            return false\n        }\n  \
    \  }\n    return true\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var lower_case bool\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToLower(k) {\n            lower_case = true\n        } else {\n    \
    \        lower_case = false\n            break\n        }\n    }\n    if lower_case\
    \ {\n        return true\n    }\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToUpper(k) {\n            lower_case = true\n        } else {\n    \
    \        lower_case = false\n            break\n        }\n    }\n    return lower_case\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_keys\
    \ bool\n    for key, _ := range dict {\n        if key == strings.ToLower(key)\
    \ {\n            lower_case_keys = true\n            break\n        }\n    }\n\
    \    for key, _ := range dict {\n        if lower_case_keys {\n            if\
    \ key != strings.ToLower(key) {\n                return false\n            }\n\
    \        } else {\n            if key != strings.ToUpper(key) {\n            \
    \    return false\n            }\n        }\n    }\n    return true\n}\n", " \
    \   if len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n\
    \    for k, _ := range dict {\n        if is_lower {\n            if k != k.ToLower()\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if k != k.ToUpper() {\n                return false\n            }\n     \
    \   }\n        is_lower = !is_lower\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var lower, upper bool\n    for k, _\
    \ := range dict {\n        if k == strings.ToLower(k) {\n            lower = true\n\
    \        } else if k == strings.ToUpper(k) {\n            upper = true\n     \
    \   } else {\n            return false\n        }\n    }\n    return lower ||\
    \ upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    var\
    \ upper bool\n    var lower bool\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToUpper(k) {\n            upper = true\n        } else if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else {\n            return false\n  \
    \      }\n    }\n    return upper || lower\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    var is_lower bool\n    for k, _ := range dict\
    \ {\n        if is_lower == false && k == strings.ToLower(k) {\n            is_lower\
    \ = true\n        } else if is_lower == true && k == strings.ToUpper(k) {\n  \
    \          is_lower = false\n        } else {\n            return false\n    \
    \    }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower bool\n    for key, _ := range dict {\n      \
    \  if key == strings.ToLower(key) {\n            is_lower = true\n        } else\
    \ if key == strings.ToUpper(key) {\n            is_lower = false\n        } else\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    var\
    \ lower_case, upper_case bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower_case = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            upper_case = true\n        } else {\n            return false\n\
    \        }\n    }\n    return lower_case || upper_case\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var lower, upper bool\n    for k, _\
    \ := range dict {\n        if k == strings.ToLower(k) {\n            lower = true\n\
    \        } else if k == strings.ToUpper(k) {\n            upper = true\n     \
    \   } else {\n            return false\n        }\n    }\n    return lower ||\
    \ upper\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    var\
    \ lower, upper bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower = true\n        } else if k == strings.ToUpper(k) {\n \
    \           upper = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n      \
    \  return false\n    }\n    var lower_case bool\n    for k, _ := range dict {\n\
    \        if k == strings.ToLower(k) {\n            lower_case = true\n       \
    \ } else {\n            lower_case = false\n            break\n        }\n   \
    \ }\n    if lower_case {\n        return true\n    }\n    for k, _ := range dict\
    \ {\n        if k == strings.ToUpper(k) {\n            lower_case = true\n   \
    \     } else {\n            lower_case = false\n            break\n        }\n\
    \    }\n    return lower_case\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var upper bool\n    var lower bool\n    for k, _ := range\
    \ dict {\n        if k == strings.ToUpper(k) {\n            upper = true\n   \
    \     } else if k == strings.ToLower(k) {\n            lower = true\n        }\
    \ else {\n            return false\n        }\n    }\n    return upper || lower\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var upper bool\n\
    \    var lower bool\n    for k, _ := range dict {\n        if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else if k == strings.ToLower(k) {\n \
    \           lower = true\n        } else {\n            return false\n       \
    \ }\n    }\n    return upper || lower\n}\n", "    if len(dict) == 0 {\n      \
    \  return false\n    }\n    var upper bool\n    var lower bool\n    for k, _ :=\
    \ range dict {\n        if k == strings.ToUpper(k) {\n            upper = true\n\
    \        } else if k == strings.ToLower(k) {\n            lower = true\n     \
    \   } else {\n            return false\n        }\n    }\n    return upper ||\
    \ lower\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    lower\
    \ := true\n    upper := true\n    for k, _ := range dict {\n        if k != strings.ToLower(k)\
    \ {\n            lower = false\n        }\n        if k != strings.ToUpper(k)\
    \ {\n            upper = false\n        }\n    }\n    return lower || upper\n\
    }\n", "    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_count,\
    \ upper_case_count int\n    for key, _ := range dict {\n        if key == \"\"\
    \ {\n            return false\n        }\n        for _, char := range key {\n\
    \            if char >= 'a' && char <= 'z' {\n                lower_case_count++\n\
    \            } else if char >= 'A' && char <= 'Z' {\n                upper_case_count++\n\
    \            } else {\n                return false\n            }\n        }\n\
    \    }\n    if lower_case_count == 0 || upper_case_count == 0 {\n        return\
    \ true\n    }\n    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
