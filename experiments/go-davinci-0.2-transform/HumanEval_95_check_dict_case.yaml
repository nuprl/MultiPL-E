name: HumanEval_95_check_dict_case
language: go_test.go
prompt: "package check_dict_case_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a dictionary, return True if all keys are strings in lower \n// case\
  \ or all keys are strings in upper case, else return False.\n// The function should\
  \ return False is the given dictionary is empty.\n// Examples:\n// >>> check_dict_case(map[string]string{\"\
  a\": \"apple\", \"b\": \"banana\"})\n// true\n// >>> check_dict_case(map[string]string{\"\
  a\": \"apple\", \"A\": \"banana\", \"B\": \"banana\"})\n// false\n// >>> check_dict_case(map[interface{}]string{\"\
  a\": \"apple\", 8: \"banana\", \"a\": \"apple\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"})\n// false\n// >>> check_dict_case(map[string]string{\"\
  STATE\": \"NC\", \"ZIP\": \"12345\"})\n// true\nfunc check_dict_case(dict map[string]string)\
  \ bool {\n"
tests: "func TestCheck_Dict_Case(t *testing.T) {\n  candidate := check_dict_case\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(map[string]string{\"p\": \"pineapple\"\
  , \"b\": \"banana\"}), expected: true },\n     { actual: candidate(map[string]string{\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"p\": \"pineapple\", \"5\": \"banana\"\
  , \"a\": \"apple\"}), expected: false },\n     { actual: candidate(map[string]string{\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}), expected: false },\n\
  \     { actual: candidate(map[string]string{\"STATE\": \"NC\", \"ZIP\": \"12345\"\
  }), expected: true },\n     { actual: candidate(map[string]string{\"fruit\": \"\
  Orange\", \"taste\": \"Sweet\"}), expected: true },\n     { actual: candidate(map[string]string{}),\
  \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if len(dict) == 0 {\n        return false\n    }\n    var lower_case_keys\
    \ bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k) {\n \
    \           lower_case_keys = true\n            break\n        }\n    }\n    for\
    \ k, _ := range dict {\n        if lower_case_keys {\n            if k != strings.ToLower(k)\
    \ {\n                return false\n            }\n        } else {\n         \
    \   if k != strings.ToUpper(k) {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    upper := true\n    lower := true\n    for k, _ := range dict\
    \ {\n        if k != strings.ToUpper(k) {\n            upper = false\n       \
    \ }\n        if k != strings.ToLower(k) {\n            lower = false\n       \
    \ }\n    }\n    return upper || lower\n}\n", "    if len(dict) == 0 {\n      \
    \  return false\n    }\n    var lower_case_keys, upper_case_keys bool\n    for\
    \ k, _ := range dict {\n        if k == strings.ToLower(k) {\n            lower_case_keys\
    \ = true\n        } else if k == strings.ToUpper(k) {\n            upper_case_keys\
    \ = true\n        } else {\n            return false\n        }\n    }\n    return\
    \ lower_case_keys || upper_case_keys\n}\n", "    if len(dict) == 0 {\n       \
    \ return false\n    }\n    lower := true\n    upper := true\n    for k, _ := range\
    \ dict {\n        if k != strings.ToLower(k) {\n            lower = false\n  \
    \      }\n        if k != strings.ToUpper(k) {\n            upper = false\n  \
    \      }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    var is_lower bool\n    for k, _ := range dict\
    \ {\n        if is_lower == false && k == strings.ToLower(k) {\n            is_lower\
    \ = true\n        } else if is_lower == true && k == strings.ToUpper(k) {\n  \
    \          is_lower = false\n        } else {\n            return false\n    \
    \    }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var lower_case bool\n    for k, _ := range dict {\n      \
    \  if k == strings.ToLower(k) {\n            lower_case = true\n        } else\
    \ {\n            lower_case = false\n            break\n        }\n    }\n   \
    \ if lower_case {\n        return true\n    }\n    for k, _ := range dict {\n\
    \        if k == strings.ToUpper(k) {\n            return true\n        }\n  \
    \  }\n    return false\n}\n", "    if len(dict) == 0 {\n        return false\n\
    \    }\n    var lower, upper bool\n    for k, _ := range dict {\n        if k\
    \ == strings.ToLower(k) {\n            lower = true\n        } else if k == strings.ToUpper(k)\
    \ {\n            upper = true\n        } else {\n            return false\n  \
    \      }\n    }\n    return lower || upper\n}\n", "    if len(dict) == 0 {\n \
    \       return false\n    }\n    var is_upper bool\n    for k, _ := range dict\
    \ {\n        if k == strings.ToUpper(k) {\n            is_upper = true\n     \
    \   } else if k == strings.ToLower(k) {\n            is_upper = false\n      \
    \  } else {\n            return false\n        }\n    }\n    return true\n}\n",
  "    if len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n \
    \   for k, _ := range dict {\n        if is_lower == false && k == strings.ToLower(k)\
    \ {\n            is_lower = true\n        } else if is_lower == true && k == strings.ToUpper(k)\
    \ {\n            is_lower = false\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var lowerCase bool\n    for k, _ := range dict {\n       \
    \ if k == strings.ToLower(k) {\n            lowerCase = true\n        } else {\n\
    \            lowerCase = false\n            break\n        }\n    }\n    if lowerCase\
    \ {\n        return true\n    }\n    for k, _ := range dict {\n        if k ==\
    \ strings.ToUpper(k) {\n            return true\n        }\n    }\n    return\
    \ false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    for\
    \ k, _ := range dict {\n        if k != strings.ToLower(k) && k != strings.ToUpper(k)\
    \ {\n            return false\n        }\n    }\n    return true\n}\n", "    if\
    \ len(dict) == 0 {\n        return false\n    }\n    var is_lower bool\n    for\
    \ k, _ := range dict {\n        if k == strings.ToLower(k) {\n            is_lower\
    \ = true\n        } else if k == strings.ToUpper(k) {\n            is_lower =\
    \ false\n        } else {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n    var isUpper\
    \ bool\n    for k, _ := range dict {\n        if isUpper {\n            if k !=\
    \ strings.ToUpper(k) {\n                return false\n            }\n        }\
    \ else {\n            if k != strings.ToLower(k) {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n", "    if len(dict) ==\
    \ 0 {\n        return false\n    }\n    var lower bool\n    for k, _ := range\
    \ dict {\n        if k == strings.ToLower(k) {\n            lower = true\n   \
    \     } else {\n            lower = false\n            break\n        }\n    }\n\
    \    if lower {\n        return true\n    }\n    for k, _ := range dict {\n  \
    \      if k == strings.ToUpper(k) {\n            return true\n        }\n    }\n\
    \    return false\n}\n", "    if len(dict) == 0 {\n        return false\n    }\n\
    \    var lower_case bool\n    for k, _ := range dict {\n        if k == strings.ToLower(k)\
    \ {\n            lower_case = true\n        } else {\n            lower_case =\
    \ false\n            break\n        }\n    }\n    if lower_case {\n        return\
    \ true\n    }\n    var upper_case bool\n    for k, _ := range dict {\n       \
    \ if k == strings.ToUpper(k) {\n            upper_case = true\n        } else\
    \ {\n            upper_case = false\n            break\n        }\n    }\n   \
    \ return upper_case\n}\n", "    if len(dict) == 0 {\n        return false\n  \
    \  }\n    var lower_case_keys bool\n    for k, _ := range dict {\n        if k\
    \ == strings.ToLower(k) {\n            lower_case_keys = true\n            break\n\
    \        }\n    }\n    if lower_case_keys {\n        for k, _ := range dict {\n\
    \            if k != strings.ToLower(k) {\n                return false\n    \
    \        }\n        }\n    } else {\n        for k, _ := range dict {\n      \
    \      if k != strings.ToUpper(k) {\n                return false\n          \
    \  }\n        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n    \
    \    return false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n\
    \        if is_lower {\n            if k != k {\n                return false\n\
    \            }\n        } else {\n            if k == k {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    var lower_case_keys bool\n    for key,\
    \ _ := range dict {\n        if key == strings.ToLower(key) {\n            lower_case_keys\
    \ = true\n            break\n        }\n    }\n    for key, _ := range dict {\n\
    \        if lower_case_keys {\n            if key != strings.ToLower(key) {\n\
    \                return false\n            }\n        } else {\n            if\
    \ key != strings.ToUpper(key) {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n", "    if len(dict) == 0 {\n        return\
    \ false\n    }\n    var is_lower bool\n    for k, _ := range dict {\n        if\
    \ k == strings.ToLower(k) {\n            is_lower = true\n        } else if k\
    \ == strings.ToUpper(k) {\n            is_lower = false\n        } else {\n  \
    \          return false\n        }\n    }\n    return true\n}\n", "    if len(dict)\
    \ == 0 {\n        return false\n    }\n    lower := true\n    upper := true\n\
    \    for key, _ := range dict {\n        if key != strings.ToLower(key) {\n  \
    \          lower = false\n        }\n        if key != strings.ToUpper(key) {\n\
    \            upper = false\n        }\n    }\n    return lower || upper\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
