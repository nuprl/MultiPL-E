language: go_test.go
name: HumanEval_129_minPath
results:
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    var (\n        n = len(grid)\n        m = len(grid[0])\n\
    \        dp = make([][][]int, n)\n        for i := 0; i < n; i++ {\n         \
    \   dp[i] = make([][]int, m)\n            for j := 0; j < m; j++ {\n         \
    \       dp[i][j] = make([]int, k + 1)\n                for l := 0; l <= k; l++\
    \ {\n                    dp[i][j][l] = -1\n                }\n            }\n\
    \        }\n    )\n    var dfs func(int, int, int) []int\n    dfs = func(i, j,\
    \ l int) []int {\n        if l == 0 {\n            return []int{}\n        }\n\
    \        if dp[i][j][l] != -1 {\n            return dp[i][j][l]\n        }\n \
    \       var (\n            res = []int{}\n            min = []int{}\n        )\n\
    \        if i > 0 {\n            res = dfs(i - 1, j, l - 1)\n            res =\
    \ append(res, grid[i][j])\n            if len(min) == 0 || less(res, min) {\n\
    \                min = res\n            }\n        }\n        if i < n - 1 {\n\
    \            res = dfs(i + 1, j, l - 1)\n            res = append(res, grid[i][j])\n\
    \            if len(min) == 0 || less(res, min) {\n                min = res\n\
    \            }\n        }\n        if j > 0 {\n            res = dfs(i, j - 1,\
    \ l - 1)\n            res = append(res, grid[i][j])\n            if len(min) ==\
    \ 0 || less(res, min) {\n                min = res\n            }\n        }\n\
    \        if j < m - 1 {\n            res = dfs(i, j + 1, l - 1)\n            res\
    \ = append(res, grid[i][j])\n            if len(min) == 0 || less(res, min) {\n\
    \                min = res\n            }\n        }\n       \nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp8_mgcivg_test.go:36:9: expected ''IDENT'', found ''for''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    return nil\n}\n\nfunc TestMinpath(t *testing.T) {\n  candidate\
    \ := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4,\
    \ 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpvahrl9c5_test.go:58:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpvahrl9c5_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpvahrl9c5_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpvahrl9c5_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpvahrl9c5_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    n := len(grid)\n    if n == 0 {\n        return []int{}\n\
    \    }\n    m := len(grid[0])\n    if m == 0 {\n        return []int{}\n    }\n\
    \    if k == 0 {\n        return []int{}\n    }\n    if k > n * m {\n        return\
    \ []int{}\n    }\n    // dp[i][j][l] means the minimum path of length l that ends\
    \ at (i, j)\n    dp := make([][][]int, n)\n    for i := 0; i < n; i++ {\n    \
    \    dp[i] = make([][]int, m)\n        for j := 0; j < m; j++ {\n            dp[i][j]\
    \ = make([]int, k + 1)\n            for l := 0; l <= k; l++ {\n              \
    \  dp[i][j][l] = -1\n            }\n        }\n    }\n    // dp[i][j][l] = min(dp[i-1][j][l-1],\
    \ dp[i+1][j][l-1], dp[i][j-1][l-1], dp[i][j+1][l-1])\n    for i := 0; i < n; i++\
    \ {\n        for j := 0; j < m; j++ {\n            for l := 1; l <= k; l++ {\n\
    \                if i > 0 {\n                    if dp[i-1][j][l-1] == -1 {\n\
    \                        dp[i][j][l] = grid[i][j]\n                    } else\
    \ {\n                        dp[i][j][l] = min(dp[i][j][l], dp[i-1][j][l-1] +\
    \ grid[i][j])\n                    }\n                }\n                if i\
    \ < n - 1 {\n                    if dp[i+1][j][l-1] == -1 {\n                \
    \        dp[i][j][l] = grid[i][j]\n                    } else {\n            \
    \            dp[i][j][l] = min(dp[i][j][l], dp[\nfunc TestMinpath(t *testing.T)\
    \ {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp4rxmpx82_test.go:73:6: expected ''('', found TestMinpath

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO\n    return []int{}\n}\n\nfunc TestMinpath(t *testing.T)\
    \ {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp5v8e5hai_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp5v8e5hai_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO\n    return []int{}\n}\n\nfunc TestMinpath(t *testing.T)\
    \ {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp5v8e5hai_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp5v8e5hai_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        return []int{grid[0][0]}\n    }\n    n := len(grid)\n    if n ==\
    \ 0 {\n        return []int{}\n    }\n    m := len(grid[0])\n    if m == 0 {\n\
    \        return []int{}\n    }\n    if k > n * m {\n        return []int{}\n \
    \   }\n    // dp[i][j][l] means the minimum path of length l starting from (i,\
    \ j).\n    dp := make([][][]int, n)\n    for i := 0; i < n; i++ {\n        dp[i]\
    \ = make([][]int, m)\n        for j := 0; j < m; j++ {\n            dp[i][j] =\
    \ make([]int, k + 1)\n            for l := 0; l <= k; l++ {\n                dp[i][j][l]\
    \ = -1\n            }\n        }\n    }\n    // dp[i][j][l] = min(dp[i - 1][j][l\
    \ - 1], dp[i][j - 1][l - 1], dp[i + 1][j][l - 1], dp[i][j + 1][l - 1])\n    for\
    \ l := 1; l <= k; l++ {\n        for i := 0; i < n; i++ {\n            for j :=\
    \ 0; j < m; j++ {\n                if l == 1 {\n                    dp[i][j][l]\
    \ = grid[i][j]\n                } else {\n                    dp[i][j][l] = grid[i][j]\n\
    \                    if i > 0 {\n                        if dp[i - 1][j][l - 1]\
    \ != -1 {\n                            dp[i][j][l] = min(dp[i][j][l], dp[i - 1][j][l\
    \ - 1])\n                        }\n                    }\n                  \
    \  if j > 0 {\n                        if dp[i][j - 1][l - 1] != -1 {\n      \
    \                      dp[i][j][\nfunc TestMinpath(t *testing.T) {\n  candidate\
    \ := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4,\
    \ 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz9lz0kqm_test.go:76:6: expected ''('', found TestMinpath

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    n := len(grid)\n\
    \    if n == 0 {\n        return []int{}\n    }\n    if k == 1 {\n        return\
    \ []int{grid[0][0]}\n    }\n    // dp[i][j][l] means the minimum path of length\
    \ l starting from grid[i][j]\n    dp := make([][][]int, n)\n    for i := 0; i\
    \ < n; i++ {\n        dp[i] = make([][]int, n)\n        for j := 0; j < n; j++\
    \ {\n            dp[i][j] = make([]int, k + 1)\n            for l := 0; l <= k;\
    \ l++ {\n                dp[i][j][l] = -1\n            }\n        }\n    }\n \
    \   // dp[i][j][l] = min(dp[i-1][j][l-1], dp[i+1][j][l-1], dp[i][j-1][l-1], dp[i][j+1][l-1])\n\
    \    // dp[i][j][1] = grid[i][j]\n    for i := 0; i < n; i++ {\n        for j\
    \ := 0; j < n; j++ {\n            dp[i][j][1] = grid[i][j]\n        }\n    }\n\
    \    for l := 2; l <= k; l++ {\n        for i := 0; i < n; i++ {\n           \
    \ for j := 0; j < n; j++ {\n                if i > 0 {\n                    dp[i][j][l]\
    \ = dp[i-1][j][l-1]\n                }\n                if i < n - 1 && (dp[i][j][l]\
    \ == -1 || dp[i][j][l] > dp[i+1][j][l-1]) {\n                    dp[i][j][l] =\
    \ dp[i+1][j][l-1]\n                }\n                if j > 0 && (dp[i][j][l]\
    \ == -1\nfunc TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6},\
    \ []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9dvxkyud_test.go:69:47: expected '')'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    return nil\n}\n\nfunc TestMinpath(t *testing.T) {\n  candidate\
    \ := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4,\
    \ 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpvahrl9c5_test.go:58:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpvahrl9c5_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpvahrl9c5_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpvahrl9c5_test.go:58: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpvahrl9c5_test.go:58: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpvahrl9c5_test.go:58:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    n := len(grid)\n\
    \    if n == 0 {\n        return []int{}\n    }\n    if k > n * n {\n        return\
    \ []int{}\n    }\n    // dp[i][j][l] means the minimum path of length l that ends\
    \ at grid[i][j].\n    dp := make([][][]int, n)\n    for i := 0; i < n; i++ {\n\
    \        dp[i] = make([][]int, n)\n        for j := 0; j < n; j++ {\n        \
    \    dp[i][j] = make([]int, k + 1)\n            for l := 0; l <= k; l++ {\n  \
    \              dp[i][j][l] = -1\n            }\n        }\n    }\n    for i :=\
    \ 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            dp[i][j][1] =\
    \ grid[i][j]\n        }\n    }\n    for l := 2; l <= k; l++ {\n        for i :=\
    \ 0; i < n; i++ {\n            for j := 0; j < n; j++ {\n                if dp[i][j][l]\
    \ == -1 {\n                    dp[i][j][l] = dp[i][j][l - 1]\n               \
    \ }\n                if i > 0 && dp[i - 1][j][l - 1] != -1 {\n               \
    \     if dp[i][j][l] == -1 || dp[i - 1][j][l - 1] < dp[i][j][l] {\n          \
    \              dp[i][j][l] = dp[i - 1][j][l - 1]\n                    }\n    \
    \            }\n                if i < n - 1 && dp[i + 1][j][l - 1] != -1 {\n\
    \                    if dp[i][j][l] == -1 || dp[i + 1][j][l - 1] < dp[i][j][l]\
    \ {\n                        dp[i][j][l] =\nfunc TestMinpath(t *testing.T) {\n\
    \  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgim9960x_test.go:72:6: expected ''('', found TestMinpath

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    if len(grid) == 0 || len(grid[0]) == 0 {\n        return\
    \ []int{}\n    }\n    n := len(grid)\n    m := len(grid[0])\n    if k > n * m\
    \ {\n        return []int{}\n    }\n    // dp[i][j][l] is the minimum path of\
    \ length l starting from grid[i][j].\n    dp := make([][][]int, n)\n    for i\
    \ := 0; i < n; i++ {\n        dp[i] = make([][]int, m)\n        for j := 0; j\
    \ < m; j++ {\n            dp[i][j] = make([]int, k + 1)\n            for l :=\
    \ 0; l <= k; l++ {\n                dp[i][j][l] = -1\n            }\n        }\n\
    \    }\n    // Initialize the dp table.\n    for i := 0; i < n; i++ {\n      \
    \  for j := 0; j < m; j++ {\n            dp[i][j][1] = grid[i][j]\n        }\n\
    \    }\n    // Fill the dp table.\n    for l := 2; l <= k; l++ {\n        for\
    \ i := 0; i < n; i++ {\n            for j := 0; j < m; j++ {\n               \
    \ if dp[i][j][l] != -1 {\n                    continue\n                }\n  \
    \              min := -1\n                if i > 0 {\n                    if min\
    \ == -1 || dp[i - 1][j][l - 1] < min {\n                        min = dp[i - 1][j][l\
    \ - 1]\n                    }\n                }\n                if i < n - 1\
    \ {\n                    if min == -1 || dp[i + 1][j][l - 1] < min {\n       \
    \                 min = dp[i + 1][j][l - 1]\n                    }\n         \
    \       }\n                if j > 0 {\n                    if min == -1 || dp[i][j\
    \ - 1][l - 1] < min {\n                        min = dp[i][j - 1][l - 1]\n   \
    \                 }\n                }\nfunc TestMinpath(t *testing.T) {\n  candidate\
    \ := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4,\
    \ 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwkj6_hq7_test.go:80:6: expected ''('', found TestMinpath

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    n := len(grid)\n\
    \    if n == 0 {\n        return []int{}\n    }\n    m := len(grid[0])\n    if\
    \ m == 0 {\n        return []int{}\n    }\n    if k > n * m {\n        return\
    \ []int{}\n    }\n    // dp[i][j][l] means the minimum path of length l starting\
    \ from (i, j)\n    dp := make([][][]int, n)\n    for i := 0; i < n; i++ {\n  \
    \      dp[i] = make([][]int, m)\n        for j := 0; j < m; j++ {\n          \
    \  dp[i][j] = make([]int, k + 1)\n            for l := 0; l <= k; l++ {\n    \
    \            dp[i][j][l] = -1\n            }\n        }\n    }\n    // dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i][j][l - 1])\n    // dp[i][j][l] = min(dp[i][j][l], dp[i\
    \ - 1][j][l - 1])\n    // dp[i][j][l] = min(dp[i][j][l], dp[i + 1][j][l - 1])\n\
    \    // dp[i][j][l] = min(dp[i][j][l], dp[i][j - 1][l - 1])\n    // dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i][j + 1][l - 1])\n    // dp[i][j][l] = grid[i][j] + dp[i][j][l\
    \ - 1]\n    // dp[i][j][l] = grid[i][j] + dp[i - 1][j][l - 1]\n    // dp[i][j][l]\
    \ = grid[i][j] + dp[i + 1][j][l - 1]\n    // dp[i][j\nfunc TestMinpath(t *testing.T)\
    \ {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxb3cgok0_test.go:66:6: expected ''('', found TestMinpath

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO\n    return []int{}\n}\n\nfunc TestMinpath(t *testing.T)\
    \ {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp5v8e5hai_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp5v8e5hai_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    n := len(grid)\n\
    \    if n == 0 {\n        return []int{}\n    }\n    m := len(grid[0])\n    if\
    \ m == 0 {\n        return []int{}\n    }\n    if k > n * m {\n        return\
    \ []int{}\n    }\n    // dp[i][j][l] means the minimum path of length l starting\
    \ from grid[i][j].\n    dp := make([][][]int, n)\n    for i := 0; i < n; i++ {\n\
    \        dp[i] = make([][]int, m)\n        for j := 0; j < m; j++ {\n        \
    \    dp[i][j] = make([]int, k + 1)\n            for l := 0; l <= k; l++ {\n  \
    \              dp[i][j][l] = -1\n            }\n        }\n    }\n    // dp[i][j][l]\
    \ = min(dp[i][j][l], dp[i][j][l - 1] + grid[i][j])\n    // dp[i][j][l] = min(dp[i][j][l],\
    \ dp[i - 1][j][l - 1] + grid[i][j])\n    // dp[i][j][l] = min(dp[i][j][l], dp[i\
    \ + 1][j][l - 1] + grid[i][j])\n    // dp[i][j][l] = min(dp[i][j][l], dp[i][j\
    \ - 1][l - 1] + grid[i][j])\n    // dp[i][j][l] = min(dp[i][j][l], dp[i][j + 1][l\
    \ - 1] + grid[i][j])\n    for l := 1; l <= k; l++ {\n        for i := 0; i < n;\
    \ i++ {\n            for j := 0; j < m; j++ {\n                dp[i][j][l] = dp[i][j][l\
    \ - 1] + grid[i][\nfunc TestMinpath(t *testing.T) {\n  candidate := minPath\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4,\
    \ 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmqjuqi2q_test.go:66:6: expected ''('', found TestMinpath

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO\n    return nil\n}\n\nfunc TestMinpath(t *testing.T)\
    \ {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp0ztc423n_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp0ztc423n_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp0ztc423n_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp0ztc423n_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp0ztc423n_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    if len(grid) == 0 || len(grid[0]) == 0 {\n        return\
    \ []int{}\n    }\n    n := len(grid)\n    m := len(grid[0])\n    if k > n * m\
    \ {\n        return []int{}\n    }\n    if k == 1 {\n        return []int{grid[0][0]}\n\
    \    }\n    // dp[i][j][l] means the minimum path of length l starting from (i,\
    \ j)\n    dp := make([][][]int, n)\n    for i := 0; i < n; i++ {\n        dp[i]\
    \ = make([][]int, m)\n        for j := 0; j < m; j++ {\n            dp[i][j] =\
    \ make([]int, k + 1)\n            for l := 0; l <= k; l++ {\n                dp[i][j][l]\
    \ = -1\n            }\n        }\n    }\n    // dp[i][j][l] = min(dp[i-1][j][l-1],\
    \ dp[i+1][j][l-1], dp[i][j-1][l-1], dp[i][j+1][l-1])\n    // dp[i][j][1] = grid[i][j]\n\
    \    for i := 0; i < n; i++ {\n        for j := 0; j < m; j++ {\n            dp[i][j][1]\
    \ = grid[i][j]\n        }\n    }\n    for l := 2; l <= k; l++ {\n        for i\
    \ := 0; i < n; i++ {\n            for j := 0; j < m; j++ {\n                dp[i][j][l]\
    \ = dp[i][j][l-1]\n                if i > 0 && dp[i-1][j][l-1] < dp[i][j][l] {\n\
    \                    dp[i][j][l] = dp[i-1][j][l-1]\n                }\n      \
    \          if i < n - 1 && dp[i+1][j][l-1] <\nfunc TestMinpath(t *testing.T) {\n\
    \  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpr9lm4702_test.go:69:6: expected ''('', found TestMinpath

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    n := len(grid)\n\
    \    if n == 0 {\n        return []int{}\n    }\n    m := len(grid[0])\n    if\
    \ m == 0 {\n        return []int{}\n    }\n    if k > n * m {\n        return\
    \ []int{}\n    }\n    // dp[i][j][k] means the minimum path from (i, j) to (n\
    \ - 1, m - 1) with\n    // length k.\n    dp := make([][][]int, n)\n    for i\
    \ := 0; i < n; i++ {\n        dp[i] = make([][]int, m)\n        for j := 0; j\
    \ < m; j++ {\n            dp[i][j] = make([]int, k + 1)\n            for l :=\
    \ 0; l <= k; l++ {\n                dp[i][j][l] = -1\n            }\n        }\n\
    \    }\n    dp[n - 1][m - 1][1] = grid[n - 1][m - 1]\n    for l := 2; l <= k;\
    \ l++ {\n        for i := n - 1; i >= 0; i-- {\n            for j := m - 1; j\
    \ >= 0; j-- {\n                if i == n - 1 && j == m - 1 {\n               \
    \     continue\n                }\n                if i < n - 1 {\n          \
    \          if dp[i + 1][j][l - 1] != -1 {\n                        if dp[i][j][l]\
    \ == -1 || dp[i][j][l] > dp[i + 1][j][l - 1] {\n                            dp[i][j][l]\
    \ = dp[i + 1][j][l - 1]\n                        }\n                    }\n  \
    \              }\n                if j < m - 1 {\n                    if dp[i][j\
    \ + 1][l - 1] != -1 {\n                        if dp[i][j][l] == -1 || dp[i][j][l]\
    \ > dp[i][j + 1][l - 1] {\n                            dp\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwh9pttoh_test.go:76:6: expected ''('', found TestMinpath

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO\n    return []int{}\n}\n\nfunc TestMinpath(t *testing.T)\
    \ {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp5v8e5hai_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp5v8e5hai_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp5v8e5hai_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp5v8e5hai_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    if k ==\
    \ 1 {\n        return []int{grid[0][0]}\n    }\n    n := len(grid)\n    if n ==\
    \ 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return grid[0]\n\
    \    }\n    // dp[i][j][l] is the minimum path of length l starting from grid[i][j].\n\
    \    dp := make([][][]int, n)\n    for i := 0; i < n; i++ {\n        dp[i] = make([][]int,\
    \ n)\n        for j := 0; j < n; j++ {\n            dp[i][j] = make([]int, k +\
    \ 1)\n            for l := 0; l <= k; l++ {\n                dp[i][j][l] = -1\n\
    \            }\n        }\n    }\n    // Initialize the first cell.\n    dp[0][0][1]\
    \ = grid[0][0]\n    // Initialize the first row.\n    for j := 1; j < n; j++ {\n\
    \        dp[0][j][1] = grid[0][j]\n        for l := 2; l <= k; l++ {\n       \
    \     dp[0][j][l] = dp[0][j - 1][l - 1]\n        }\n    }\n    // Initialize the\
    \ first column.\n    for i := 1; i < n; i++ {\n        dp[i][0][1] = grid[i][0]\n\
    \        for l := 2; l <= k; l++ {\n            dp[i][0][l] = dp[i - 1][0][l -\
    \ 1]\n        }\n    }\n    // Calculate the rest cells.\n    for i := 1; i <\
    \ n; i++ {\n        for j := 1; j < n; j++ {\n            dp[i][j][1] = grid[i][j]\n\
    \            for l := 2; l <= k; l++ {\n                if dp[i - 1][j][l - 1]\
    \ == -1 && dp\nfunc TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6},\
    \ []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpy_iob6x9_test.go:78:6: expected ''('', found TestMinpath

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    n := len(grid)\n\
    \    if n == 0 {\n        return []int{}\n    }\n    if k > n * n {\n        return\
    \ []int{}\n    }\n    // dp[i][j][p] means the minimum path of length p that starts\
    \ from grid[i][j]\n    dp := make([][][]int, n)\n    for i := 0; i < n; i++ {\n\
    \        dp[i] = make([][]int, n)\n        for j := 0; j < n; j++ {\n        \
    \    dp[i][j] = make([]int, k + 1)\n            for p := 0; p <= k; p++ {\n  \
    \              dp[i][j][p] = -1\n            }\n        }\n    }\n    // dp[i][j][p]\
    \ = min(dp[i][j][p], dp[i][j][p - 1] + grid[i][j])\n    // dp[i][j][p] = min(dp[i][j][p],\
    \ dp[i - 1][j][p - 1] + grid[i][j])\n    // dp[i][j][p] = min(dp[i][j][p], dp[i\
    \ + 1][j][p - 1] + grid[i][j])\n    // dp[i][j][p] = min(dp[i][j][p], dp[i][j\
    \ - 1][p - 1] + grid[i][j])\n    // dp[i][j][p] = min(dp[i][j][p], dp[i][j + 1][p\
    \ - 1] + grid[i][j])\n    for p := 1; p <= k; p++ {\n        for i := 0; i < n;\
    \ i++ {\n            for j := 0; j < n; j++ {\n                dp[i][j][p] = dp[i][j][p\
    \ - 1] + grid[i][j]\n                if i > 0 {\n                    dp[i][j][p]\
    \ = min(dp[i\nfunc TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6},\
    \ []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpjz_5a1rn_test.go:63:43: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO\n    return nil\n}\n\nfunc TestMinpath(t *testing.T)\
    \ {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp0ztc423n_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp0ztc423n_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp0ztc423n_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp0ztc423n_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp0ztc423n_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp0ztc423n_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074419
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return nil\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpw_6ach1u_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpw_6ach1u_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpw_6ach1u_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // Write your code here\n    return []int{}\n}\n\nfunc TestMinpath(t\
    \ *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3), expected: []int{1, 2, 1} },\n  \
    \   { actual: candidate([][]int{[]int{5, 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}},\
    \ 1), expected: []int{1} },\n     { actual: candidate([][]int{[]int{1, 2, 3, 4},\
    \ []int{5, 6, 7, 8}, []int{9, 10, 11, 12}, []int{13, 14, 15, 16}}, 4), expected:\
    \ []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6, 4, 13, 10},\
    \ []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7), expected:\
    \ []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmpgze26k1q_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmpgze26k1q_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmpgze26k1q_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
- exit_code: 1
  program: "package minPath_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n\
    // each cell of the grid contains a value. Every integer in the range [1, N *\
    \ N]\n// inclusive appears exactly once on the cells of the grid.\n// You have\
    \ to find the minimum path of length k in the grid. You can start\n// from any\
    \ cell, and in each step you can move to any of the neighbor cells,\n// in other\
    \ words, you can go to cells which share an edge with you current\n// cell.\n\
    // Please note that a path of length k means visiting exactly k cells (not\n//\
    \ necessarily distinct).\n// You CANNOT go off the grid.\n// A path A (of length\
    \ k) is considered less than a path B (of length k) if\n// after making the ordered\
    \ lists of the values on the cells that A and B go\n// through (let's call them\
    \ lst_A and lst_B), lst_A is lexicographically less\n// than lst_B, in other words,\
    \ there exist an integer index i (1 <= i <= k)\n// such that lst_A[i] < lst_B[i]\
    \ and for any j (1 <= j < i) we have\n// lst_A[j] = lst_B[j].\n// It is guaranteed\
    \ that the answer is unique.\n// Return an ordered list of the values on the cells\
    \ that the minimum path go through.\n// Examples:    \n// >>> minPath([][]int{[]int{1,\
    \ 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}}, 3)\n// []int{1, 2, 1}\n// >>> minPath([][]int{[]int{5,\
    \ 9, 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1)\n// []int{1}\nfunc minPath(grid [][]int,\
    \ k int) []int {\n    // TODO - Add your code here\n    return nil\n}\n\nfunc\
    \ TestMinpath(t *testing.T) {\n  candidate := minPath\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate([][]int{[]int{1, 2, 3}, []int{4, 5, 6}, []int{7, 8, 9}},\
    \ 3), expected: []int{1, 2, 1} },\n     { actual: candidate([][]int{[]int{5, 9,\
    \ 3}, []int{4, 1, 6}, []int{7, 8, 2}}, 1), expected: []int{1} },\n     { actual:\
    \ candidate([][]int{[]int{1, 2, 3, 4}, []int{5, 6, 7, 8}, []int{9, 10, 11, 12},\
    \ []int{13, 14, 15, 16}}, 4), expected: []int{1, 2, 1, 2} },\n     { actual: candidate([][]int{[]int{6,\
    \ 4, 13, 10}, []int{5, 7, 12, 1}, []int{3, 16, 11, 15}, []int{8, 14, 9, 2}}, 7),\
    \ expected: []int{1, 10, 1, 10, 1, 10, 1} },\n     { actual: candidate([][]int{[]int{8,\
    \ 14, 9, 2}, []int{6, 4, 13, 15}, []int{5, 7, 1, 12}, []int{3, 10, 11, 16}}, 5),\
    \ expected: []int{1, 7, 1, 7, 1} },\n     { actual: candidate([][]int{[]int{11,\
    \ 8, 7, 2}, []int{5, 16, 14, 4}, []int{9, 3, 15, 6}, []int{12, 13, 10, 1}}, 9),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1} },\n     { actual: candidate([][]int{[]int{12,\
    \ 13, 10, 1}, []int{9, 3, 15, 6}, []int{5, 16, 14, 4}, []int{11, 8, 7, 2}}, 12),\
    \ expected: []int{1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6} },\n     { actual: candidate([][]int{[]int{2,\
    \ 7, 4}, []int{3, 1, 5}, []int{6, 8, 9}}, 8), expected: []int{1, 3, 1, 3, 1, 3,\
    \ 1, 3} },\n     { actual: candidate([][]int{[]int{6, 1, 5}, []int{3, 8, 9}, []int{2,\
    \ 7, 4}}, 8), expected: []int{1, 5, 1, 5, 1, 5, 1, 5} },\n     { actual: candidate([][]int{[]int{1,\
    \ 2}, []int{3, 4}}, 10), expected: []int{1, 2, 1, 2, 1, 2, 1, 2, 1, 2} },\n  \
    \   { actual: candidate([][]int{[]int{1, 3}, []int{3, 2}}, 10), expected: []int{1,\
    \ 3, 1, 3, 1, 3, 1, 3, 1, 3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMinpath (0.00s)\n    --- FAIL: TestMinpath/test_num__0 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__1 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__2 (0.00s)\n\
    \        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__3 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10) %!s(int=1) %!s(int=10)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__4 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=7) %!s(int=1) %!s(int=7)\
    \ %!s(int=1)]', got '[]'\n    --- FAIL: TestMinpath/test_num__5 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)\
    \ %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__6 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1)\
    \ %!s(int=6) %!s(int=1) %!s(int=6) %!s(int=1) %!s(int=6)]', got '[]'\n    ---\
    \ FAIL: TestMinpath/test_num__7 (0.00s)\n        tmp26hyeh1r_test.go:59: expected\
    \ '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1)\
    \ %!s(int=3)]', got '[]'\n    --- FAIL: TestMinpath/test_num__8 (0.00s)\n    \
    \    tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)\
    \ %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5)]', got '[]'\n    --- FAIL: TestMinpath/test_num__9\
    \ (0.00s)\n        tmp26hyeh1r_test.go:59: expected '[%!s(int=1) %!s(int=2) %!s(int=1)\
    \ %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2) %!s(int=1) %!s(int=2)]',\
    \ got '[]'\n    --- FAIL: TestMinpath/test_num__10 (0.00s)\n        tmp26hyeh1r_test.go:59:\
    \ expected '[%!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=1) %!s(int=3)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074255
