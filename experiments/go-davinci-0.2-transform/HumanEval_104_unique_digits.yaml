name: HumanEval_104_unique_digits
language: go_test.go
prompt: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given a list of positive integers x. return a sorted list of all \n// elements\
  \ that hasn't any even digit.\n// Note: Returned list should be sorted in increasing\
  \ order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1,\
  \ 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// []int{}\nfunc unique_digits(x\
  \ []int) []int {\n"
tests: "func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
  \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
  \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
  \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if isUnique(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var res []int\n    for _, v := range x {\n\
    \        if !hasEvenDigit(v) {\n            res = append(res, v)\n        }\n\
    \    }\n    return res\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if !hasEvenDigit(v) {\n            result = append(result, v)\n     \
    \   }\n    }\n    return result\n}\n", "    var result []int\n    for _, v :=\
    \ range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var res []int\n    for _,\
    \ v := range x {\n        if !hasEvenDigit(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n", "    var result []int\n    for _,\
    \ v := range x {\n        if hasEvenDigit(v) {\n            continue\n       \
    \ }\n        result = append(result, v)\n    }\n    return result\n}\n", "   \
    \ var result []int\n    for _, v := range x {\n        if isUnique(v) {\n    \
    \        result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if has_even_digit(v) {\n            continue\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, i := range x {\n        if !hasEvenDigit(i) {\n            result\
    \ = append(result, i)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v := range x {\n        if has_even_digit(v) {\n         \
    \   continue\n        }\n        result = append(result, v)\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, num := range x {\n        if\
    \ has_even_digit(num) {\n            continue\n        }\n        result = append(result,\
    \ num)\n    }\n    return result\n}\n", "    var res []int\n    for _, v := range\
    \ x {\n        if isUnique(v) {\n            res = append(res, v)\n        }\n\
    \    }\n    return res\n}\n", "    var res []int\n    for _, v := range x {\n\
    \        if is_unique(v) {\n            res = append(res, v)\n        }\n    }\n\
    \    return res\n}\n", "    var result []int\n    for _, v := range x {\n    \
    \    if has_even_digit(v) {\n            continue\n        }\n        result =\
    \ append(result, v)\n    }\n    return result\n}\n", "    var res []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n", "    var result []int\n    for _,\
    \ v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if is_unique_digits(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if has_even_digit(v) {\n            continue\n  \
    \      }\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if is_unique_digits(v) {\n            result = append(result, v)\n  \
    \      }\n    }\n    return result\n}\n", "    var result []int\n    for _, v\
    \ := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var y []int\n    for _,\
    \ v := range x {\n        if v % 2 == 1 {\n            y = append(y, v)\n    \
    \    }\n    }\n    return y\n}\n", "    var result []int\n    for _, v := range\
    \ x {\n        if has_even_digit(v) {\n            continue\n        }\n     \
    \   result = append(result, v)\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v := range x {\n        if has_even_digit(v) {\n         \
    \   continue\n        }\n        result = append(result, v)\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if !hasEvenDigit(v) {\n            result = append(result, v)\n     \
    \   }\n    }\n    return result\n}\n", "    var result []int\n    for _, v :=\
    \ range x {\n        if has_even_digit(v) {\n            continue\n        }\n\
    \        result = append(result, v)\n    }\n    return result\n}\n", "    var\
    \ res []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n      \
    \      res = append(res, v)\n        }\n    }\n    return res\n}\n", "    var\
    \ result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n   \
    \         result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    r := []int{}\n    for _, v := range x {\n        if v % 2 == 1 {\n\
    \            r = append(r, v)\n        }\n    }\n    return r\n}\n", "    var\
    \ result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n   \
    \         result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if !hasEvenDigit(v) {\n            result = append(result, v)\n     \
    \   }\n    }\n    return result\n}\n", "    var result []int\n    for _, v :=\
    \ range x {\n        if has_even_digit(v) {\n            continue\n        }\n\
    \        result = append(result, v)\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n   \
    \         result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if has_even_digit(v) {\n            continue\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range x {\n        if !hasEvenDigit(v) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    var res\
    \ []int\n    for _, v := range x {\n        if has_even_digit(v) {\n         \
    \   continue\n        }\n        res = append(res, v)\n    }\n    return res\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if has_even_digit(v) {\n            continue\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range x {\n        if !hasEvenDigit(v) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n          \
    \  result = append(result, v)\n        }\n    }\n    return result\n}\n", "  \
    \  var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if !hasEvenDigit(v) {\n            result = append(result, v)\n     \
    \   }\n    }\n    return result\n}\n", "    var result []int\n    for _, v :=\
    \ range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if has_even_digit(v) {\n            continue\n  \
    \      }\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var res []int\n    for _, v := range x {\n        if hasEvenDigit(v)\
    \ {\n            continue\n        }\n        res = append(res, v)\n    }\n  \
    \  return res\n}\n", "    var res []int\n    for _, v := range x {\n        if\
    \ has_even_digit(v) {\n            continue\n        }\n        res = append(res,\
    \ v)\n    }\n    return res\n}\n", "    var result []int\n    for _, v := range\
    \ x {\n        if !hasEvenDigit(v) {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if has_even_digit(v) {\n            continue\n  \
    \      }\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if has_even_digit(v) {\n            continue\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range x {\n        if !hasEvenDigit(v) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n          \
    \  result = append(result, v)\n        }\n    }\n    return result\n}\n", "  \
    \  var result []int\n    for _, v := range x {\n        if has_even_digit(v) {\n\
    \            continue\n        }\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v := range x {\n \
    \       if !hasEvenDigit(v) {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n", "    var result []int\n    for _, v := range\
    \ x {\n        if is_unique_digits(v) {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v := range x {\n        if is_unique_digits(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, num := range x {\n        if has_even_digit(num) {\n            continue\n\
    \        }\n        result = append(result, num)\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if has_even_digit(v) {\n\
    \            continue\n        }\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v := range x {\n \
    \       if has_even_digit(v) {\n            continue\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range x {\n        if !hasEvenDigit(v) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v := range x {\n        if has_even_digit(v) {\n         \
    \   continue\n        }\n        result = append(result, v)\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if !hasEvenDigit(v) {\n            result = append(result, v)\n     \
    \   }\n    }\n    return result\n}\n", "    var result []int\n    for _, v :=\
    \ range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    result := []int{}\n    for\
    \ _, v := range x {\n        if has_even_digit(v) {\n            continue\n  \
    \      }\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if v < 10 {\n\
    \            result = append(result, v)\n            continue\n        }\n   \
    \     if v < 100 {\n            if v % 10 != 0 {\n                result = append(result,\
    \ v)\n            }\n            continue\n        }\n        if v < 1000 {\n\
    \            if v % 10 != 0 && v % 100 / 10 != 0 {\n                result = append(result,\
    \ v)\n            }\n            continue\n        }\n        if v < 10000 {\n\
    \            if v % 10 != 0 && v % 100 / 10 != 0 && v % 1000 / 100 != 0 {\n  \
    \              result = append(result, v)\n            }\n            continue\n\
    \        }\n        if v < 100000 {\n            if v % 10 != 0 && v % 100 / 10\
    \ != 0 && v % 1000 / 100 != 0 && v % 10000 / 1000 != 0 {\n                result\
    \ = append(result, v)\n            }\n            continue\n        }\n      \
    \  if v < 1000000 {\n            if v % 10 != 0 && v % 100 / 10 != 0 && v % 1000\
    \ / 100 != 0 && v % 10000 / 1000 != 0 && v % 100000 / 10000 != 0 {\n         \
    \       result = append(result, v)\n            }\n            continue\n    \
    \    }\n        if v < 10000000 {\n            if v % 10 != 0 && v % 100 / 10\
    \ != 0 && v % 1000 / 100 != 0 && v % 10000 / 1000 != 0 && v % 100000 / 10000 !=\
    \ 0 && v % 1000000 / 100000 != 0 {\n                result = append(result, v)\n\
    \            }\n            continue\n        }\n        if v < 100000000 {\n\
    \            if v % 10 != 0 && v % 100 / 10 != 0 && v % 1000 / 100 != 0 && v %\
    \ 10000 / 1000 != 0 && v % 100000 / 10000 != 0 && v % 1000000 / 100000 != 0 &&\
    \ v % 10000000 / 1000000 != 0 {\n                result = append(result, v)\n\
    \            }\n            continue\n        }\n        if v < 1000000000 {\n\
    \            if v % 10 != 0 && v % 100 / 10 != 0 && v % 1000 / 100 != 0 && v %\
    \ 10000 / 1000 != 0 && v % 100000 / 10000", "    var result []int\n    for _,\
    \ v := range x {\n        if isUnique(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, i := range x {\n        if !hasEvenDigit(i) {\n            result = append(result,\
    \ i)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if is_unique_digits(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if hasEvenDigit(v) {\n            continue\n    \
    \    }\n        result = append(result, v)\n    }\n    return result\n}\n", " \
    \   var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if !hasEvenDigit(v) {\n            result = append(result, v)\n     \
    \   }\n    }\n    return result\n}\n", "    var result []int\n    for _, v :=\
    \ range x {\n        if isUnique(v) {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n", "    var result []int\n    for _,\
    \ v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if is_unique_digits(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if has_even_digit(v) {\n            continue\n  \
    \      }\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if v % 2 == 0\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if has_even_digit(v) {\n            continue\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    var res []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n \
    \           res = append(res, v)\n        }\n    }\n    return res\n}\n", "  \
    \  var result []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if is_unique_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if v < 10 {\n            result = append(result, v)\n            continue\n\
    \        }\n        var even bool\n        for v > 0 {\n            if v % 2 ==\
    \ 0 {\n                even = true\n                break\n            }\n   \
    \         v /= 10\n        }\n        if !even {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, i := range x {\n        if has_even_digit(i) {\n            continue\n  \
    \      }\n        result = append(result, i)\n    }\n    return result\n}\n",
  "    var res []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n \
    \           res = append(res, v)\n        }\n    }\n    return res\n}\n", "  \
    \  var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var res []int\n    for _, v := range x {\n        if hasEvenDigit(v)\
    \ {\n            continue\n        }\n        res = append(res, v)\n    }\n  \
    \  return res\n}\n", "    var result []int\n    for _, v := range x {\n      \
    \  if is_unique_digit(v) {\n            result = append(result, v)\n        }\n\
    \    }\n    return result\n}\n", "    var result []int\n    for _, v := range\
    \ x {\n        if has_even_digit(v) {\n            continue\n        }\n     \
    \   result = append(result, v)\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v := range x {\n        if hasEvenDigit(v) {\n           \
    \ continue\n        }\n        result = append(result, v)\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if !hasEvenDigit(v) {\n            result = append(result, v)\n     \
    \   }\n    }\n    return result\n}\n", "    var result []int\n    for _, v :=\
    \ range x {\n        if has_even_digit(v) {\n            continue\n        }\n\
    \        result = append(result, v)\n    }\n    return result\n}\n", "    var\
    \ result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n   \
    \         result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if !hasEvenDigit(v) {\n            result = append(result, v)\n     \
    \   }\n    }\n    return result\n}\n", "    var result []int\n    for _, v :=\
    \ range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if has_even_digit(v) {\n            continue\n  \
    \      }\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, n := range x {\n        if hasEvenDigit(n)\
    \ {\n            continue\n        }\n        result = append(result, n)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if has_even_digit(v) {\n            continue\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range x {\n        if v < 10 {\n            result = append(result,\
    \ v)\n            continue\n        }\n        if v < 100 {\n            if v\
    \ % 2 == 1 {\n                result = append(result, v)\n            }\n    \
    \        continue\n        }\n        if v < 1000 {\n            if v % 2 == 1\
    \ && (v / 10) % 2 == 1 && (v / 100) % 2 == 1 {\n                result = append(result,\
    \ v)\n            }\n            continue\n        }\n        if v < 10000 {\n\
    \            if v % 2 == 1 && (v / 10) % 2 == 1 && (v / 100) % 2 == 1 && (v /\
    \ 1000) % 2 == 1 {\n                result = append(result, v)\n            }\n\
    \            continue\n        }\n        if v < 100000 {\n            if v %\
    \ 2 == 1 && (v / 10) % 2 == 1 && (v / 100) % 2 == 1 && (v / 1000) % 2 == 1 &&\
    \ (v / 10000) % 2 == 1 {\n                result = append(result, v)\n       \
    \     }\n            continue\n        }\n        if v < 1000000 {\n         \
    \   if v % 2 == 1 && (v / 10) % 2 == 1 && (v / 100) % 2 == 1 && (v / 1000) % 2\
    \ == 1 && (v / 10000) % 2 == 1 && (v / 100000) % 2 == 1 {\n                result\
    \ = append(result, v)\n            }\n            continue\n        }\n      \
    \  if v < 10000000 {\n            if v % 2 == 1 && (v / 10) % 2 == 1 && (v / 100)\
    \ % 2 == 1 && (v / 1000) % 2 == 1 && (v / 10000) % 2 == 1 && (v / 100000) % 2\
    \ == 1 && (v / 1000000) % 2 == 1 {\n                result = append(result, v)\n\
    \            }\n            continue\n        }\n        if v < 100000000 {\n\
    \            if v % 2 == 1 && (v / 10) % 2 == 1 && (v / 100) % 2 == 1 && (v /\
    \ 1000) % 2 == 1 && (v / 10000) % 2 == 1 &&", "    var result []int\n    for _,\
    \ v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if is_unique_digits(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if !hasEvenDigit(v) {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n", "    var result []int\n    for\
    \ _, v := range x {\n        if has_even_digit(v) {\n            continue\n  \
    \      }\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if isUnique(v) {\n   \
    \         result = append(result, v)\n        }\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if has_even_digit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if has_even_digit(v) {\n            continue\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        result = append(result, v)\n    }\n    return result\n}\n",
  "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n\
    \            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var res []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            res = append(res, v)\n        }\n    }\n    return res\n}\n",
  "    var result []int\n    for _, v := range x {\n        if has_even_digit(v) {\n\
    \            continue\n        }\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v := range x {\n \
    \       if !hasEvenDigit(v) {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n", "    var result []int\n    for _, v := range\
    \ x {\n        if has_even_digit(v) {\n            continue\n        }\n     \
    \   result = append(result, v)\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v := range x {\n        if !hasEvenDigit(v) {\n          \
    \  result = append(result, v)\n        }\n    }\n    return result\n}\n", "  \
    \  var result []int\n    for _, v := range x {\n        if has_even_digit(v) {\n\
    \            continue\n        }\n        result = append(result, v)\n    }\n\
    \    return result\n}\n", "    var result []int\n    for _, v := range x {\n \
    \       if has_even_digit(v) {\n            continue\n        }\n        result\
    \ = append(result, v)\n    }\n    return result\n}\n", "    var result []int\n\
    \    for _, v := range x {\n        if !hasEvenDigit(v) {\n            result\
    \ = append(result, v)\n        }\n    }\n    return result\n}\n", "    var result\
    \ []int\n    for _, v := range x {\n        if has_even_digit(v) {\n         \
    \   continue\n        }\n        result = append(result, v)\n    }\n    return\
    \ result\n}\n", "    var result []int\n    for _, v := range x {\n        if !hasEvenDigit(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    var result []int\n    for _, v := range x {\n        if hasEvenDigit(v)\
    \ {\n            continue\n        }\n        result = append(result, v)\n   \
    \ }\n    return result\n}\n", "    var result []int\n    for _, v := range x {\n\
    \        if !hasEvenDigit(v) {\n            result = append(result, v)\n     \
    \   }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
