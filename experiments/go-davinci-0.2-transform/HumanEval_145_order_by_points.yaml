name: HumanEval_145_order_by_points
language: go_test.go
prompt: "package order_by_points_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function which sorts the given list of integers\n// in ascending\
  \ order according to the sum of their digits.\n// Note: if there are several items\
  \ with similar sum of their digits,\n// order them based on their index in original\
  \ list.\n// For example:\n// >>> order_by_points([]int{1, 11, -1, -11, -12})\n//\
  \ []int{-1, -11, 1, -12, 11}\n// >>> order_by_points([]int{})\n// []int{}\nfunc\
  \ order_by_points(nums []int) []int {\n"
tests: "func TestOrder_By_Points(t *testing.T) {\n  candidate := order_by_points\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 11, -1, -11, -12}), expected:\
  \ []int{-1, -11, 1, -12, 11} },\n     { actual: candidate([]int{1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), expected: []int{0, 2, 3, 6,\
  \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457} },\n     { actual: candidate([]int{}),\
  \ expected: []int{} },\n     { actual: candidate([]int{1, -11, -32, 43, 54, -98,\
  \ 2, -3}), expected: []int{-3, -32, -98, -11, 1, 2, 43, 54} },\n     { actual: candidate([]int{1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), expected: []int{1, 10, 2, 11, 3, 4, 5, 6, 7,\
  \ 8, 9} },\n     { actual: candidate([]int{0, 6, 6, -76, -21, 23, 4}), expected:\
  \ []int{-76, -21, 0, 4, 23, 6, 6} },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // your code here\n    return nil\n}\n", "    return nums\n}\n",
  "    return nums\n}\n", "    // TODO: implement\n    return nums\n}\n", "    //\
    \ TODO: implement\n    return nums\n}\n", "    return nums\n}\n", "    return\
    \ nums\n}\n", "    return nums\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    // TODO: implement this function\n    return nil\n\
    }\n", "    // TODO: implement this function\n    return nil\n}\n", "    // TODO:\
    \ implement\n    return nil\n}\n", "    // TODO: implement this function\n   \
    \ return nil\n}\n", "    return nums\n}\n", "    // TODO: implement this function\n\
    \    return nil\n}\n", "    return nums\n}\n", "    // TODO: implement\n    return\
    \ nil\n}\n", "    // TODO: implement this function\n    return []int{}\n}\n",
  "    // TODO: implement\n    return nums\n}\n", "    // TODO: implement\n    return\
    \ nil\n}\n", "    // TODO: implement this function\n    return nil\n}\n", "  \
    \  return []int{}\n}\n", "    return nums\n}\n", "    // TODO: implement this\
    \ function\n    return []int{}\n}\n", "    // TODO: implement\n    return nums\n\
    }\n", "    if len(nums) == 0 {\n        return nums\n    }\n    // TODO: implement\
    \ the function\n    return nums\n}\n", "    return nums\n}\n", "    return nums\n\
    }\n", "    if len(nums) == 0 {\n        return nums\n    }\n    numsMap := make(map[int][]int)\n\
    \    for i, num := range nums {\n        sum := 0\n        for num > 0 {\n   \
    \         sum += num % 10\n            num /= 10\n        }\n        numsMap[sum]\
    \ = append(numsMap[sum], i)\n    }\n    result := make([]int, len(nums))\n   \
    \ i := 0\n    for sum, indexes := range numsMap {\n        for _, index := range\
    \ indexes {\n            result[i] = nums[index]\n            i++\n        }\n\
    \    }\n    return result\n}\n", "    // TODO: implement this function\n    return\
    \ nil\n}\n", "    // TODO: implement\n    return nil\n}\n", "    return []int{}\n\
    }\n", "    // TODO: implement this function\n    return nil\n}\n", "    return\
    \ nums\n}\n", "    // TODO: implement this function\n    return []int{}\n}\n",
  "    return nums\n}\n", "    // TODO: implement this function\n    //panic(\"Not\
    \ implemented yet\")\n    return nums\n}\n", "    // TODO: implement\n    return\
    \ nil\n}\n", "    // TODO: implement this function\n    return []int{}\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    // TODO: implement this function\n\
    \    return nil\n}\n", "    // TODO: implement the function\n    return nil\n\
    }\n", "    // your code here\n    return nums\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    return nums\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    if len(nums) == 0 {\n        return nums\n    }\n    var sum_of_digits\
    \ = make(map[int]int)\n    for i, num := range nums {\n        sum_of_digits[i]\
    \ = sum_digits(num)\n    }\n    for i := 0; i < len(nums); i++ {\n        for\
    \ j := i + 1; j < len(nums); j++ {\n            if sum_of_digits[i] > sum_of_digits[j]\
    \ {\n                nums[i], nums[j] = nums[j], nums[i]\n                sum_of_digits[i],\
    \ sum_of_digits[j] = sum_of_digits[j], sum_of_digits[i]\n            }\n     \
    \   }\n    }\n    return nums\n}\n", "    // TODO: implement this function\n \
    \   return []int{}\n}\n", "    // TODO: implement this function\n    return nil\n\
    }\n", "    return nums\n}\n", "    // TODO: implement this function\n    return\
    \ nil\n}\n", "    // TODO: implement\n    return nums\n}\n", "    return nums\n\
    }\n", "    return nums\n}\n", "    return nil\n}\n", "    if len(nums) == 0 {\n\
    \        return nums\n    }\n    var sum_map = make(map[int]int)\n    for _, num\
    \ := range nums {\n        sum_map[num] = sum_digits(num)\n    }\n    var sorted_nums\
    \ = make([]int, len(nums))\n    copy(sorted_nums, nums)\n    for i := 0; i < len(sorted_nums);\
    \ i++ {\n        for j := i + 1; j < len(sorted_nums); j++ {\n            if sum_map[sorted_nums[i]]\
    \ > sum_map[sorted_nums[j]] {\n                sorted_nums[i], sorted_nums[j]\
    \ = sorted_nums[j], sorted_nums[i]\n            }\n        }\n    }\n    return\
    \ sorted_nums\n}\n", "    return []int{}\n}\n", "    return []int{}\n}\n", " \
    \   // TODO: implement this function\n    return []int{}\n}\n", "    // TODO:\
    \ implement this function\n    return []int{}\n}\n", "    // TODO: implement this\
    \ function\n    return []int{}\n}\n", "    // TODO: implement this function\n\
    \    return nil\n}\n", "    return nums\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    // TODO: implement\n    return nums\n}\n", " \
    \   // TODO: implement\n    return nums\n}\n", "    return nums\n}\n", "    if\
    \ len(nums) == 0 {\n        return nums\n    }\n    var sum_map = make(map[int]int)\n\
    \    var index_map = make(map[int]int)\n    for i, v := range nums {\n       \
    \ sum_map[v] = sum_digits(v)\n        index_map[v] = i\n    }\n    var keys []int\n\
    \    for k := range sum_map {\n        keys = append(keys, k)\n    }\n    sort.Slice(keys,\
    \ func(i, j int) bool {\n        if sum_map[keys[i]] == sum_map[keys[j]] {\n \
    \           return index_map[keys[i]] < index_map[keys[j]]\n        }\n      \
    \  return sum_map[keys[i]] < sum_map[keys[j]]\n    })\n    var res []int\n   \
    \ for _, v := range keys {\n        res = append(res, v)\n    }\n    return res\n\
    }\n", "    if len(nums) == 0 {\n        return nums\n    }\n    // create a map\
    \ of sum of digits to list of numbers\n    sum_to_nums := make(map[int][]int)\n\
    \    for _, num := range nums {\n        sum := 0\n        for num != 0 {\n  \
    \          sum += num % 10\n            num /= 10\n        }\n        sum_to_nums[sum]\
    \ = append(sum_to_nums[sum], num)\n    }\n    // create a list of sums\n    sums\
    \ := make([]int, 0, len(sum_to_nums))\n    for sum := range sum_to_nums {\n  \
    \      sums = append(sums, sum)\n    }\n    // sort the list of sums\n    for\
    \ i := 0; i < len(sums); i++ {\n        for j := i + 1; j < len(sums); j++ {\n\
    \            if sums[i] > sums[j] {\n                sums[i], sums[j] = sums[j],\
    \ sums[i]\n            }\n        }\n    }\n    // create the result list\n  \
    \  result := make([]int, 0, len(nums))\n    for _, sum := range sums {\n     \
    \   for _, num := range sum_to_nums[sum] {\n            result = append(result,\
    \ num)\n        }\n    }\n    return result\n}\n", "    // TODO: implement the\
    \ function\n    return nil\n}\n", "    // TODO: implement this function\n    return\
    \ []int{}\n}\n", "    if len(nums) == 0 {\n        return nums\n    }\n    //\
    \ create a map of sum of digits to list of numbers\n    // with that sum of digits\n\
    \    sum_to_nums := make(map[int][]int)\n    for i, num := range nums {\n    \
    \    sum := 0\n        for num != 0 {\n            sum += num % 10\n         \
    \   num /= 10\n        }\n        sum_to_nums[sum] = append(sum_to_nums[sum],\
    \ i)\n    }\n    // create a list of sums of digits\n    sums := make([]int, 0,\
    \ len(sum_to_nums))\n    for sum := range sum_to_nums {\n        sums = append(sums,\
    \ sum)\n    }\n    // sort the list of sums of digits\n    for i := 0; i < len(sums)\
    \ - 1; i++ {\n        for j := i + 1; j < len(sums); j++ {\n            if sums[i]\
    \ > sums[j] {\n                sums[i], sums[j] = sums[j], sums[i]\n         \
    \   }\n        }\n    }\n    // create the result list\n    result := make([]int,\
    \ len(nums))\n    for i, sum := range sums {\n        for _, index := range sum_to_nums[sum]\
    \ {\n            result[i] = nums[index]\n            i++\n        }\n    }\n\
    \    return result\n}\n", "    // TODO: implement\n    return nil\n}\n", "   \
    \ // TODO: implement this function\n    return []int{}\n}\n", "    return nil\n\
    }\n", "    return []int{}\n}\n", "    // TODO: implement\n    return nums\n}\n",
  "    // TODO: implement this function\n    return []int{}\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    return []int{}\n}\n", "    return nums\n}\n", "    // TODO: Implement\
    \ me\n    return []int{}\n}\n", "    // TODO: implement this function\n    return\
    \ []int{}\n}\n", "    // TODO: implement this function\n    return []int{}\n}\n",
  "    // TODO: implement this function\n    return []int{}\n}\n", "    // TODO: implement\n\
    \    return nums\n}\n", "    return nil\n}\n", "    // Your code here\n    return\
    \ nums\n}\n", "    return nums\n}\n", "    // your code here\n    return nums\n\
    }\n", "    // TODO: implement\n    return nums\n}\n", "    return nums\n}\n",
  "    // TODO: implement this function\n    return nil\n}\n", "    // your code here\n\
    \    return nums\n}\n", "    if len(nums) == 0 {\n        return nums\n    }\n\
    \    // TODO: implement this function\n    return nums\n}\n", "    // TODO: implement\
    \ this function\n    return []int{}\n}\n", "    // TODO: implement\n    return\
    \ nums\n}\n", "    return nums\n}\n", "    return nil\n}\n", "    // TODO: implement\
    \ this function\n    return nil\n}\n", "    return nums\n}\n", "    // TODO: implement\
    \ this function\n    return []int{}\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    // TODO: implement\n    return nums\n}\n", " \
    \   // TODO: implement\n    return nums\n}\n", "    return []int{}\n}\n", "  \
    \  // TODO: implement this function\n    return []int{}\n}\n", "    return nums\n\
    }\n", "    if len(nums) == 0 {\n        return []int{}\n    }\n    numsMap :=\
    \ make(map[int][]int)\n    for i, num := range nums {\n        sum := 0\n    \
    \    for num > 0 {\n            sum += num % 10\n            num /= 10\n     \
    \   }\n        numsMap[sum] = append(numsMap[sum], i)\n    }\n    keys := make([]int,\
    \ 0, len(numsMap))\n    for key := range numsMap {\n        keys = append(keys,\
    \ key)\n    }\n    for i := 0; i < len(keys) - 1; i++ {\n        for j := i +\
    \ 1; j < len(keys); j++ {\n            if keys[i] > keys[j] {\n              \
    \  keys[i], keys[j] = keys[j], keys[i]\n            }\n        }\n    }\n    result\
    \ := make([]int, len(nums))\n    for i, key := range keys {\n        for _, index\
    \ := range numsMap[key] {\n            result[i] = nums[index]\n            i++\n\
    \        }\n    }\n    return result\n}\n", "    // TODO: implement this function\n\
    \    return nil\n}\n", "    return nums\n}\n", "    // TODO: implement\n    return\
    \ nums\n}\n", "    // TODO: implement this function\n    return nil\n}\n", " \
    \   return nil\n}\n", "    return nil\n}\n", "    return nums\n}\n", "    // TODO:\
    \ Implement\n    return nil\n}\n", "    // your code here\n    return nums\n}\n",
  "    if len(nums) == 0 {\n        return nums\n    }\n    var sum_map = make(map[int]int)\n\
    \    for i, v := range nums {\n        sum_map[i] = sum_digits(v)\n    }\n   \
    \ return sort_map(sum_map)\n}\n", "    // TODO: implement\n    return nil\n}\n",
  "    // TODO: implement\n    return nil\n}\n", "    return nums\n}\n", "    if len(nums)\
    \ == 0 {\n        return nums\n    }\n    var result []int\n    var sumMap = make(map[int]int)\n\
    \    for i, v := range nums {\n        sumMap[i] = sumOfDigits(v)\n    }\n   \
    \ for i := 0; i < len(nums); i++ {\n        min := 100000\n        minIndex :=\
    \ 0\n        for k, v := range sumMap {\n            if v < min {\n          \
    \      min = v\n                minIndex = k\n            }\n        }\n     \
    \   result = append(result, nums[minIndex])\n        delete(sumMap, minIndex)\n\
    \    }\n    return result\n}\n", "    // TODO: implement\n    return nums\n}\n",
  "    // Your code here\n    return nums\n}\n", "    // TODO: implement the function\n\
    \    return nil\n}\n", "    // TODO: implement the function\n    return nums\n\
    }\n", "    // TODO: implement\n    return nums\n}\n", "    // your code here\n\
    \    return nums\n}\n", "    return nums\n}\n", "    // TODO: Implement me\n \
    \   return nil\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    // YOUR CODE HERE\n    return nil\n}\n", "    return nums\n}\n", " \
    \   // TODO: implement this function\n    return nil\n}\n", "    // TODO: implement\
    \ this function\n    // Hint: use sort.Slice()\n    return nil\n}\n", "    if\
    \ len(nums) == 0 {\n        return nums\n    }\n    // TODO: implement the function\n\
    \    return nums\n}\n", "    // TODO: implement\n    return nil\n}\n", "    //\
    \ TODO: Implement me!\n    return []int{}\n}\n", "    // TODO: implement this\
    \ function\n    return nil\n}\n", "    return nil\n}\n", "    if len(nums) ==\
    \ 0 {\n        return nums\n    }\n    var sum_map = make(map[int]int)\n    var\
    \ sum_list = make([]int, 0)\n    for _, num := range nums {\n        sum := 0\n\
    \        for num != 0 {\n            sum += num % 10\n            num /= 10\n\
    \        }\n        sum_map[sum] = sum\n        sum_list = append(sum_list, sum)\n\
    \    }\n    for i := 0; i < len(sum_list); i++ {\n        for j := i + 1; j <\
    \ len(sum_list); j++ {\n            if sum_list[i] > sum_list[j] {\n         \
    \       sum_list[i], sum_list[j] = sum_list[j], sum_list[i]\n            }\n \
    \       }\n    }\n    var result = make([]int, 0)\n    for _, sum := range sum_list\
    \ {\n        for _, num := range nums {\n            sum_tmp := 0\n          \
    \  for num != 0 {\n                sum_tmp += num % 10\n                num /=\
    \ 10\n            }\n            if sum_tmp == sum {\n                result =\
    \ append(result, num)\n            }\n        }\n    }\n    return result\n}\n",
  "    // TODO: implement this function\n    return []int{}\n}\n", "    // TODO: implement\
    \ this function\n    return nil\n}\n", "    return nums\n}\n", "    // TODO: implement\n\
    \    return nil\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    // TODO: implement this function\n    return []int{}\n}\n", "    //\
    \ TODO: Implement me!\n    return nil\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    // TODO: implement the function\n    return nil\n}\n", "    // TODO:\
    \ implement this function\n    return nil\n}\n", "    return nums\n}\n", "   \
    \ // TODO: implement\n    return nil\n}\n", "    // your code here\n    return\
    \ nums\n}\n", "    if len(nums) == 0 {\n        return nums\n    }\n    // sort\
    \ by sum of digits\n    for i := 0; i < len(nums); i++ {\n        for j := i +\
    \ 1; j < len(nums); j++ {\n            if sum_of_digits(nums[i]) > sum_of_digits(nums[j])\
    \ {\n                nums[i], nums[j] = nums[j], nums[i]\n            }\n    \
    \    }\n    }\n    return nums\n}\n", "    if len(nums) == 0 {\n        return\
    \ nums\n    }\n    // sort by sum of digits\n    // if sum of digits are equal,\
    \ sort by index\n    // if index are equal, sort by value\n    // sort.Slice(nums,\
    \ func(i, j int) bool {\n    //     sum_i := sum_of_digits(nums[i])\n    //  \
    \   sum_j := sum_of_digits(nums[j])\n    //     if sum_i == sum_j {\n    //  \
    \       if i == j {\n    //             return nums[i] < nums[j]\n    //     \
    \    }\n    //         return i < j\n    //     }\n    //     return sum_i < sum_j\n\
    \    // })\n    // return nums\n    // sort by sum of digits\n    // if sum of\
    \ digits are equal, sort by value\n    // if value are equal, sort by index\n\
    \    sort.Slice(nums, func(i, j int) bool {\n        sum_i := sum_of_digits(nums[i])\n\
    \        sum_j := sum_of_digits(nums[j])\n        if sum_i == sum_j {\n      \
    \      if nums[i] == nums[j] {\n                return i < j\n            }\n\
    \            return nums[i] < nums[j]\n        }\n        return sum_i < sum_j\n\
    \    })\n    return nums\n}\n", "    return nums\n}\n", "    if len(nums) == 0\
    \ {\n        return nums\n    }\n    var sum_map = make(map[int]int)\n    for\
    \ i, v := range nums {\n        sum_map[v] = sum_digits(v)\n    }\n    var sum_list\
    \ = make([]int, len(nums))\n    var idx_list = make([]int, len(nums))\n    for\
    \ i, v := range nums {\n        sum_list[i] = sum_map[v]\n        idx_list[i]\
    \ = i\n    }\n    merge_sort(sum_list, idx_list)\n    var result = make([]int,\
    \ len(nums))\n    for i, v := range idx_list {\n        result[i] = nums[v]\n\
    \    }\n    return result\n}\n", "    // TODO: implement\n    return nums\n}\n",
  "    return nums\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    return nil\n}\n", "    // TODO: implement me\n    return nums\n}\n",
  "    // TODO: implement\n    return nums\n}\n", "    // TODO: implement\n    return\
    \ nums\n}\n", "    // TODO: implement this function\n    return nil\n}\n", " \
    \   // TODO: implement this function\n    return nil\n}\n", "    // TODO: implement\
    \ this function\n    return []int{}\n}\n", "    // TODO: implement this function\n\
    \    return []int{}\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    // TODO: implement this function\n    return nil\n}\n", "    // TODO:\
    \ implement this function\n    return nil\n}\n", "    // TODO: Implement the function\n\
    \    return []int{}\n}\n", "    if len(nums) == 0 {\n        return nums\n   \
    \ }\n    var sum_map = make(map[int]int)\n    for _, num := range nums {\n   \
    \     sum_map[num] = sum_digits(num)\n    }\n    var sorted_nums = make([]int,\
    \ len(nums))\n    var sorted_sums = make([]int, len(nums))\n    var i = 0\n  \
    \  for num, sum := range sum_map {\n        sorted_nums[i] = num\n        sorted_sums[i]\
    \ = sum\n        i++\n    }\n    for i := 0; i < len(sorted_sums); i++ {\n   \
    \     for j := i + 1; j < len(sorted_sums); j++ {\n            if sorted_sums[i]\
    \ > sorted_sums[j] {\n                sorted_sums[i], sorted_sums[j] = sorted_sums[j],\
    \ sorted_sums[i]\n                sorted_nums[i], sorted_nums[j] = sorted_nums[j],\
    \ sorted_nums[i]\n            }\n        }\n    }\n    return sorted_nums\n}\n",
  "    // TODO: implement this function\n    return []int{}\n}\n", "    // TODO: implement\
    \ this function\n    return []int{}\n}\n", "    // your code here\n    return\
    \ nums\n}\n", "    // TODO: Implement me!\n    return []int{}\n}\n", "    if len(nums)\
    \ == 0 {\n        return nums\n    }\n    for i := 0; i < len(nums); i++ {\n \
    \       for j := i + 1; j < len(nums); j++ {\n            if sum_of_digits(nums[i])\
    \ > sum_of_digits(nums[j]) {\n                nums[i], nums[j] = nums[j], nums[i]\n\
    \            }\n        }\n    }\n    return nums\n}\n", "    // TODO: implement\
    \ this function\n    return []int{}\n}\n", "    // your code here\n    return\
    \ nil\n}\n", "    // TODO: implement\n    return nums\n}\n", "    // your code\
    \ here\n    return nil\n}\n", "    return nums\n}\n", "    if len(nums) == 0 {\n\
    \        return nums\n    }\n    // sort by sum of digits\n    // if sum of digits\
    \ is the same, sort by index\n    // if index is the same, sort by value\n   \
    \ // sort.Slice(nums, func(i, j int) bool {\n    //     return nums[i] < nums[j]\n\
    \    // })\n    return nums\n}\n", "    return nums\n}\n", "    return nil\n}\n",
  "    // TODO: implement this function\n    return []int{}\n}\n", "    // TODO: implement\
    \ the function\n    return nums\n}\n", "    // TODO: implement the function\n\
    \    return nil\n}\n", "    // TODO: implement this function\n    return []int{}\n\
    }\n", "    // TODO: implement\n    return nil\n}\n", "    return nums\n}\n", " \
    \   return nil\n}\n", "    // your code here\n    return nums\n}\n", "    return\
    \ nums\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
