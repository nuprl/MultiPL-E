name: HumanEval_118_get_closest_vowel
language: go_test.go
prompt: "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word\
  \ string) string {\n"
tests: "func TestGet_Closest_Vowel(t *testing.T) {\n  candidate := get_closest_vowel\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"yogurt\"), expected: \"u\" },\n\
  \     { actual: candidate(\"full\"), expected: \"u\" },\n     { actual: candidate(\"\
  easy\"), expected: \"\" },\n     { actual: candidate(\"eAsy\"), expected: \"\" },\n\
  \     { actual: candidate(\"ali\"), expected: \"\" },\n     { actual: candidate(\"\
  bad\"), expected: \"a\" },\n     { actual: candidate(\"most\"), expected: \"o\"\
  \ },\n     { actual: candidate(\"ab\"), expected: \"\" },\n     { actual: candidate(\"\
  ba\"), expected: \"\" },\n     { actual: candidate(\"quick\"), expected: \"\" },\n\
  \     { actual: candidate(\"anime\"), expected: \"i\" },\n     { actual: candidate(\"\
  Asia\"), expected: \"\" },\n     { actual: candidate(\"Above\"), expected: \"o\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n    \
    \        if word[i] == v[0] {\n                return v\n            }\n     \
    \   }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _,\
    \ v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants\
    \ = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"}\n    var result string\n    var last_consonant_index int\n    var last_vowel_index\
    \ int\n    var last_vowel string\n    var last_consonant string\n    var last_vowel_distance\
    \ int\n    var last_consonant_distance int\n    for i, letter := range word {\n\
    \        for _, vowel := range vowels {\n            if string(letter) == vowel\
    \ {\n                last_vowel_index = i\n                last_vowel = string(letter)\n\
    \            }\n        }\n        for _, consonant := range consonants {\n  \
    \          if string(letter) == consonant {\n                last_consonant_index\
    \ = i\n                last_consonant = string(letter)\n            }\n      \
    \  }\n    }\n    last_vowel_distance = len(word) - last_vowel_index\n    last_consonant_distance\
    \ = len(word) - last_consonant_index\n    if last_vowel_distance > last_consonant_distance\
    \ {\n        result = last_vowel\n    }\n    return result\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i - 1; j\
    \ >= 0; j-- {\n                if is_vowel(word[j]) {\n                    break\n\
    \                }\n                if is_consonant(word[j]) {\n             \
    \       return string(word[i])\n                }\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result = \"\"\n    var last_consonant\
    \ = \"\"\n    var last_vowel = \"\"\n    var last_vowel_index = 0\n    var last_consonant_index\
    \ = 0\n    var last_consonant_found = false\n    var last_vowel_found = false\n\
    \    for i, c := range word {\n        if last_consonant_found && last_vowel_found\
    \ {\n            break\n        }\n        if last_consonant_found && !last_vowel_found\
    \ {\n            for _, v := range vowels {\n                if string(c) == v\
    \ {\n                    last_vowel = string(c)\n                    last_vowel_index\
    \ = i\n                    last_vowel_found = true\n                    break\n\
    \                }\n            }\n        }\n        if !last_consonant_found\
    \ {\n            for _, v := range consonants {\n                if string(c)\
    \ == v {\n                    last_consonant = string(c)\n                   \
    \ last_consonant_index = i\n                    last_consonant_found = true\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    if last_consonant_found && last_vowel_found {\n        result = last_vowel\n\
    \    }\n    return result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v :=\
    \ range vowels {\n            if word[i] == v[0] {\n                return v\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var closest_vowel string\n    var\
    \ closest_vowel_index int\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ if vowels[string(word[i])] {\n            closest_vowel = string(word[i])\n\
    \            closest_vowel_index = i\n            break\n        }\n    }\n  \
    \  if closest_vowel_index == 0 {\n        return \"\"\n    }\n    for i := closest_vowel_index\
    \ - 1; i >= 0; i-- {\n        if !vowels[string(word[i])] {\n            return\
    \ closest_vowel\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]int{\n        \"a\": 1,\n        \"e\"\
    : 1,\n        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n        \"A\":\
    \ 1,\n        \"E\": 1,\n        \"I\": 1,\n        \"O\": 1,\n        \"U\":\
    \ 1,\n    }\n    var prev_consonant bool\n    var closest_vowel string\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])];\
    \ ok {\n            if prev_consonant {\n                closest_vowel = string(word[i])\n\
    \                break\n            }\n        } else {\n            prev_consonant\
    \ = true\n        }\n    }\n    return closest_vowel\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    break\n          \
    \      }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if strings.Contains(vowels, string(word[i])) {\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    continue\n       \
    \         } else {\n                    return string(word[i])\n             \
    \   }\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        for _, v := range vowels {\n            if word[i] == v[0]\
    \ {\n                return v\n            }\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n      \
    \      if word[i] == v[0] {\n                return v\n            }\n       \
    \ }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v :=\
    \ range vowels {\n            if word[i] == v[0] {\n                return v\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\
    \n    for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            return string(word[i])\n        }\n    }\n \
    \   return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            if i == len(word) - 1 {\n                return \"\"\n\
    \            }\n            if !is_vowel(word[i+1], vowels) {\n              \
    \  return string(word[i])\n            }\n        }\n    }\n    return \"\"\n\
    }\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants\
    \ = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"}\n    var result string\n    var is_vowel bool\n    var is_consonant bool\n\
    \    var is_vowel_found bool\n    var is_consonant_found bool\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        is_vowel = false\n        is_consonant = false\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          is_vowel = true\n                break\n            }\n        }\n\
    \        for _, c := range consonants {\n            if word[i] == c[0] {\n  \
    \              is_consonant = true\n                break\n            }\n   \
    \     }\n        if is_vowel {\n            if is_consonant_found {\n        \
    \        result = string(word[i])\n                break\n            } else {\n\
    \                is_vowel_found = true\n            }\n        } else if is_consonant\
    \ {\n            if is_vowel_found {\n                result = string(word[i])\n\
    \                break\n            } else {\n                is_consonant_found\
    \ = true\n            }\n        }\n    }\n    return result\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i - 1; j\
    \ >= 0; j-- {\n                if is_vowel(word[j]) {\n                    return\
    \ \"\"\n                }\n                if is_consonant(word[j]) {\n      \
    \              return string(word[i])\n                }\n            }\n    \
    \    }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    break\n                }\n                for _, v :=\
    \ range vowels {\n                    if string(word[j]) == v {\n            \
    \            return string(word[j])\n                    }\n                }\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]int{\"\
    a\": 1, \"e\": 1, \"i\": 1, \"o\": 1, \"u\": 1, \"A\": 1, \"E\": 1, \"I\": 1,\
    \ \"O\": 1, \"U\": 1}\n    var prev_vowel string\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if _, ok := vowels[string(word[i])]; ok {\n         \
    \   prev_vowel = string(word[i])\n            break\n        }\n    }\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])];\
    \ ok {\n            if prev_vowel != string(word[i]) {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants\
    \ = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"}\n    var result string\n    var distance int\n    var minDistance int = len(word)\n\
    \    for i, c := range word {\n        if i == 0 || i == len(word) - 1 {\n   \
    \         continue\n        }\n        if contains(vowels, string(c)) {\n    \
    \        if contains(consonants, string(word[i-1])) && contains(consonants, string(word[i+1]))\
    \ {\n                distance = i\n                if distance < minDistance {\n\
    \                    minDistance = distance\n                    result = string(c)\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            } else if !is_vowel(word[i\
    \ + 1], vowels) {\n                return string(word[i])\n            }\n   \
    \     }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _,\
    \ vowel := range vowels {\n            if word[i] == vowel[0] {\n            \
    \    return vowel\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants\
    \ = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"}\n    var res string\n    var word_len = len(word)\n    for i := word_len\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if string(word[i])\
    \ == v {\n                res = string(word[i])\n                break\n     \
    \       }\n        }\n        if res != \"\" {\n            break\n        }\n\
    \    }\n    if res == \"\" {\n        return res\n    }\n    var left_consonant_index\
    \ int\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range consonants\
    \ {\n            if string(word[i]) == v {\n                left_consonant_index\
    \ = i\n                break\n            }\n        }\n        if left_consonant_index\
    \ != 0 {\n            break\n        }\n    }\n    if left_consonant_index ==\
    \ 0 {\n        return \"\"\n    }\n    var right_consonant_index int\n    for\
    \ i := left_consonant_index - 1; i >= 0; i-- {\n        for _, v := range consonants\
    \ {\n            if string(word[i]) == v {\n                right_consonant_index\
    \ = i\n                break\n            }\n        }\n        if right_consonant_index\
    \ != 0 {\n            break\n        }\n    }\n    if right_consonant_index ==\
    \ 0 {\n        return \"\"\n    }\n    return res\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i])) {\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n\
    \    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"}\n    var word_len = len(word)\n    var vowel_index = -1\n\
    \    var consonant_index = -1\n    var vowel_index_list = []int{}\n    var consonant_index_list\
    \ = []int{}\n    for i := 0; i < word_len; i++ {\n        for _, v := range vowels\
    \ {\n            if string(word[i]) == v {\n                vowel_index_list =\
    \ append(vowel_index_list, i)\n            }\n        }\n        for _, v := range\
    \ consonants {\n            if string(word[i]) == v {\n                consonant_index_list\
    \ = append(consonant_index_list, i)\n            }\n        }\n    }\n    if len(vowel_index_list)\
    \ == 0 || len(consonant_index_list) == 0 {\n        return \"\"\n    }\n    for\
    \ i := len(consonant_index_list) - 1; i >= 0; i-- {\n        for j := len(vowel_index_list)\
    \ - 1; j >= 0; j-- {\n            if vowel_index_list[j] < consonant_index_list[i]\
    \ {\n                return string(word[vowel_index_list[j]])\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n  \
    \      \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\"\
    : true,\n        \"u\": true,\n    }\n    var last_consonant string\n    var closest_vowel\
    \ string\n    for _, char := range word {\n        if vowels[string(char)] {\n\
    \            if last_consonant != \"\" {\n                return string(char)\n\
    \            }\n            closest_vowel = string(char)\n        } else {\n \
    \           last_consonant = string(char)\n        }\n    }\n    return closest_vowel\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n         \
    \   if word[i] == v[0] {\n                return v\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i])) {\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    return \"\"\n              \
    \  }\n                if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n\
    \    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"}\n    var result string\n    var vowel_index int\n    var\
    \ consonant_index int\n    var vowel_count int\n    var consonant_count int\n\
    \    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n \
    \   var n int\n    var o int\n    var p int\n    var q int\n    var r int\n  \
    \  var s int\n    var t int\n    var u int\n    var v int\n    var w int\n   \
    \ var x int\n    var y int\n    var z int\n    var vowel_found bool\n    var consonant_found\
    \ bool\n    var vowel_consonant_found bool\n    var vowel_consonant_distance int\n\
    \    var vowel_consonant_distance_min int\n    var vowel_consonant_distance_min_index\
    \ int\n    var vowel_consonant_distance_min_found bool\n    var vowel_consonant_distance_min_found_index\
    \ int\n    var vowel_consonant_distance_min_found_index_found bool\n    var vowel_consonant_distance_min_found_index_found_index\
    \ int\n    var vowel_consonant_distance_min_found_index_found_index_found bool\n\
    \    var vowel_consonant_distance_min_found_index_found_index_found_index int\n\
    \    var vowel_consonant_distance_min_found_index_found_index_found_index_found\
    \ bool\n    var vowel_consonant_distance_min_found_index_found_index_found_index_found_index\
    \ int\n    var vowel_consonant_distance_min_found_index_found_index_found_index_found_index_found\
    \ bool\n    var vowel_consonant_distance_min_found_index_found_index_", "    var\
    \ vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result\
    \ string\n    var found bool\n    var last_vowel_index int\n    var last_consonant_index\
    \ int\n    var last_vowel string\n    var last_consonant string\n    var last_vowel_found\
    \ bool\n    var last_consonant_found bool\n    for i := len(word) - 1; i >= 0;\
    \ i-- {\n        if !found {\n            for _, v := range vowels {\n       \
    \         if string(word[i]) == v {\n                    last_vowel_index = i\n\
    \                    last_vowel = string(word[i])\n                    last_vowel_found\
    \ = true\n                    break\n                }\n            }\n      \
    \      for _, c := range consonants {\n                if string(word[i]) == c\
    \ {\n                    last_consonant_index = i\n                    last_consonant\
    \ = string(word[i])\n                    last_consonant_found = true\n       \
    \             break\n                }\n            }\n            if last_vowel_found\
    \ && last_consonant_found {\n                if last_vowel_index > last_consonant_index\
    \ {\n                    result = last_vowel\n                    found = true\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   return \"\"\n                }\n                if is_consonant(word[j]) {\n\
    \                    return string(word[i])\n                }\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\n    var closest_vowel\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            closest_vowel = string(word[i])\n          \
    \  break\n        }\n    }\n    return closest_vowel\n}\n", "    var vowels =\
    \ map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n        \"i\": 1,\n \
    \       \"o\": 1,\n        \"u\": 1,\n        \"A\": 1,\n        \"E\": 1,\n \
    \       \"I\": 1,\n        \"O\": 1,\n        \"U\": 1,\n    }\n    var result\
    \ string\n    var last_vowel_index int\n    for i, c := range word {\n       \
    \ if _, ok := vowels[string(c)]; ok {\n            last_vowel_index = i\n    \
    \    }\n    }\n    for i := last_vowel_index; i >= 0; i-- {\n        if _, ok\
    \ := vowels[string(word[i])]; ok {\n            if i == 0 {\n                break\n\
    \            }\n            if _, ok := vowels[string(word[i-1])]; !ok {\n   \
    \             result = string(word[i])\n                break\n            }\n\
    \        }\n    }\n    return result\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n        \
    \        if is_vowel(word[j]) {\n                    break\n                }\n\
    \                if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n    \
    \    if strings.Contains(vowels, string(word[i])) {\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    // your code here\n    return \"\
    \"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var\
    \ closest_vowel string\n    var closest_vowel_index int\n    var closest_vowel_distance\
    \ int\n    for i, char := range word {\n        if char == 'a' || char == 'e'\
    \ || char == 'i' || char == 'o' || char == 'u' {\n            if closest_vowel_index\
    \ == 0 {\n                closest_vowel_index = i\n                closest_vowel\
    \ = string(char)\n            } else {\n                if i - closest_vowel_index\
    \ > closest_vowel_distance {\n                    closest_vowel_index = i\n  \
    \                  closest_vowel = string(char)\n                }\n         \
    \   }\n        }\n    }\n    return closest_vowel\n}\n", "    vowels := \"aeiouAEIOU\"\
    \n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[strings.Index(vowels,\
    \ string(word[i]))] != \"\" {\n            if i + 1 < len(word) && vowels[strings.Index(vowels,\
    \ string(word[i + 1]))] == \"\" {\n                return string(word[i])\n  \
    \          }\n        }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n\
    \    var vowel_index int\n    var consonant_index int\n    var vowel_found bool\n\
    \    var consonant_found bool\n    var vowel_distance int\n    var consonant_distance\
    \ int\n    var distance int\n    var min_distance int\n    var min_vowel_index\
    \ int\n    var min_consonant_index int\n    var min_vowel_distance int\n    var\
    \ min_consonant_distance int\n    var min_distance_index int\n    var min_distance_vowel_index\
    \ int\n    var min_distance_consonant_index int\n    var min_distance_vowel_distance\
    \ int\n    var min_distance_consonant_distance int\n    var min_distance_vowel_found\
    \ bool\n    var min_distance_consonant_found bool\n    var min_distance_vowel\
    \ string\n    var min_distance_consonant string\n    var min_distance_vowel_char\
    \ string\n    var min_distance_consonant_char string\n    var min_distance_vowel_char_index\
    \ int\n    var min_distance_consonant_char_index int\n    var min_distance_vowel_char_distance\
    \ int\n    var min_distance_consonant_char_distance int\n    var min_distance_vowel_char_found\
    \ bool\n    var min_distance_consonant_char_found bool\n    var min_distance_vowel_char_string\
    \ string\n    var min_distance_consonant_char_string string\n    var min_distance_vowel_char_string_index\
    \ int\n    var min_distance_consonant_char_string_index int\n    var min_distance_vowel_char_string_distance\
    \ int\n    var min_distance", "    vowels := \"aeiou\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if i > 0 && vowels[i] == word[i] {\n           \
    \ return string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i] ==\
    \ v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n    \
    \        for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n\
    \                    break\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     for _, v := range vowels {\n            if word[i] == v[0] {\n         \
    \       return v\n            }\n        }\n    }\n    return \"\"\n}\n", "  \
    \  vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ vowels_map := make(map[string]bool)\n    for _, v := range vowels {\n      \
    \  vowels_map[v] = true\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n  \
    \      if vowels_map[string(word[i])] {\n            if i == len(word) - 1 {\n\
    \                return \"\"\n            }\n            if !vowels_map[string(word[i\
    \ + 1])] {\n                return string(word[i])\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    break\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    for i := len(word) -\
    \ 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            result = string(word[i])\n\
    \            break\n        }\n    }\n    return result\n}\n", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if contains(vowels, string(word[i])) {\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var result string\n    var last_consonant\
    \ string\n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            result = string(word[i])\n        } else {\n            if last_consonant\
    \ != \"\" {\n                break\n            }\n            last_consonant\
    \ = string(word[i])\n        }\n    }\n    return result\n}\n", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i == len(word)\
    \ - 1 {\n                return \"\"\n            }\n            if is_vowel(word[i\
    \ + 1], vowels) {\n                continue\n            }\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    var vowels =\
    \ map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n        \"i\": 1,\n \
    \       \"o\": 1,\n        \"u\": 1,\n        \"A\": 1,\n        \"E\": 1,\n \
    \       \"I\": 1,\n        \"O\": 1,\n        \"U\": 1,\n    }\n    var result\
    \ string\n    var prev_is_vowel bool\n    var prev_is_consonant bool\n    for\
    \ _, char := range word {\n        if _, ok := vowels[string(char)]; ok {\n  \
    \          if prev_is_consonant {\n                result = string(char)\n   \
    \             break\n            }\n            prev_is_vowel = true\n       \
    \ } else {\n            if prev_is_vowel {\n                prev_is_consonant\
    \ = true\n            }\n        }\n    }\n    return result\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_consonant(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   return string(word[j])\n                }\n            }\n        }\n    }\n\
    \    return \"\"\n}\n", "    vowels := \"aeiou\"\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if vowels[strings.Index(vowels, string(word[i]))] !=\
    \ \"\" {\n            return string(word[i])\n        }\n    }\n    return \"\"\
    \n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var\
    \ consonants = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"}\n    var closest_vowel string\n    var closest_vowel_index int\n\
    \    var closest_consonant_index int\n    var closest_consonant string\n    var\
    \ word_length int = len(word)\n    var i int\n    var j int\n    var k int\n \
    \   var l int\n    var m int\n    var n int\n    var o int\n    var p int\n  \
    \  var q int\n    var r int\n    var s int\n    var t int\n    var u int\n   \
    \ var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var\
    \ a int\n    var e int\n    var i_ int\n    var o_ int\n    var u_ int\n    var\
    \ found_vowel bool = false\n    var found_consonant bool = false\n    var found_closest_vowel\
    \ bool = false\n    var found_closest_consonant bool = false\n    var found_closest_vowel_index\
    \ bool = false\n    var found_closest_consonant_index bool = false\n    var found_closest_vowel_index_after_consonant\
    \ bool = false\n    var found_closest_consonant_index_before_vowel bool = false\n\
    \    var found_closest_vowel_index_after_consonant_and_closest_consonant_index_before_vowel\
    \ bool = false\n    var found_closest_vowel_index_after_consonant_and_closest_consonant_index_before_vowel_and_closest_vowel\
    \ bool = false\n    var found_closest_vowel_index_after_consonant_and_cl", " \
    \   var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants\
    \ = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"}\n    var result string\n    var vowel_index int\n    var consonant_index\
    \ int\n    var vowel_found bool\n    var consonant_found bool\n    var distance\
    \ int\n    var min_distance int\n    var min_distance_vowel string\n    var min_distance_consonant\
    \ string\n    var min_distance_vowel_index int\n    var min_distance_consonant_index\
    \ int\n    var min_distance_vowel_found bool\n    var min_distance_consonant_found\
    \ bool\n    var min_distance_set bool\n\n    for i, c := range word {\n      \
    \  for _, v := range vowels {\n            if string(c) == v {\n             \
    \   vowel_index = i\n                vowel_found = true\n                break\n\
    \            }\n        }\n        if vowel_found {\n            for _, v := range\
    \ consonants {\n                if string(c) == v {\n                    consonant_index\
    \ = i\n                    consonant_found = true\n                    break\n\
    \                }\n            }\n            if consonant_found {\n        \
    \        distance = consonant_index - vowel_index\n                if !min_distance_set\
    \ {\n                    min_distance = distance\n                    min_distance_vowel\
    \ = string(c)\n                    min_distance_consonant = string(c)\n      \
    \              min_distance_vowel_index = vowel_index\n                    min_distance_consonant_index\
    \ = consonant_index\n                    min_distance_vowel_found = vowel_found\n\
    \                    min_distance_consonant_found = consonant_found\n        \
    \            min_distance_set = true\n                } else {\n             \
    \       if distance < min_distance {\n                        min_distance = distance\n\
    \                        min_distance_vowel = string(c)\n                    \
    \    min_distance_consonant =", "    vowels := \"aeiouAEIOU\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if i == 0 {\n            return \"\"\n        }\n\
    \        if word[i] == ' ' {\n            continue\n        }\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            if strings.Contains(vowels, string(word[i -\
    \ 1])) {\n                continue\n            }\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if vowels[strings.Index(vowels, string(word[i]))]\
    \ != 0 {\n            return string(word[i])\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var closest_vowel\
    \ string\n    var closest_vowel_index int\n    var closest_vowel_distance int\n\
    \    var vowel_index int\n    var vowel_distance int\n    for i := len(word) -\
    \ 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            vowel_index =\
    \ i\n            for _, vowel := range vowels {\n                if word[i] ==\
    \ vowel[0] {\n                    vowel_distance = len(word) - i\n           \
    \         if closest_vowel_distance == 0 || vowel_distance < closest_vowel_distance\
    \ {\n                        closest_vowel_distance = vowel_distance\n       \
    \                 closest_vowel_index = vowel_index\n                        closest_vowel\
    \ = string(word[i])\n                    }\n                }\n            }\n\
    \        }\n    }\n    return closest_vowel\n}\n", "    vowels := \"aeiou\"\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[strings.Index(vowels,\
    \ string(word[i]))] == string(word[i]) {\n            if i == len(word) - 1 {\n\
    \                continue\n            }\n            if vowels[strings.Index(vowels,\
    \ string(word[i+1]))] != string(word[i+1]) {\n                return string(word[i])\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\
    \n    var last_vowel string\n    var last_consonant string\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i])) {\n\
    \            last_vowel = string(word[i])\n        } else {\n            last_consonant\
    \ = string(word[i])\n            break\n        }\n    }\n    if last_vowel ==\
    \ \"\" || last_consonant == \"\" {\n        return \"\"\n    }\n    return last_vowel\n\
    }\n", "    var vowels = \"aeiou\"\n    var consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var last_vowel = \"\"\n    var last_consonant = \"\
    \"\n    for i := len(word) - 1; i >= 0; i-- {\n        var c = string(word[i])\n\
    \        if vowels[0:5].contains(c) {\n            last_vowel = c\n        } else\
    \ if consonants[0:21].contains(c) {\n            last_consonant = c\n        }\n\
    \        if last_vowel != \"\" && last_consonant != \"\" {\n            result\
    \ = last_vowel\n            break\n        }\n    }\n    return result\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    var result string\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if is_vowel(word[i]) {\n            result = string(word[i])\n\
    \            break\n        }\n    }\n    return result\n}\n", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        for _, v := range vowels {\n            if word[i] == v[0]\
    \ {\n                return v\n            }\n        }\n    }\n    return \"\"\
    \n}\n", "    // your code here\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    break\n          \
    \      }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if vowels[strings.Index(vowels, string(word[i]))] != 0 {\n\
    \            if i == len(word) - 1 {\n                return string(word[i])\n\
    \            } else if vowels[strings.Index(vowels, string(word[i+1]))] == 0 {\n\
    \                return string(word[i])\n            }\n        }\n    }\n   \
    \ return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"\
    }\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                return v\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    break\n                }\n \
    \               if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if strings.Contains(vowels, string(word[i])) {\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if string(word[i]) == v {\n \
    \               if i == len(word) - 1 {\n                    return \"\"\n   \
    \             }\n                if i == 0 {\n                    return \"\"\n\
    \                }\n                for _, v := range vowels {\n             \
    \       if string(word[i-1]) == v {\n                        return \"\"\n   \
    \                 }\n                    if string(word[i+1]) == v {\n       \
    \                 return \"\"\n                    }\n                }\n    \
    \            return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n    \
    \        for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n\
    \                    break\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\n   \
    \ var prev_char, curr_char, next_char rune\n    var prev_char_is_vowel, curr_char_is_vowel,\
    \ next_char_is_vowel bool\n    var prev_char_is_consonant, curr_char_is_consonant,\
    \ next_char_is_consonant bool\n    var prev_char_is_letter, curr_char_is_letter,\
    \ next_char_is_letter bool\n    var prev_char_is_space, curr_char_is_space, next_char_is_space\
    \ bool\n    var prev_char_is_punctuation, curr_char_is_punctuation, next_char_is_punctuation\
    \ bool\n    var prev_char_is_number, curr_char_is_number, next_char_is_number\
    \ bool\n    var prev_char_is_symbol, curr_char_is_symbol, next_char_is_symbol\
    \ bool\n    var prev_char_is_mark, curr_char_is_mark, next_char_is_mark bool\n\
    \    var prev_char_is_separator, curr_char_is_separator, next_char_is_separator\
    \ bool\n    var prev_char_is_other, curr_char_is_other, next_char_is_other bool\n\
    \    var prev_char_is_control, curr_char_is_control, next_char_is_control bool\n\
    \    var prev_char_is_graphic, curr_char_is_graphic, next_char_is_graphic bool\n\
    \    var prev_char_is_print, curr_char_is_print, next_char_is_print bool\n   \
    \ var prev_char_is_title, curr_char_is_title, next_char_is_title bool\n    var\
    \ prev_char_is_upper, curr_char_is_upper, next_char_is_upper bool\n    var prev_char_is_lower,\
    \ curr_char_is_lower, next_char_is_lower bool\n    var prev_char_is_digit,", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i\
    \ == len(word) - 1 {\n                return \"\"\n            } else if is_vowel(word[i+1],\
    \ vowels) {\n                continue\n            } else {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n    \
    \    if i == 0 {\n            return \"\"\n        }\n        if word[i] == '\
    \ ' {\n            continue\n        }\n        if word[i-1] == ' ' {\n      \
    \      return \"\"\n        }\n        if vowels[strings.Index(vowels, string(word[i]))]\
    \ != 0 {\n            return string(word[i])\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n      \
    \      if word[i] == v[0] {\n                return v\n            }\n       \
    \ }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            if i == len(word) - 1 {\n                continue\n \
    \           }\n            if is_vowel(word[i + 1], vowels) {\n              \
    \  continue\n            }\n            return string(word[i])\n        }\n  \
    \  }\n    return \"\"\n}\n", "    // TODO: implement this function\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    break\n                }\n \
    \               if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"\
    e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n\
    \    }\n    var closest_vowel string\n    var closest_vowel_index int\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])] {\n  \
    \          closest_vowel = string(word[i])\n            closest_vowel_index =\
    \ i\n            break\n        }\n    }\n    if closest_vowel_index == 0 {\n\
    \        return \"\"\n    }\n    for i := closest_vowel_index - 1; i >= 0; i--\
    \ {\n        if !vowels[string(word[i])] {\n            return closest_vowel\n\
    \        }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result string\n  \
    \  var last_vowel_index int\n    var last_consonant_index int\n    for i, c :=\
    \ range word {\n        if string(c) == \"a\" || string(c) == \"e\" || string(c)\
    \ == \"i\" || string(c) == \"o\" || string(c) == \"u\" {\n            last_vowel_index\
    \ = i\n        }\n        if string(c) == \"b\" || string(c) == \"c\" || string(c)\
    \ == \"d\" || string(c) == \"f\" || string(c) == \"g\" || string(c) == \"h\" ||\
    \ string(c) == \"j\" || string(c) == \"k\" || string(c) == \"l\" || string(c)\
    \ == \"m\" || string(c) == \"n\" || string(c) == \"p\" || string(c) == \"q\" ||\
    \ string(c) == \"r\" || string(c) == \"s\" || string(c) == \"t\" || string(c)\
    \ == \"v\" || string(c) == \"w\" || string(c) == \"x\" || string(c) == \"y\" ||\
    \ string(c) == \"z\" {\n            last_consonant_index = i\n        }\n    }\n\
    \    if last_vowel_index > last_consonant_index {\n        result = string(word[last_vowel_index])\n\
    \    }\n    return result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    break\n                }\n                if is_consonant(word[j])\
    \ {\n                    for _, v := range vowels {\n                        if\
    \ string(word[i]) == v {\n                            return string(word[i])\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\
    \n    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[strings.Index(vowels,\
    \ string(word[i]))] != 0 {\n            return string(word[i])\n        }\n  \
    \  }\n    return \"\"\n}\n", "    var vowels = map[string]bool{\n        \"a\"\
    : true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n  \
    \      \"u\": true,\n    }\n    var found bool\n    var closest_vowel string\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if found {\n                return closest_vowel\n          \
    \  }\n            closest_vowel = string(word[i])\n        } else {\n        \
    \    found = true\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                if i == len(word) - 1 {\n                    return\
    \ \"\"\n                }\n                if i == 0 {\n                    return\
    \ \"\"\n                }\n                for _, v := range vowels {\n      \
    \              if word[i + 1] == v[0] {\n                        return \"\"\n\
    \                    }\n                    if word[i - 1] == v[0] {\n       \
    \                 return \"\"\n                    }\n                }\n    \
    \            return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\",\
    \ \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var vowels_map = make(map[string]bool)\n\
    \    var consonants_map = make(map[string]bool)\n    for _, v := range vowels\
    \ {\n        vowels_map[v] = true\n    }\n    for _, v := range consonants {\n\
    \        consonants_map[v] = true\n    }\n    var result string\n    var last_char\
    \ string\n    var last_char_is_consonant bool\n    for _, v := range word {\n\
    \        if last_char_is_consonant && vowels_map[string(v)] {\n            result\
    \ = string(v)\n            break\n        }\n        if consonants_map[string(v)]\
    \ {\n            last_char_is_consonant = true\n        } else {\n           \
    \ last_char_is_consonant = false\n        }\n        last_char = string(v)\n \
    \   }\n    return result\n}\n", "    vowels := \"aeiou\"\n    var last_vowel string\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            last_vowel = string(word[i])\n            break\n\
    \        }\n    }\n    if last_vowel == \"\" {\n        return \"\"\n    }\n \
    \   for i := len(word) - 1; i >= 0; i-- {\n        if strings.Contains(vowels,\
    \ string(word[i])) {\n            continue\n        }\n        if strings.Contains(vowels,\
    \ string(word[i-1])) {\n            return string(word[i-1])\n        }\n    }\n\
    \    return last_vowel\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range\
    \ vowels {\n            if word[i] == v[0] {\n                return v\n     \
    \       }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    return \"\"\n    \
    \            }\n                if is_consonant(word[j]) {\n                 \
    \   for _, v := range vowels {\n                        if v == string(word[i])\
    \ {\n                            return v\n                        }\n       \
    \             }\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if i == 0 {\n            return \"\"\n        }\n        if\
    \ vowels[i] != 0 {\n            if vowels[i-1] != 0 {\n                return\
    \ string(vowels[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   // your code here\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    var closest_vowel string\n    var closest_vowel_index\
    \ int\n    var closest_vowel_distance int\n    var word_length int = len(word)\n\
    \    var word_index int\n    var vowel_index int\n    var vowel_distance int\n\
    \    var vowel_found bool\n    var vowel_found_before bool\n    var vowel_found_after\
    \ bool\n    var vowel_found_before_index int\n    var vowel_found_after_index\
    \ int\n    var vowel_found_before_distance int\n    var vowel_found_after_distance\
    \ int\n    for word_index = 0; word_index < word_length; word_index++ {\n    \
    \    for vowel_index = 0; vowel_index < len(vowels); vowel_index++ {\n       \
    \     if string(word[word_index]) == vowels[vowel_index] {\n                vowel_found\
    \ = true\n                break\n            }\n        }\n        if vowel_found\
    \ {\n            vowel_found = false\n            vowel_found_before = false\n\
    \            vowel_found_after = false\n            vowel_found_before_index =\
    \ word_index - 1\n            vowel_found_after_index = word_index + 1\n     \
    \       vowel_found_before_distance = word_index\n            vowel_found_after_distance\
    \ = word_length - word_index\n            for vowel_found_before_index >= 0 {\n\
    \                for vowel_index = 0; vowel_index < len(vowels); vowel_index++\
    \ {\n                    if string(word[vowel_found_before_index]) == vowels[vowel_index]\
    \ {\n                        vowel_found_before = true\n                     \
    \   break\n                    }\n                }\n                if vowel_found_before\
    \ {\n                    break\n                }\n                vowel_found_before_index--\n\
    \                vowel_found_before_distance--\n            }\n            for\
    \ vowel_found_after_index < word_length {\n                for vowel_index = 0;\
    \ vowel_index < len(vowels); vowel_index++ {\n                    if string(word[vowel_found_after_index])\
    \ == vowels[", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n\
    \    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"}\n    var result string\n    var vowel_index int\n    var\
    \ consonant_index int\n    var vowel_found bool\n    var consonant_found bool\n\
    \    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n \
    \   var n int\n    var o int\n    var p int\n    var q int\n    var r int\n  \
    \  var s int\n    var t int\n    var u int\n    var v int\n    var w int\n   \
    \ var x int\n    var y int\n    var z int\n    var index int\n    var closest_vowel\
    \ string\n    var closest_vowel_index int\n    var closest_consonant string\n\
    \    var closest_consonant_index int\n    var closest_vowel_found bool\n    var\
    \ closest_consonant_found bool\n    var closest_vowel_distance int\n    var closest_consonant_distance\
    \ int\n    var closest_vowel_distance_found bool\n    var closest_consonant_distance_found\
    \ bool\n    var distance int\n    var distance_found bool\n    var distance_index\
    \ int\n    var distance_index_found bool\n    var distance_index_list []int\n\
    \    var distance_list []int\n    var distance_list_found bool\n    var distance_list_index\
    \ int\n    var distance_list_index_found bool\n    var distance_list_index_list\
    \ []int\n    var distance_list_index_list_found bool\n    var distance_list_index_list_index\
    \ int\n    var distance_list_index_list_index_found bool\n    var distance_list_index_list_index_list\
    \ []int\n    var distance_list_index_list_index_list_found bool\n    var distance_list_index_list_index_list_index\
    \ int", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n      \
    \      if word[i] == v[0] {\n                return v\n            }\n       \
    \ }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n        \"\
    a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"o\": true,\n\
    \        \"u\": true,\n    }\n    var result string\n    var prev_vowel string\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            prev_vowel = string(word[i])\n            continue\n        }\n\
    \        if prev_vowel != \"\" {\n            result = prev_vowel\n          \
    \  break\n        }\n    }\n    return result\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    break\n          \
    \      }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ var result string\n    var last_vowel_index int\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i] ==\
    \ v[0] {\n                last_vowel_index = i\n                break\n      \
    \      }\n        }\n        if last_vowel_index != 0 {\n            break\n \
    \       }\n    }\n    if last_vowel_index == 0 {\n        return result\n    }\n\
    \    for i := last_vowel_index; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                result = string(word[i])\n\
    \                break\n            }\n        }\n        if result != \"\" {\n\
    \            break\n        }\n    }\n    return result\n}\n", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0;\
    \ j-- {\n                if is_vowel(word[j]) {\n                    break\n \
    \               }\n                if is_consonant(word[j]) {\n              \
    \      return string(word[i])\n                }\n            }\n        }\n \
    \   }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range\
    \ vowels {\n            if word[i] == v[0] {\n                return v\n     \
    \       }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    break\n                }\n \
    \               if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                if\
    \ i == len(word) - 1 {\n                    return \"\"\n                }\n \
    \               for j := i + 1; j < len(word); j++ {\n                    for\
    \ _, v := range vowels {\n                        if word[j] == v[0] {\n     \
    \                       return \"\"\n                        }\n             \
    \       }\n                    return string(word[i])\n                }\n   \
    \         }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    vowels_map := make(map[string]bool)\n  \
    \  for _, v := range vowels {\n        vowels_map[v] = true\n    }\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        if vowels_map[string(word[i])] {\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    var vowels =\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants = []string{\"\
    b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result\
    \ string\n    var index int\n    var found bool\n    for i := len(word) - 1; i\
    \ >= 0; i-- {\n        for j := 0; j < len(consonants); j++ {\n            if\
    \ word[i] == consonants[j][0] {\n                for k := 0; k < len(vowels);\
    \ k++ {\n                    if word[i-1] == vowels[k][0] {\n                \
    \        result = string(word[i-1])\n                        index = i-1\n   \
    \                     found = true\n                        break\n          \
    \          }\n                }\n                if found {\n                \
    \    break\n                }\n            }\n        }\n        if found {\n\
    \            break\n        }\n    }\n    if found {\n        for i := index-1;\
    \ i >= 0; i-- {\n            for j := 0; j < len(consonants); j++ {\n        \
    \        if word[i] == consonants[j][0] {\n                    return result\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    break\n          \
    \      }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n\
    \    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"}\n    var result string\n    var prev_char string\n    var\
    \ prev_char_is_vowel bool\n    var prev_char_is_consonant bool\n    var prev_char_is_empty\
    \ bool\n    var curr_char string\n    var curr_char_is_vowel bool\n    var curr_char_is_consonant\
    \ bool\n    var curr_char_is_empty bool\n    var next_char string\n    var next_char_is_vowel\
    \ bool\n    var next_char_is_consonant bool\n    var next_char_is_empty bool\n\
    \    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n \
    \   var n int\n    var o int\n    var p int\n    var q int\n    var r int\n  \
    \  var s int\n    var t int\n    var u int\n    var v int\n    var w int\n   \
    \ var x int\n    var y int\n    var z int\n    var a int\n    var e int\n    var\
    \ i_ int\n    var o_ int\n    var u_ int\n    var b int\n    var c int\n    var\
    \ d int\n    var f int\n    var g int\n    var h int\n    var j_ int\n    var\
    \ k_ int\n    var l_ int\n    var m_ int\n    var n_ int\n    var p_ int\n   \
    \ var q_ int\n    var r_ int\n    var s_ int\n    var t_ int\n    var v_ int\n\
    \    var w_ int\n    var x_ int\n    var y_ int\n    var z_ int\n    var prev_char_is_vowel_\
    \ bool\n    var prev_char_is_consonant_ bool\n    var prev_char_is_empty_", " \
    \   vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n \
    \       \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var\
    \ closest_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ vowels[string(word[i])] {\n            closest_vowel = string(word[i])\n   \
    \         break\n        }\n    }\n    return closest_vowel\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i] ==\
    \ v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    return \"\"\n              \
    \  }\n                if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n \
    \       \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var\
    \ closest_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ vowels[string(word[i])] {\n            closest_vowel = string(word[i])\n   \
    \         break\n        }\n    }\n    if closest_vowel == \"\" {\n        return\
    \ closest_vowel\n    }\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ vowels[string(word[i])] {\n            continue\n        }\n        if closest_vowel\
    \ == string(word[i]) {\n            return \"\"\n        }\n        return closest_vowel\n\
    \    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"a\": true, \"\
    e\": true, \"i\": true, \"o\": true, \"u\": true}\n    var last_vowel string\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            last_vowel = string(word[i])\n            break\n        }\n\
    \    }\n    if last_vowel == \"\" {\n        return \"\"\n    }\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        if !vowels[string(word[i])] {\n      \
    \      return last_vowel\n        }\n        last_vowel = string(word[i])\n  \
    \  }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range\
    \ vowels {\n            if word[i] == v[0] {\n                return v\n     \
    \       }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    return \"\"\n              \
    \  }\n                if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := map[string]bool{\n        \"a\": true,\n        \"e\": true,\n \
    \       \"i\": true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var\
    \ closest_vowel string\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ vowels[string(word[i])] {\n            closest_vowel = string(word[i])\n   \
    \         break\n        }\n    }\n    return closest_vowel\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i - 1; j\
    \ >= 0; j-- {\n                if is_vowel(word[j]) {\n                    break\n\
    \                }\n                if is_consonant(word[j]) {\n             \
    \       return string(word[i])\n                }\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i])\
    \ {\n            for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j])\
    \ {\n                    break\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n    \
    \            if is_vowel(word[j]) {\n                    break\n             \
    \   }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels)\
    \ {\n            if i == len(word) - 1 {\n                return \"\"\n      \
    \      }\n            if is_vowel(word[i + 1], vowels) {\n                continue\n\
    \            }\n            return string(word[i])\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    var result string\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        if is_vowel(word[i]) {\n            result = string(word[i])\n\
    \            break\n        }\n    }\n    return result\n}\n", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        for _, v := range vowels {\n            if word[i] == v[0]\
    \ {\n                return v\n            }\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[strings.Index(vowels, string(word[i]))] != 0 {\n      \
    \      if i == len(word) - 1 {\n                return \"\"\n            }\n \
    \           if vowels[strings.Index(vowels, string(word[i + 1]))] == 0 {\n   \
    \             return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n\
    \    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"}\n    var result string\n    var vowel_index int\n    var\
    \ consonant_index int\n    var vowel_found bool\n    var consonant_found bool\n\
    \    var vowel_found_index int\n    var consonant_found_index int\n    var distance\
    \ int\n    var min_distance int\n    var min_distance_index int\n    var i int\n\
    \    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n \
    \   var o int\n    var p int\n    var q int\n    var r int\n    var s int\n  \
    \  var t int\n    var u int\n    var v int\n    var w int\n    var x int\n   \
    \ var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var\
    \ d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i\
    \ int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n\
    \    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n \
    \   var t int\n    var u int\n    var v int\n    var w int\n    var x int\n  \
    \  var y int\n    var z int\n    var a int\n    var b int\n    var c int\n   \
    \ var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var\
    \ i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n\
    \ int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n\
    \    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n \
    \   var", "    vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if vowels[strings.Index(vowels, string(word[i]))] != \"\" {\n       \
    \     if i == len(word) - 1 {\n                return \"\"\n            }\n  \
    \          if vowels[strings.Index(vowels, string(word[i+1]))] == \"\" {\n   \
    \             return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n    \
    \        for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n\
    \                    break\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     for _, v := range vowels {\n            if word[i] == v[0] {\n         \
    \       return v\n            }\n        }\n    }\n    return \"\"\n}\n", "  \
    \  vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i -\
    \ 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n                 \
    \   break\n                }\n                if is_consonant(word[j]) {\n   \
    \                 return string(word[i])\n                }\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    return \"\"\n              \
    \  }\n                if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i], vowels)\
    \ {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]bool{\n        \"a\": true,\n        \"\
    e\": true,\n        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n\
    \    }\n    var closest_vowel string\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if vowels[string(word[i])] {\n            closest_vowel = string(word[i])\n\
    \            break\n        }\n    }\n    return closest_vowel\n}\n", "    vowels\
    \ := \"aeiouAEIOU\"\n    for i := len(word) - 1; i >= 0; i-- {\n        if i ==\
    \ 0 {\n            return \"\"\n        }\n        if vowels[strings.Index(vowels,\
    \ string(word[i]))] != 0 {\n            if vowels[strings.Index(vowels, string(word[i-1]))]\
    \ == 0 {\n                return string(word[i])\n            }\n        }\n \
    \   }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if contains(vowels,\
    \ string(word[i])) {\n            return string(word[i])\n        }\n    }\n \
    \   return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            if i == len(word) - 1 {\n                return \"\"\n\
    \            }\n            if !is_vowel(word[i + 1], vowels) {\n            \
    \    return string(word[i])\n            }\n        }\n    }\n    return \"\"\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        if contains(vowels, string(word[i])) {\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    vowels := map[string]int{\n        \"a\": 1,\n        \"e\": 1,\n        \"\
    i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n        \"A\": 1,\n        \"E\"\
    : 1,\n        \"I\": 1,\n        \"O\": 1,\n        \"U\": 1,\n    }\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])];\
    \ ok {\n            if i + 1 < len(word) && _, ok := vowels[string(word[i + 1])];\
    \ !ok {\n                return string(word[i])\n            }\n        }\n  \
    \  }\n    return \"\"\n}\n", "    vowels := \"aeiou\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if strings.Contains(vowels, string(word[i])) {\n\
    \            return string(word[i])\n        }\n    }\n    return \"\"\n}\n",
  "    // TODO: Implement me\n    return \"\"\n}\n", "    vowels := []string{\"a\"\
    , \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n   \
    \     if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n    \
    \            if is_vowel(word[j]) {\n                    break\n             \
    \   }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n\
    \    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"}\n    var result string\n    var last_consonant_index int\n\
    \    var last_vowel_index int\n    var last_vowel string\n    var last_consonant\
    \ string\n    var word_length int = len(word)\n    var i int\n    var j int\n\
    \    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n \
    \   var p int\n    var q int\n    var r int\n    var s int\n    var t int\n  \
    \  var u int\n    var v int\n    var w int\n    var x int\n    var y int\n   \
    \ var z int\n    var a int\n    var e int\n    var i_ int\n    var o_ int\n  \
    \  var u_ int\n    var b int\n    var c int\n    var d int\n    var f int\n  \
    \  var g int\n    var h int\n    var j_ int\n    var k_ int\n    var l_ int\n\
    \    var m_ int\n    var n_ int\n    var p_ int\n    var q_ int\n    var r_ int\n\
    \    var s_ int\n    var t_ int\n    var v_ int\n    var w_ int\n    var x_ int\n\
    \    var y_ int\n    var z_ int\n    for i = 0; i < word_length; i++ {\n     \
    \   for j = 0; j < len(vowels); j++ {\n            if string(word[i]) == vowels[j]\
    \ {\n                last_vowel_index = i\n                last_vowel = vowels[j]\n\
    \            }\n        }\n        for k = 0; k < len(consonants); k++ {\n   \
    \         if string(word[i]) == consonants[k] {\n                last_consonant_index",
  "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if contains(vowels, string(word[i])) {\n       \
    \     for j := i - 1; j >= 0; j-- {\n                if contains(vowels, string(word[j]))\
    \ {\n                    break\n                }\n                if j == 0 {\n\
    \                    return string(word[i])\n                }\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                if\
    \ i == len(word) - 1 {\n                    return \"\"\n                }\n \
    \               return string(word[i])\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return v\n            }\n \
    \       }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for\
    \ _, v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := \"\
    aeiou\"\n    var result string\n    for i := len(word) - 1; i >= 0; i-- {\n  \
    \      if strings.Contains(vowels, string(word[i])) {\n            result = string(word[i])\n\
    \            break\n        }\n    }\n    return result\n}\n", "    vowels :=\
    \ map[string]bool{\"a\": true, \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if i == len(word) - 1 {\n                return \"\"\n      \
    \      }\n            if !vowels[string(word[i+1])] {\n                return\
    \ string(word[i])\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i]) {\n    \
    \        for j := i - 1; j >= 0; j-- {\n                if is_vowel(word[j]) {\n\
    \                    return \"\"\n                }\n                if is_consonant(word[j])\
    \ {\n                    return string(word[i])\n                }\n         \
    \   }\n        }\n    }\n    return \"\"\n}\n", "    var vowels = \"aeiou\"\n\
    \    var closest_vowel string\n    var closest_vowel_index int\n    var closest_vowel_distance\
    \ int\n    var word_length int = len(word)\n    var i int\n    var j int\n   \
    \ var vowel_index int\n    var vowel_distance int\n    var vowel_found bool\n\
    \    for i = word_length - 1; i > 0; i-- {\n        if vowels.Index(word[i]) ==\
    \ -1 {\n            for j = i - 1; j >= 0; j-- {\n                if vowels.Index(word[j])\
    \ != -1 {\n                    vowel_index = j\n                    vowel_distance\
    \ = i - j\n                    vowel_found = true\n                    break\n\
    \                }\n            }\n            if vowel_found {\n            \
    \    if closest_vowel_distance == 0 || vowel_distance < closest_vowel_distance\
    \ {\n                    closest_vowel_distance = vowel_distance\n           \
    \         closest_vowel_index = vowel_index\n                }\n            }\n\
    \        }\n    }\n    if closest_vowel_index != 0 {\n        closest_vowel =\
    \ string(word[closest_vowel_index])\n    }\n    return closest_vowel\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n   \
    \ for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n\
    \            if word[i] == v[0] {\n                return string(word[i])\n  \
    \          }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    var vowels =\
    \ map[string]bool{\n        \"a\": true,\n        \"e\": true,\n        \"i\"\
    : true,\n        \"o\": true,\n        \"u\": true,\n    }\n    var result string\n\
    \    var last_vowel_index int\n    for i, c := range word {\n        if vowels[string(c)]\
    \ {\n            last_vowel_index = i\n        }\n    }\n    for i := last_vowel_index;\
    \ i >= 0; i-- {\n        if vowels[string(word[i])] {\n            result = string(word[i])\n\
    \            break\n        }\n    }\n    return result\n}\n", "    if len(word)\
    \ < 3 {\n        return \"\"\n    }\n    vowels := []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v :=\
    \ range vowels {\n            if word[i] == v[0] {\n                if i == len(word)\
    \ - 1 {\n                    return \"\"\n                }\n                if\
    \ i == 0 {\n                    return \"\"\n                }\n             \
    \   if word[i-1] == ' ' {\n                    return \"\"\n                }\n\
    \                if word[i+1] == ' ' {\n                    return \"\"\n    \
    \            }\n                return string(word[i])\n            }\n      \
    \  }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\"a\": true,\
    \ \"e\": true, \"i\": true, \"o\": true, \"u\": true}\n    var prev_char string\n\
    \    for i := len(word) - 1; i >= 0; i-- {\n        if vowels[string(word[i])]\
    \ {\n            if prev_char != \"\" && !vowels[prev_char] {\n              \
    \  return string(word[i])\n            }\n        }\n        prev_char = string(word[i])\n\
    \    }\n    return \"\"\n}\n", "    vowels := \"aeiouAEIOU\"\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        if vowels[i] == word[i] {\n            return string(word[i])\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    break\n                }\n \
    \               if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n\
    \    var distance int\n    for i := len(word) - 1; i >= 0; i-- {\n        if stringInSlice(string(word[i]),\
    \ vowels) {\n            for j := i - 1; j >= 0; j-- {\n                if stringInSlice(string(word[j]),\
    \ vowels) {\n                    break\n                }\n                if\
    \ j == 0 {\n                    if distance == 0 || distance > i {\n         \
    \               distance = i\n                        result = string(word[i])\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"\
    u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels\
    \ {\n            if word[i] == v[0] {\n                return v\n            }\n\
    \        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\"\
    , \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if\
    \ is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n           \
    \     if is_vowel(word[j]) {\n                    return \"\"\n              \
    \  }\n                if is_consonant(word[j]) {\n                    return string(word[i])\n\
    \                }\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    word_len := len(word)\n\
    \    for i := word_len - 1; i > 0; i-- {\n        if !is_vowel(word[i]) && is_vowel(word[i-1])\
    \ {\n            return string(word[i-1])\n        }\n    }\n    return \"\"\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n         \
    \   if word[i] == v[0] {\n                return string(word[i])\n           \
    \ }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"\
    e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ for _, v := range vowels {\n            if word[i] == v[0] {\n             \
    \   return v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_vowel(word[i], vowels) {\n            if i == len(word)\
    \ - 1 {\n                return \"\"\n            }\n            if is_vowel(word[i\
    \ + 1], vowels) {\n                continue\n            }\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    var vowels =\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    var\
    \ found bool\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v := range\
    \ vowels {\n            if word[i] == v[0] {\n                result = string(word[i])\n\
    \                found = true\n                break\n            }\n        }\n\
    \        if found {\n            break\n        }\n    }\n    return result\n\
    }\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i :=\
    \ len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n         \
    \   if word[i] == v[0] {\n                return v\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        if is_vowel(word[i],\
    \ vowels) {\n            if i == len(word) - 1 {\n                return \"\"\n\
    \            }\n            if !is_vowel(word[i + 1], vowels) {\n            \
    \    return string(word[i])\n            }\n        }\n    }\n    return \"\"\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
