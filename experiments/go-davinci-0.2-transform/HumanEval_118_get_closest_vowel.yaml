name: HumanEval_118_get_closest_vowel
language: go_test.go
prompt: "package get_closest_vowel_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunc get_closest_vowel(word\
  \ string) string {\n"
tests: "func TestGet_Closest_Vowel(t *testing.T) {\n  candidate := get_closest_vowel\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"yogurt\"), expected: \"u\" },\n\
  \     { actual: candidate(\"full\"), expected: \"u\" },\n     { actual: candidate(\"\
  easy\"), expected: \"\" },\n     { actual: candidate(\"eAsy\"), expected: \"\" },\n\
  \     { actual: candidate(\"ali\"), expected: \"\" },\n     { actual: candidate(\"\
  bad\"), expected: \"a\" },\n     { actual: candidate(\"most\"), expected: \"o\"\
  \ },\n     { actual: candidate(\"ab\"), expected: \"\" },\n     { actual: candidate(\"\
  ba\"), expected: \"\" },\n     { actual: candidate(\"quick\"), expected: \"\" },\n\
  \     { actual: candidate(\"anime\"), expected: \"i\" },\n     { actual: candidate(\"\
  Asia\"), expected: \"\" },\n     { actual: candidate(\"Above\"), expected: \"o\"\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n    \
    \        if word[i] == v[0] {\n                return v\n            }\n     \
    \   }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"\
    i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _,\
    \ v := range vowels {\n            if word[i] == v[0] {\n                return\
    \ v\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var consonants\
    \ = []string{\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"\
    m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"\
    z\"}\n    var result string\n    var last_consonant_index int\n    var last_vowel_index\
    \ int\n    var last_vowel string\n    var last_consonant string\n    var last_vowel_distance\
    \ int\n    var last_consonant_distance int\n    for i, letter := range word {\n\
    \        for _, vowel := range vowels {\n            if string(letter) == vowel\
    \ {\n                last_vowel_index = i\n                last_vowel = string(letter)\n\
    \            }\n        }\n        for _, consonant := range consonants {\n  \
    \          if string(letter) == consonant {\n                last_consonant_index\
    \ = i\n                last_consonant = string(letter)\n            }\n      \
    \  }\n    }\n    last_vowel_distance = len(word) - last_vowel_index\n    last_consonant_distance\
    \ = len(word) - last_consonant_index\n    if last_vowel_distance > last_consonant_distance\
    \ {\n        result = last_vowel\n    }\n    return result\n}\n", "    vowels\
    \ := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1;\
    \ i >= 0; i-- {\n        if is_vowel(word[i]) {\n            for j := i - 1; j\
    \ >= 0; j-- {\n                if is_vowel(word[j]) {\n                    break\n\
    \                }\n                if is_consonant(word[j]) {\n             \
    \       return string(word[i])\n                }\n            }\n        }\n\
    \    }\n    return \"\"\n}\n", "    var vowels = []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    var consonants = []string{\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n    var result = \"\"\n    var last_consonant\
    \ = \"\"\n    var last_vowel = \"\"\n    var last_vowel_index = 0\n    var last_consonant_index\
    \ = 0\n    var last_consonant_found = false\n    var last_vowel_found = false\n\
    \    for i, c := range word {\n        if last_consonant_found && last_vowel_found\
    \ {\n            break\n        }\n        if last_consonant_found && !last_vowel_found\
    \ {\n            for _, v := range vowels {\n                if string(c) == v\
    \ {\n                    last_vowel = string(c)\n                    last_vowel_index\
    \ = i\n                    last_vowel_found = true\n                    break\n\
    \                }\n            }\n        }\n        if !last_consonant_found\
    \ {\n            for _, v := range consonants {\n                if string(c)\
    \ == v {\n                    last_consonant = string(c)\n                   \
    \ last_consonant_index = i\n                    last_consonant_found = true\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    if last_consonant_found && last_vowel_found {\n        result = last_vowel\n\
    \    }\n    return result\n}\n", "    vowels := []string{\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v :=\
    \ range vowels {\n            if word[i] == v[0] {\n                return v\n\
    \            }\n        }\n    }\n    return \"\"\n}\n", "    vowels := map[string]bool{\n\
    \        \"a\": true,\n        \"e\": true,\n        \"i\": true,\n        \"\
    o\": true,\n        \"u\": true,\n    }\n    var closest_vowel string\n    var\
    \ closest_vowel_index int\n    for i := len(word) - 1; i >= 0; i-- {\n       \
    \ if vowels[string(word[i])] {\n            closest_vowel = string(word[i])\n\
    \            closest_vowel_index = i\n            break\n        }\n    }\n  \
    \  if closest_vowel_index == 0 {\n        return \"\"\n    }\n    for i := closest_vowel_index\
    \ - 1; i >= 0; i-- {\n        if !vowels[string(word[i])] {\n            return\
    \ closest_vowel\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := map[string]int{\n        \"a\": 1,\n        \"e\"\
    : 1,\n        \"i\": 1,\n        \"o\": 1,\n        \"u\": 1,\n        \"A\":\
    \ 1,\n        \"E\": 1,\n        \"I\": 1,\n        \"O\": 1,\n        \"U\":\
    \ 1,\n    }\n    var prev_consonant bool\n    var closest_vowel string\n    for\
    \ i := len(word) - 1; i >= 0; i-- {\n        if _, ok := vowels[string(word[i])];\
    \ ok {\n            if prev_consonant {\n                closest_vowel = string(word[i])\n\
    \                break\n            }\n        } else {\n            prev_consonant\
    \ = true\n        }\n    }\n    return closest_vowel\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    break\n          \
    \      }\n                if is_consonant(word[j]) {\n                    return\
    \ string(word[i])\n                }\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        for _, v := range vowels {\n            if word[i] == v[0] {\n      \
    \          return v\n            }\n        }\n    }\n    return \"\"\n}\n", " \
    \   vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word)\
    \ - 1; i >= 0; i-- {\n        for _, v := range vowels {\n            if word[i]\
    \ == v[0] {\n                return v\n            }\n        }\n    }\n    return\
    \ \"\"\n}\n", "    vowels := \"aeiou\"\n    for i := len(word) - 1; i >= 0; i--\
    \ {\n        if strings.Contains(vowels, string(word[i])) {\n            return\
    \ string(word[i])\n        }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"\
    a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n\
    \        if is_vowel(word[i]) {\n            for j := i - 1; j >= 0; j-- {\n \
    \               if is_vowel(word[j]) {\n                    continue\n       \
    \         } else {\n                    return string(word[i])\n             \
    \   }\n            }\n        }\n    }\n    return \"\"\n}\n", "    vowels :=\
    \ []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i := len(word) - 1; i >=\
    \ 0; i-- {\n        for _, v := range vowels {\n            if word[i] == v[0]\
    \ {\n                return v\n            }\n        }\n    }\n    return \"\"\
    \n}\n", "    vowels := []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i\
    \ := len(word) - 1; i >= 0; i-- {\n        for _, v := range vowels {\n      \
    \      if word[i] == v[0] {\n                return v\n            }\n       \
    \ }\n    }\n    return \"\"\n}\n", "    vowels := []string{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"}\n    for i := len(word) - 1; i >= 0; i-- {\n        for _, v :=\
    \ range vowels {\n            if word[i] == v[0] {\n                return v\n\
    \            }\n        }\n    }\n    return \"\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
