language: go_test.go
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpevv08ba2_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpevv08ba2_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area < 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmptt4_j4nm_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmptt4_j4nm_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmptt4_j4nm_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmptt4_j4nm_test.go:48:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmptt4_j4nm_test.go:48: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmptt4_j4nm_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: implement function\n    return 0.0\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmppwde2hwj_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmppwde2hwj_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmppwde2hwj_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmppwde2hwj_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmppwde2hwj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmppwde2hwj_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmppwde2hwj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmppwde2hwj_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmppwde2hwj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n    }\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    s := float64(a + b + c) / 2\n    return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpy8bqe3pg_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpy8bqe3pg_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpy8bqe3pg_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpy8bqe3pg_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpy8bqe3pg_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return s * (s - float64(a)) * (s - float64(b))\
    \ * (s - float64(c))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpw72jzlvk_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpw72jzlvk_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpw72jzlvk_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpw72jzlvk_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpw72jzlvk_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpr5vj5od3_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpr5vj5od3_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpr5vj5od3_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpr5vj5od3_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpr5vj5od3_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s -\
    \ float64(b)) * (s - float64(c)))\n    } else {\n        return -1\n    }\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp8wjc7yee_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp8wjc7yee_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp8wjc7yee_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp8wjc7yee_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp8wjc7yee_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        s := float64(a + b + c) / 2\n        area = s * (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n        area = area * 0.5\n\
    \    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp5_wezbzu_test.go:51: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp5_wezbzu_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp5_wezbzu_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp5_wezbzu_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp5_wezbzu_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        p :=\
    \ float64(a+b+c) / 2\n        return p * (p-float64(a)) * (p-float64(b)) * (p-float64(c))\n\
    \    } else {\n        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpa7mtedpv_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpa7mtedpv_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpa7mtedpv_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpa7mtedpv_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpa7mtedpv_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    return float64(a + b + c) / 2\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpuq0a6jaw_test.go:46: expected '%!s(float64=8.18)', got '%!s(float64=8.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpuq0a6jaw_test.go:46:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=3)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpuq0a6jaw_test.go:46: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=11)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n   \
    \     tmpuq0a6jaw_test.go:46: expected '%!s(float64=0.43)', got '%!s(float64=1.5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area > 0 {\n        return float64(area)\n    } else {\n        return\
    \ -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfh9urna5_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfh9urna5_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfh9urna5_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfh9urna5_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfh9urna5_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area <= 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpptga9oxy_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpptga9oxy_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpptga9oxy_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpptga9oxy_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpptga9oxy_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: Write your code here\n    return 0.0\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmph5m9hmzo_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmph5m9hmzo_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmph5m9hmzo_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmph5m9hmzo_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmph5m9hmzo_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmph5m9hmzo_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmph5m9hmzo_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmph5m9hmzo_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmph5m9hmzo_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    // Heron's formula\n        s := float64(a + b + c) / 2\n        return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpble31h1g_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpble31h1g_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s -\
    \ float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpe8is7rz0_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpe8is7rz0_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area > 0 {\n        return float64(area)\n    } else {\n        return\
    \ -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfh9urna5_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfh9urna5_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfh9urna5_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfh9urna5_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfh9urna5_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    // Heron's formula\n        s := float64(a + b + c) / 2\n        return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpble31h1g_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpble31h1g_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area > 0 {\n        return float64(area)\n    } else {\n        return\
    \ -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfh9urna5_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfh9urna5_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfh9urna5_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfh9urna5_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfh9urna5_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    s := float64(a + b + c) / 2\n    return s * (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfusr_9w2_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfusr_9w2_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n    }\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    p := float64(a + b + c) / 2\n    return p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpz_whac6f_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpz_whac6f_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpz_whac6f_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpz_whac6f_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpz_whac6f_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    p := float64(a + b + c) / 2\n    return (p * (p\
    \ - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpt6c0xivt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpt6c0xivt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpt6c0xivt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpt6c0xivt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpt6c0xivt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: Implement me!\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpkc_ql5xa_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpkc_ql5xa_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpkc_ql5xa_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpkc_ql5xa_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpkc_ql5xa_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: implement\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpmnfw4v79_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpmnfw4v79_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpmnfw4v79_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpmnfw4v79_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpmnfw4v79_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s -\
    \ float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpe8is7rz0_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpe8is7rz0_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        s := float64(a + b + c) / 2\n        area = s * (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n        area = area * 0.5\n\
    \    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp5_wezbzu_test.go:51: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp5_wezbzu_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp5_wezbzu_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp5_wezbzu_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp5_wezbzu_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpevv08ba2_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpevv08ba2_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c))\n        area = area / 2\n\
    \    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp96k41i6e_test.go:51: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp96k41i6e_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp96k41i6e_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp96k41i6e_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp96k41i6e_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2.0\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area <= 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsjrnm3m9_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpsjrnm3m9_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpsjrnm3m9_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpsjrnm3m9_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpsjrnm3m9_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c))\n        area = area * 0.5\n\
    \    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpy64jyvm7_test.go:51: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpy64jyvm7_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpy64jyvm7_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpy64jyvm7_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpy64jyvm7_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: implement me\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp1g8enrv5_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp1g8enrv5_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp1g8enrv5_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp1g8enrv5_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp1g8enrv5_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n    }\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    } else {\n        return -1\n  \
    \  }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpjo2q6x1x_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpjo2q6x1x_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpjo2q6x1x_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpjo2q6x1x_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpjo2q6x1x_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if (a + b > c) && (a + c\
    \ > b) && (b + c > a) {\n        p := float64(a + b + c) / 2\n        area = p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c))\n        area = area\
    \ * 0.5\n    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdxvzd9_s_test.go:51: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdxvzd9_s_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdxvzd9_s_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdxvzd9_s_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdxvzd9_s_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Write your code here\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp5qq4g6sv_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp5qq4g6sv_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp5qq4g6sv_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp5qq4g6sv_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp5qq4g6sv_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpr5vj5od3_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpr5vj5od3_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpr5vj5od3_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpr5vj5od3_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpr5vj5od3_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpevv08ba2_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpevv08ba2_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    s := float64(a + b + c) / 2\n    return s * (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfusr_9w2_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfusr_9w2_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area <= 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpptga9oxy_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpptga9oxy_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpptga9oxy_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpptga9oxy_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpptga9oxy_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        p := float64(a + b + c) / 2\n        area = p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c))\n        area = area * 0.5\n\
    \    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpy64jyvm7_test.go:51: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpy64jyvm7_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpy64jyvm7_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpy64jyvm7_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpy64jyvm7_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s -\
    \ float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpe8is7rz0_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpe8is7rz0_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    p := float64(a + b + c) / 2\n    return p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpz_whac6f_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpz_whac6f_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpz_whac6f_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpz_whac6f_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpz_whac6f_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    p := float64(a + b + c) / 2\n    return (p * (p\
    \ - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpt6c0xivt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpt6c0xivt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpt6c0xivt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpt6c0xivt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpt6c0xivt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpp3zyovd4_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpp3zyovd4_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n    }\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n    }\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: Implement me\n    return 0.0\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var area float64\n    if a + b > c && a + c > b\
    \ && b + c > a {\n        s := float64(a + b + c) / 2\n        area = s * (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n        area = area * 0.5\n\
    \    } else {\n        area = -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp5_wezbzu_test.go:51: expected '%!s(float64=6)', got '%!s(float64=18)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp5_wezbzu_test.go:51:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=33.46875)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp5_wezbzu_test.go:51: expected '%!s(float64=1.73)', got '%!s(float64=1.5)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp5_wezbzu_test.go:51:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=132)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp5_wezbzu_test.go:51: expected '%!s(float64=0.43)', got '%!s(float64=0.09375)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area > 0 {\n        return area\n    } else {\n        return -1\n   \
    \ }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmps6xs833e_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmps6xs833e_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmps6xs833e_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmps6xs833e_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmps6xs833e_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2.0\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area <= 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpsjrnm3m9_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpsjrnm3m9_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpsjrnm3m9_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpsjrnm3m9_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpsjrnm3m9_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    // Heron's formula\n        s := float64(a + b + c) / 2\n        return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpble31h1g_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpble31h1g_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Write your code here\n    return 0.0\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    s := float64(a + b + c) / 2\n    return s * (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfusr_9w2_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfusr_9w2_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: Implement me\n    return 0.0\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: Implement me\n    return 0.0\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpqcxhedc9_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpqcxhedc9_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if (a + b > c) && (a + c > b) && (b + c > a) {\n\
    \        p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpz9zywwpg_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpz9zywwpg_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpz9zywwpg_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpz9zywwpg_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpz9zywwpg_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    } else {\n        return -1\n  \
    \  }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpjo2q6x1x_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpjo2q6x1x_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpjo2q6x1x_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpjo2q6x1x_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpjo2q6x1x_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // Write your code here\n    return 0.0\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmp2ntg_isj_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmp2ntg_isj_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        area := p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c))\n        return float64(area)\n    } else {\n\
    \        return -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate\
    \ := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 4, 5), expected:\
    \ 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n     { actual:\
    \ candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected:\
    \ 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual:\
    \ candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3),\
    \ expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n    \
    \ { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpyqloons5_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpyqloons5_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpyqloons5_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpyqloons5_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpyqloons5_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    // Heron's formula\n        s := float64(a + b + c) / 2\n        return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n    }\n    return\
    \ -1\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpble31h1g_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpble31h1g_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpble31h1g_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n  \
    \  }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpknzphleu_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpknzphleu_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpevv08ba2_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpevv08ba2_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return s * (s - float64(a)) * (s - float64(b))\
    \ * (s - float64(c))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpw72jzlvk_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpw72jzlvk_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpw72jzlvk_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpw72jzlvk_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpw72jzlvk_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    p := float64(a + b + c) / 2\n    return float64(p\
    \ * (p - float64(a)) * (p - float64(b)) * (p - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpr5vj5od3_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpr5vj5od3_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpr5vj5od3_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpr5vj5od3_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpr5vj5od3_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    s := float64(a + b + c) / 2\n    return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpy8bqe3pg_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpy8bqe3pg_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpy8bqe3pg_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpy8bqe3pg_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpy8bqe3pg_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area < 0 {\n        return -1\n    } else {\n        return area\n   \
    \ }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpnnjck635_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpnnjck635_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpnnjck635_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__4 (0.00s)\n        tmpnnjck635_test.go:49:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__5\
    \ (0.00s)\n        tmpnnjck635_test.go:49: expected '%!s(float64=16.25)', got\
    \ '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n  \
    \      tmpnnjck635_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s -\
    \ float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpe8is7rz0_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpe8is7rz0_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area > 0 {\n        return float64(area)\n    }\n    return -1\n}\n\n\
    func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpdp7ll3ge_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpdp7ll3ge_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpdp7ll3ge_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpdp7ll3ge_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpdp7ll3ge_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n    }\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    s := float64(a + b + c) / 2\n    return s * (s -\
    \ float64(a)) * (s - float64(b)) * (s - float64(c))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpfusr_9w2_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpfusr_9w2_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpfusr_9w2_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area > 0 {\n        return area\n    } else {\n        return -1\n   \
    \ }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp7n25w9te_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp7n25w9te_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp7n25w9te_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp7n25w9te_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp7n25w9te_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = float64(a + b + c) / 2\n    var\
    \ area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area <= 0 {\n        return -1\n    }\n    return area\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpptga9oxy_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpptga9oxy_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpptga9oxy_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpptga9oxy_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpptga9oxy_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a+b > c && a+c > b && b+c > a {\n        p :=\
    \ float64(a+b+c) / 2\n        return float64(p * (p-float64(a)) * (p-float64(b))\
    \ * (p-float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpc57l5jsv_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpc57l5jsv_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpc57l5jsv_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpc57l5jsv_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpc57l5jsv_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s -\
    \ float64(b)) * (s - float64(c)))\n    } else {\n        return -1\n    }\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp8wjc7yee_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp8wjc7yee_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp8wjc7yee_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp8wjc7yee_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp8wjc7yee_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: implement this function\n    return -1\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6d8uxa1n_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp6d8uxa1n_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp6d8uxa1n_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6d8uxa1n_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6d8uxa1n_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    p := float64(a + b + c) / 2\n    return p * (p -\
    \ float64(a)) * (p - float64(b)) * (p - float64(c))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpz_whac6f_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpz_whac6f_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpz_whac6f_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpz_whac6f_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpz_whac6f_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // your code here\n    return 0.0\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=6)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__1 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(int=-1)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__2\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(float64=8.18)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__3 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=1.73)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__4\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__6\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__7 (0.00s)\n        tmpzoshqy12_test.go:44:\
    \ expected '%!s(float64=0.43)', got '%!s(float64=0)'\n    --- FAIL: TestTriangle_Area/test_num__8\
    \ (0.00s)\n        tmpzoshqy12_test.go:44: expected '%!s(int=-1)', got '%!s(float64=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n  \
    \  }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpknzphleu_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpknzphleu_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: implement this function\n    return -1\n\
    }\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp6d8uxa1n_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp6d8uxa1n_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp6d8uxa1n_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp6d8uxa1n_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp6d8uxa1n_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    var s float64 = (float64(a) + float64(b) + float64(c))\
    \ / 2\n    var area float64 = s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))\n\
    \    if area > 0 {\n        return float64(area)\n    } else {\n        return\
    \ -1\n    }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpniaoa804_test.go:49: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpniaoa804_test.go:49:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpniaoa804_test.go:49: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpniaoa804_test.go:49:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpniaoa804_test.go:49: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n  \
    \  }\n}\n\nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n  \
    \   { actual: candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4,\
    \ 8, 5), expected: 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73\
    \ },\n     { actual: candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10,\
    \ 5, 7), expected: 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n\
    \     { actual: candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2,\
    \ 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpknzphleu_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpknzphleu_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpknzphleu_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    } else {\n        return -1\n    }\n}\n\
    \nfunc TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp7awpyiya_test.go:48:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp7awpyiya_test.go:48: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b <= c || a + c <= b || b + c <= a {\n \
    \       return -1\n    }\n    s := float64(a + b + c) / 2\n    return float64(s\
    \ * (s - float64(a)) * (s - float64(b)) * (s - float64(c)))\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpy8bqe3pg_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpy8bqe3pg_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpy8bqe3pg_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpy8bqe3pg_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpy8bqe3pg_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    // TODO: implement me\n    return -1\n}\n\nfunc\
    \ TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(3, 4, 5), expected: 6.0 },\n     { actual:\
    \ candidate(1, 2, 10), expected: -1 },\n     { actual: candidate(4, 8, 5), expected:\
    \ 8.18 },\n     { actual: candidate(2, 2, 2), expected: 1.73 },\n     { actual:\
    \ candidate(1, 2, 3), expected: -1 },\n     { actual: candidate(10, 5, 7), expected:\
    \ 16.25 },\n     { actual: candidate(2, 6, 3), expected: -1 },\n     { actual:\
    \ candidate(1, 1, 1), expected: 0.43 },\n     { actual: candidate(2, 2, 10), expected:\
    \ -1 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmp1g8enrv5_test.go:44: expected '%!s(float64=6)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmp1g8enrv5_test.go:44:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmp1g8enrv5_test.go:44: expected '%!s(float64=1.73)', got '%!s(float64=-1)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmp1g8enrv5_test.go:44:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=-1)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmp1g8enrv5_test.go:44: expected '%!s(float64=0.43)', got '%!s(float64=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075132
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return p * (p - float64(a)) * (p - float64(b))\
    \ * (p - float64(c))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t *testing.T)\
    \ {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected: -1 },\n\
    \     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual: candidate(2,\
    \ 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected: -1 },\n\
    \     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual: candidate(2,\
    \ 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected: 0.43 },\n\
    \     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpevv08ba2_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpevv08ba2_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpevv08ba2_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return float64(s * (s - float64(a))\
    \ * (s - float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpth41y5kt_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpth41y5kt_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return (p * (p - float64(a)) * (p -\
    \ float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpu3l5leks_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpu3l5leks_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    p := float64(a + b + c) / 2\n        return float64(p * (p - float64(a))\
    \ * (p - float64(b)) * (p - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpxzk3imdx_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpxzk3imdx_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075048
- exit_code: 1
  program: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
    )\n\n// Given the lengths of the three sides of a triangle. Return the area of\n\
    // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
    \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum\
    \ of any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
    \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunc triangle_area(a int,\
    \ b int, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n    \
    \    s := float64(a + b + c) / 2\n        return (s * (s - float64(a)) * (s -\
    \ float64(b)) * (s - float64(c)))\n    }\n    return -1\n}\n\nfunc TestTriangle_Area(t\
    \ *testing.T) {\n  candidate := triangle_area\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 4, 5), expected: 6.0 },\n     { actual: candidate(1, 2, 10), expected:\
    \ -1 },\n     { actual: candidate(4, 8, 5), expected: 8.18 },\n     { actual:\
    \ candidate(2, 2, 2), expected: 1.73 },\n     { actual: candidate(1, 2, 3), expected:\
    \ -1 },\n     { actual: candidate(10, 5, 7), expected: 16.25 },\n     { actual:\
    \ candidate(2, 6, 3), expected: -1 },\n     { actual: candidate(1, 1, 1), expected:\
    \ 0.43 },\n     { actual: candidate(2, 2, 10), expected: -1 },\n   }\n\n\tfor\
    \ i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestTriangle_Area (0.00s)\n    --- FAIL: TestTriangle_Area/test_num__0\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=6)', got '%!s(float64=36)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__2 (0.00s)\n        tmpe8is7rz0_test.go:47:\
    \ expected '%!s(float64=8.18)', got '%!s(float64=66.9375)'\n    --- FAIL: TestTriangle_Area/test_num__3\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=1.73)', got '%!s(float64=3)'\n\
    \    --- FAIL: TestTriangle_Area/test_num__5 (0.00s)\n        tmpe8is7rz0_test.go:47:\
    \ expected '%!s(float64=16.25)', got '%!s(float64=264)'\n    --- FAIL: TestTriangle_Area/test_num__7\
    \ (0.00s)\n        tmpe8is7rz0_test.go:47: expected '%!s(float64=0.43)', got '%!s(float64=0.1875)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075050
