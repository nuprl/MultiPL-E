name: HumanEval_24_largest_divisor
language: go_test.go
prompt: "package largest_divisor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n// >>> largest_divisor(15)\n// 5\nfunc largest_divisor(n int) int {\n"
tests: "func TestLargest_Divisor(t *testing.T) {\n  candidate := largest_divisor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(3), expected: 1 },\n     { actual:\
  \ candidate(7), expected: 1 },\n     { actual: candidate(10), expected: 5 },\n \
  \    { actual: candidate(100), expected: 50 },\n     { actual: candidate(49), expected:\
  \ 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n       \
    \     return i\n        }\n    }\n    return 1\n}\n", "    for i := n - 1; i >\
    \ 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n\
    \    return 0\n}\n", "    for i := n - 1; i > 0; i-- {\n        if n % i == 0\
    \ {\n            return i\n        }\n    }\n    return 0\n}\n", "    for i :=\
    \ n - 1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n       \
    \ }\n    }\n    return 0\n}\n", "    for i := n - 1; i > 0; i-- {\n        if\
    \ n % i == 0 {\n            return i\n        }\n    }\n    return 0\n}\n", " \
    \   for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n            return\
    \ i\n        }\n    }\n    return 0\n}\n", "    for i := n - 1; i > 0; i-- {\n\
    \        if n % i == 0 {\n            return i\n        }\n    }\n    return 0\n\
    }\n", "    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 0\n}\n", "    for i := n - 1; i > 0;\
    \ i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n   \
    \ return 0\n}\n", "    for i := n-1; i > 0; i-- {\n        if n % i == 0 {\n \
    \           return i\n        }\n    }\n    return 0\n}\n", "    for i := n -\
    \ 1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n\
    \    }\n    return 0\n}\n", "    for i := n - 1; i > 0; i-- {\n        if n %\
    \ i == 0 {\n            return i\n        }\n    }\n    return 0\n}\n", "    var\
    \ i int\n    for i = n - 1; i > 0; i-- {\n        if n % i == 0 {\n          \
    \  return i\n        }\n    }\n    return 0\n}\n", "    for i := n - 1; i > 0;\
    \ i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n   \
    \ return 0\n}\n", "    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 0\n}\n", "    for i := n -\
    \ 1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n        }\n\
    \    }\n    return 0\n}\n", "    for i := n - 1; i > 0; i-- {\n        if n %\
    \ i == 0 {\n            return i\n        }\n    }\n    return 0\n}\n", "    for\
    \ i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n            return i\n  \
    \      }\n    }\n    return 0\n}\n", "    var i int\n    for i = n - 1; i > 0;\
    \ i-- {\n        if n % i == 0 {\n            return i\n        }\n    }\n   \
    \ return 0\n}\n", "    for i := n - 1; i > 0; i-- {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
