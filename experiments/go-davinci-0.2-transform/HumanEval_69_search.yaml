name: HumanEval_69_search
language: go_test.go
prompt: "package search_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// You\
  \ are given a non-empty list of positive integers. Return the greatest integer that\
  \ is greater than \n// zero, and has a frequency greater than or equal to the value\
  \ of the integer itself. \n// The frequency of an integer is the number of times\
  \ it appears in the list.\n// If no such a value exist, return -1.\n// Examples:\n\
  // >>> search([]int{4, 1, 2, 2, 3, 1})\n// 2\n// >>> search([]int{1, 2, 2, 3, 3,\
  \ 3, 4, 4, 4})\n// 3\n// >>> search([]int{5, 5, 4, 4, 4})\n// -1\nfunc search(lst\
  \ []int) int {\n"
tests: "func TestSearch(t *testing.T) {\n  candidate := search\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate([]int{5, 5, 5, 5, 1}), expected: 1 },\n     { actual:\
  \ candidate([]int{4, 1, 4, 1, 4, 4}), expected: 4 },\n     { actual: candidate([]int{3,\
  \ 3}), expected: -1 },\n     { actual: candidate([]int{8, 8, 8, 8, 8, 8, 8, 8}),\
  \ expected: 8 },\n     { actual: candidate([]int{2, 3, 3, 2, 2}), expected: 2 },\n\
  \     { actual: candidate([]int{2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1}), expected: 1 },\n     { actual: candidate([]int{3, 2, 8, 2}),\
  \ expected: 2 },\n     { actual: candidate([]int{6, 7, 1, 8, 8, 10, 5, 8, 5, 3,\
  \ 10}), expected: 1 },\n     { actual: candidate([]int{8, 8, 3, 6, 5, 6, 4}), expected:\
  \ -1 },\n     { actual: candidate([]int{6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10,\
  \ 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9}), expected: 1 },\n     { actual: candidate([]int{1,\
  \ 9, 10, 1, 3}), expected: 1 },\n     { actual: candidate([]int{6, 9, 7, 5, 8, 7,\
  \ 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}), expected: 5 },\n \
  \    { actual: candidate([]int{1}), expected: 1 },\n     { actual: candidate([]int{8,\
  \ 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}), expected:\
  \ 4 },\n     { actual: candidate([]int{2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6,\
  \ 3, 8, 6, 4, 10}), expected: 2 },\n     { actual: candidate([]int{1, 6, 10, 1,\
  \ 6, 9, 10, 8, 6, 8, 7, 3}), expected: 1 },\n     { actual: candidate([]int{9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4}), expected: 4 },\n     { actual: candidate([]int{2, 6, 4, 2, 8, 7, 5,\
  \ 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}), expected: 4 },\n     { actual:\
  \ candidate([]int{9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1}), expected:\
  \ 2 },\n     { actual: candidate([]int{5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10,\
  \ 6, 8, 4, 10, 7, 7, 10, 8}), expected: -1 },\n     { actual: candidate([]int{10}),\
  \ expected: -1 },\n     { actual: candidate([]int{9, 7, 7, 2, 4, 7, 2, 10, 9, 7,\
  \ 5, 7, 2}), expected: 2 },\n     { actual: candidate([]int{5, 4, 10, 2, 1, 1, 10,\
  \ 3, 6, 1, 8}), expected: 1 },\n     { actual: candidate([]int{7, 9, 9, 9, 3, 4,\
  \ 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}), expected: 1 },\n     { actual:\
  \ candidate([]int{3, 10, 10, 9, 2}), expected: -1 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var max int\n    var maxFreq int\n    var freq int\n    var freqMap\
    \ = make(map[int]int)\n    for _, v := range lst {\n        freqMap[v]++\n   \
    \ }\n    for k, v := range freqMap {\n        if k > max && v >= k {\n       \
    \     max = k\n            maxFreq = v\n        }\n        if v > freq {\n   \
    \         freq = v\n        }\n    }\n    if maxFreq == freq {\n        return\
    \ -1\n    }\n    return max\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   var max int\n    for k, v := range m {\n        if k > v {\n            continue\n\
    \        }\n        if k > max {\n            max = k\n        }\n    }\n    if\
    \ max == 0 {\n        return -1\n    }\n    return max\n}\n", "    var max int\n\
    \    var max_count int\n    var count int\n    for _, v := range lst {\n     \
    \   if v > max {\n            max = v\n        }\n    }\n    for i := 1; i <=\
    \ max; i++ {\n        count = 0\n        for _, v := range lst {\n           \
    \ if v == i {\n                count++\n            }\n        }\n        if count\
    \ >= i && count > max_count {\n            max_count = count\n        }\n    }\n\
    \    if max_count == 0 {\n        return -1\n    }\n    return max_count\n}\n",
  "    var max int\n    m := make(map[int]int)\n    for _, v := range lst {\n    \
    \    m[v]++\n        if v > max {\n            max = v\n        }\n    }\n   \
    \ for i := max; i > 0; i-- {\n        if m[i] >= i {\n            return i\n \
    \       }\n    }\n    return -1\n}\n", "    var m = make(map[int]int)\n    for\
    \ _, v := range lst {\n        m[v]++\n    }\n    var max = -1\n    for k, v :=\
    \ range m {\n        if k <= v && k > max {\n            max = k\n        }\n\
    \    }\n    return max\n}\n", "    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        m[v]++\n    }\n    for k, v := range m {\n        if k <= v {\n\
    \            return k\n        }\n    }\n    return -1\n}\n", "    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n  \
    \      if m[i] >= i {\n            return i\n        }\n    }\n    return -1\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if v > 0 && m[v] >= v {\n            return v\n        }\n    }\n\
    \    return -1\n}\n", "    // TODO: implement\n    return -1\n}\n", "    // TODO:\
    \ implement this function\n    return -1\n}\n", "    // TODO: implement\n    return\
    \ -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   var max int\n    for k, v := range m {\n        if k > v {\n            continue\n\
    \        }\n        if k > max {\n            max = k\n        }\n    }\n    if\
    \ max == 0 {\n        return -1\n    }\n    return max\n}\n", "    // Write your\
    \ code here\n    return -1\n}\n", "    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v]++\n    }\n    for k, v := range m {\n        if k\
    \ <= v {\n            return k\n        }\n    }\n    return -1\n}\n", "    //\
    \ your code here\n    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst {\n       \
    \ m[v]++\n    }\n    max := -1\n    for k, v := range m {\n        if k <= v &&\
    \ k > max {\n            max = k\n        }\n    }\n    return max\n}\n", "  \
    \  // Write your code here\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   max := 0\n    for k, v := range m {\n        if k > v {\n            continue\n\
    \        }\n        if k > max {\n            max = k\n        }\n    }\n    if\
    \ max == 0 {\n        return -1\n    }\n    return max\n}\n", "    freq := make(map[int]int)\n\
    \    for _, i := range lst {\n        freq[i]++\n    }\n    for i := len(lst);\
    \ i > 0; i-- {\n        if freq[i] >= i {\n            return i\n        }\n \
    \   }\n    return -1\n}\n", "    // Write your code here\n    return -1\n}\n",
  "    // Write your code here\n    return -1\n}\n", "    if len(lst) == 0 {\n   \
    \     return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n       \
    \ if k > v {\n            continue\n        }\n        if k > max {\n        \
    \    max = k\n        }\n    }\n    return max\n}\n", "    var result int\n  \
    \  var max int\n    var maxCount int\n    var count int\n    for _, v := range\
    \ lst {\n        if v > max {\n            max = v\n        }\n    }\n    for\
    \ i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range lst {\n\
    \            if v == i {\n                count++\n            }\n        }\n\
    \        if count >= i && count > maxCount {\n            maxCount = count\n \
    \           result = i\n        }\n    }\n    if result == 0 {\n        return\
    \ -1\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst {\n       \
    \ m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n\
    \            return i\n        }\n    }\n    return -1\n}\n", "    // TODO: implement\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n \
    \   for _, v := range lst {\n        m[v]++\n    }\n    max := -1\n    for k,\
    \ v := range m {\n        if k <= v && k > max {\n            max = k\n      \
    \  }\n    }\n    return max\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    // Write your code here\n    return -1\n}\n", "    if len(lst) == 0\
    \ {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n   \
    \     if k > v {\n            continue\n        }\n        if k > max {\n    \
    \        max = k\n        }\n    }\n    return max\n}\n", "    if len(lst) ==\
    \ 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if\
    \ m[i] >= i {\n            return i\n        }\n    }\n    return -1\n}\n", " \
    \   // Write your code here\n    return -1\n}\n", "    var max int\n    var max_count\
    \ int\n    var count int\n    var value int\n    for _, v := range lst {\n   \
    \     if v > max {\n            max = v\n        }\n    }\n    for i := 1; i <=\
    \ max; i++ {\n        count = 0\n        for _, v := range lst {\n           \
    \ if v == i {\n                count++\n            }\n        }\n        if count\
    \ >= i && count > max_count {\n            max_count = count\n            value\
    \ = i\n        }\n    }\n    if max_count > 0 {\n        return value\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    var\
    \ m = make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n\
    \    var max = -1\n    for k, v := range m {\n        if k > v {\n           \
    \ continue\n        }\n        if k > max {\n            max = k\n        }\n\
    \    }\n    return max\n}\n", "    if len(lst) == 0 {\n        return -1\n   \
    \ }\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    max := -1\n    for k, v := range m {\n        if k > v {\n       \
    \     continue\n        }\n        if k > max {\n            max = k\n       \
    \ }\n    }\n    return max\n}\n", "    if len(lst) == 0 {\n        return -1\n\
    \    }\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    max := -1\n    for k, v := range m {\n        if k <= v && k > max\
    \ {\n            max = k\n        }\n    }\n    return max\n}\n", "    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n  \
    \      if m[i] >= i {\n            return i\n        }\n    }\n    return -1\n\
    }\n", "    // TODO: implement\n    return -1\n}\n", "    // Write your code here\n\
    \    return -1\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n        if v\
    \ >= k && k > max {\n            max = k\n        }\n    }\n    return max\n}\n",
  "    if len(lst) == 0 {\n        return -1\n    }\n    // create a map of integers\
    \ and their frequency\n    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    // iterate through the map and find the greatest integer\
    \ that is greater than zero, and has a frequency greater than or equal to the\
    \ value of the integer itself\n    var max int\n    for k, v := range m {\n  \
    \      if k > 0 && k <= v && k > max {\n            max = k\n        }\n    }\n\
    \    if max == 0 {\n        return -1\n    }\n    return max\n}\n", "    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n  \
    \      if m[i] >= i {\n            return i\n        }\n    }\n    return -1\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for _, v := range lst {\n        if v > 0 && m[v] >= v {\n       \
    \     return v\n        }\n    }\n    return -1\n}\n", "    var max, maxFreq int\n\
    \    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \        if v > max {\n            max = v\n        }\n    }\n    for i := 1;\
    \ i <= max; i++ {\n        if freq[i] >= i {\n            maxFreq = i\n      \
    \  }\n    }\n    if maxFreq == 0 {\n        return -1\n    }\n    return maxFreq\n\
    }\n", "    // create a map of integers to their frequencies\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    // iterate through\
    \ the map and find the first integer that has a frequency greater than or equal\
    \ to its value\n    for k, v := range freq {\n        if v >= k {\n          \
    \  return k\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if v > 0 && m[v] >= v {\n            return v\n        }\n    }\n\
    \    return -1\n}\n", "    var max int\n    var freq = make(map[int]int)\n   \
    \ for _, v := range lst {\n        if v > max {\n            max = v\n       \
    \ }\n        freq[v]++\n    }\n    for i := max; i > 0; i-- {\n        if freq[i]\
    \ >= i {\n            return i\n        }\n    }\n    return -1\n}\n", "    if\
    \ len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for\
    \ _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i > 0; i--\
    \ {\n        if m[i] >= i {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    freq := make(map[int]int)\n    for _, v := range lst\
    \ {\n        freq[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if\
    \ freq[i] >= i {\n            return i\n        }\n    }\n    return -1\n}\n",
  "    // your code here\n    return 0\n}\n", "    m := make(map[int]int)\n    for\
    \ _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst {\n  \
    \      if v > 0 && m[v] >= v {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    //\
    \ create a map to count the frequency of each integer\n    freq := make(map[int]int)\n\
    \    for _, v := range lst {\n        freq[v]++\n    }\n    // find the greatest\
    \ integer that is greater than zero, and has a frequency greater than or equal\
    \ to the value of the integer itself\n    var result int\n    for k, v := range\
    \ freq {\n        if k > 0 && v >= k {\n            if result < k {\n        \
    \        result = k\n            }\n        }\n    }\n    if result == 0 {\n \
    \       return -1\n    }\n    return result\n}\n", "    if len(lst) == 0 {\n \
    \       return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n       \
    \ if k > v {\n            continue\n        }\n        if k > max {\n        \
    \    max = k\n        }\n    }\n    return max\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if v > 0 && m[v] >= v {\n            return v\n        }\n    }\n\
    \    return -1\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    for _, v := range lst {\n        if v > 0 && m[v]\
    \ >= v {\n            return v\n        }\n    }\n    return -1\n}\n", "    //\
    \ TODO: Implement\n    return -1\n}\n", "    // TODO: implement this function\n\
    \    return -1\n}\n", "    // TODO: implement\n    return -1\n}\n", "    // TODO:\
    \ implement\n    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n\
    \    }\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    max := -1\n    for k, v := range m {\n        if k > v {\n       \
    \     continue\n        }\n        if k > max {\n            max = k\n       \
    \ }\n    }\n    return max\n}\n", "    // TODO: implement\n    return -1\n}\n",
  "    // TODO: implement\n    return -1\n}\n", "    // your code here\n    return\
    \ -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst {\n       \
    \ m[v]++\n    }\n    max := 0\n    for k, v := range m {\n        if k > v {\n\
    \            continue\n        }\n        if k > max {\n            max = k\n\
    \        }\n    }\n    if max == 0 {\n        return -1\n    }\n    return max\n\
    }\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    max := -1\n    for k,\
    \ v := range m {\n        if k <= v && k > max {\n            max = k\n      \
    \  }\n    }\n    return max\n}\n", "    if len(lst) == 0 {\n        return -1\n\
    \    }\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n", "    // Write your code\
    \ here\n    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n\
    \    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n   \
    \ }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n           \
    \ return i\n        }\n    }\n    return -1\n}\n", "    // TODO: implement this\
    \ function\n    return 0\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n    for\
    \ _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst {\n  \
    \      if v > 0 && m[v] >= v {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n \
    \   for _, v := range lst {\n        m[v]++\n    }\n    max := -1\n    for k,\
    \ v := range m {\n        if k > v {\n            continue\n        }\n      \
    \  if k > max {\n            max = k\n        }\n    }\n    return max\n}\n",
  "    if len(lst) == 0 {\n        return -1\n    }\n    var max int\n    var maxFreq\
    \ int\n    var freqMap = make(map[int]int)\n    for _, v := range lst {\n    \
    \    freqMap[v]++\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for i := 1; i <= max; i++ {\n        if freqMap[i] >= i {\n            maxFreq\
    \ = i\n        }\n    }\n    if maxFreq == 0 {\n        return -1\n    }\n   \
    \ return maxFreq\n}\n", "    // your code here\n    return -1\n}\n", "    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n\
    \        if k > v {\n            continue\n        }\n        if k > max {\n \
    \           max = k\n        }\n    }\n    return max\n}\n", "    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v]++\n    }\n    var max int\n    for k, v := range m\
    \ {\n        if k > v {\n            continue\n        }\n        if k > max {\n\
    \            max = k\n        }\n    }\n    if max == 0 {\n        return -1\n\
    \    }\n    return max\n}\n", "    // TODO: implement search\n    return -1\n\
    }\n", "    var max int\n    var maxCount int\n    var count int\n    for _, v\
    \ := range lst {\n        if v > max {\n            max = v\n        }\n    }\n\
    \    for i := 1; i <= max; i++ {\n        count = 0\n        for _, v := range\
    \ lst {\n            if v == i {\n                count++\n            }\n   \
    \     }\n        if count >= i && count > maxCount {\n            maxCount = count\n\
    \        }\n    }\n    if maxCount == 0 {\n        return -1\n    }\n    return\
    \ maxCount\n}\n", "    // Write your code here\n    return -1\n}\n", "    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n\
    \        if k > v {\n            continue\n        }\n        if k > max {\n \
    \           max = k\n        }\n    }\n    return max\n}\n", "    // TODO: implement\n\
    \    return -1\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    for _, v := range lst {\n        if v > 0 && m[v]\
    \ >= v {\n            return v\n        }\n    }\n    return -1\n}\n", "    //\
    \ create a map of the frequencies\n    freq := make(map[int]int)\n    for _, v\
    \ := range lst {\n        freq[v]++\n    }\n    // iterate through the map and\
    \ find the greatest value\n    greatest := -1\n    for k, v := range freq {\n\
    \        if k > v {\n            continue\n        }\n        if k > greatest\
    \ {\n            greatest = k\n        }\n    }\n    return greatest\n}\n", " \
    \   if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n\
    \    for _, v := range lst {\n        if v > 0 && m[v] >= v {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n", "    // TODO: implement\n    return\
    \ -1\n}\n", "    var max, count int\n    m := make(map[int]int)\n    for _, v\
    \ := range lst {\n        m[v]++\n        if max < v {\n            max = v\n\
    \        }\n    }\n    for i := max; i > 0; i-- {\n        if m[i] >= i {\n  \
    \          return i\n        }\n    }\n    return -1\n}\n", "    // TODO: implement\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n \
    \   for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i >\
    \ 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n \
    \   return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   for _, v := range lst {\n        if v > 0 && m[v] >= v {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst {\n       \
    \ m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n\
    \            return i\n        }\n    }\n    return -1\n}\n", "    // Write your\
    \ code here\n    return -1\n}\n", "    var max int\n    var maxCount int\n   \
    \ var count int\n    var m = make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    for k, v := range m {\n        if v >= k && v >= maxCount\
    \ {\n            max = k\n            maxCount = v\n        }\n    }\n    for\
    \ _, v := range lst {\n        if v == max {\n            count++\n        }\n\
    \    }\n    if count >= max {\n        return max\n    }\n    return -1\n}\n",
  "    if len(lst) == 0 {\n        return -1\n    }\n    // Create a map of integer\
    \ to frequency\n    freq := make(map[int]int)\n    for _, v := range lst {\n \
    \       freq[v]++\n    }\n    // Find the greatest integer that is greater than\
    \ zero, and has a frequency greater than or equal to the value of the integer\
    \ itself.\n    var max int\n    for k, v := range freq {\n        if k > 0 &&\
    \ k <= v && k > max {\n            max = k\n        }\n    }\n    if max == 0\
    \ {\n        return -1\n    }\n    return max\n}\n", "    if len(lst) == 0 {\n\
    \        return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n       \
    \ if k > v {\n            continue\n        }\n        if k > max {\n        \
    \    max = k\n        }\n    }\n    return max\n}\n", "    if len(lst) == 0 {\n\
    \        return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n    }\n    max := 0\n    for k, v := range m {\n        if\
    \ v >= k && k > max {\n            max = k\n        }\n    }\n    if max == 0\
    \ {\n        return -1\n    }\n    return max\n}\n", "    var max, maxFreq int\n\
    \    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \        if v > max {\n            max = v\n        }\n    }\n    for i := 1;\
    \ i <= max; i++ {\n        if freq[i] >= i {\n            maxFreq = i\n      \
    \  }\n    }\n    if maxFreq == 0 {\n        return -1\n    }\n    return maxFreq\n\
    }\n", "    var max, maxCount int\n    for _, v := range lst {\n        if v >\
    \ max {\n            max = v\n        }\n    }\n    counts := make([]int, max\
    \ + 1)\n    for _, v := range lst {\n        counts[v]++\n    }\n    for i, v\
    \ := range counts {\n        if i > 0 && i <= v && v > maxCount {\n          \
    \  maxCount = v\n        }\n    }\n    if maxCount == 0 {\n        return -1\n\
    \    }\n    return maxCount\n}\n", "    // Write your code here\n    return -1\n\
    }\n", "    // Write your code here\n    return -1\n}\n", "    if len(lst) == 0\
    \ {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n   \
    \     if k <= v && k > max {\n            max = k\n        }\n    }\n    return\
    \ max\n}\n", "    // TODO: Implement\n    return -1\n}\n", "    if len(lst) ==\
    \ 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, i := range\
    \ lst {\n        m[i]++\n    }\n    var max int\n    for k, v := range m {\n \
    \       if v >= k && k > max {\n            max = k\n        }\n    }\n    if\
    \ max == 0 {\n        return -1\n    }\n    return max\n}\n", "    // TODO: implement\
    \ this function\n    return -1\n}\n", "    // Write your code here\n    return\
    \ -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // Write your code here\n    return -1\n}\n", "    if len(lst) == 0 {\n    \
    \    return -1\n    }\n    // Create a map of frequency of each element\n    freq\
    \ := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n\
    \    // Iterate through the map and find the element with frequency >= value\n\
    \    for k, v := range freq {\n        if k <= v {\n            return k\n   \
    \     }\n    }\n    return -1\n}\n", "    // create a map of int to int\n    //\
    \ iterate through the list\n    // if the int is in the map, increment the value\n\
    \    // otherwise, add the int to the map with a value of 1\n    // iterate through\
    \ the map\n    // if the value is greater than or equal to the key, return the\
    \ key\n    // otherwise, return -1\n    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        if _, ok := m[v]; ok {\n            m[v]++\n        } else\
    \ {\n            m[v] = 1\n        }\n    }\n    for k, v := range m {\n     \
    \   if v >= k {\n            return k\n        }\n    }\n    return -1\n}\n",
  "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    max := -1\n    for k,\
    \ v := range m {\n        if k <= v && k > max {\n            max = k\n      \
    \  }\n    }\n    return max\n}\n", "    var max int\n    var maxFreq int\n   \
    \ var freq int\n    var freqMap = make(map[int]int)\n    for _, v := range lst\
    \ {\n        freqMap[v]++\n    }\n    for k, v := range freqMap {\n        if\
    \ k > max && v >= k {\n            max = k\n            maxFreq = v\n        }\n\
    \        if k == max && v > maxFreq {\n            maxFreq = v\n        }\n  \
    \  }\n    if max == 0 {\n        return -1\n    }\n    return max\n}\n", "   \
    \ // TODO: Implement me!\n    return -1\n}\n", "    if len(lst) == 0 {\n     \
    \   return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >=\
    \ i {\n            return i\n        }\n    }\n    return -1\n}\n", "    freq\
    \ := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n    }\n\
    \    for i := len(lst); i > 0; i-- {\n        if freq[i] >= i {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n", "    // TODO: implement\n    return\
    \ 0\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for _, v := range lst {\n        if m[v] >= v {\n            return\
    \ v\n        }\n    }\n    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst {\n       \
    \ m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n\
    \            return i\n        }\n    }\n    return -1\n}\n", "    counts := make(map[int]int)\n\
    \    for _, v := range lst {\n        counts[v]++\n    }\n    for _, v := range\
    \ lst {\n        if counts[v] >= v {\n            return v\n        }\n    }\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ // TODO: Implement\n    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    // count the frequency of each number\n    freq := make(map[int]int)\n\
    \    for _, num := range lst {\n        freq[num]++\n    }\n    // find the greatest\
    \ number that has a frequency greater than or equal to the value of the integer\
    \ itself\n    var max int\n    for num, count := range freq {\n        if num\
    \ > max && count >= num {\n            max = num\n        }\n    }\n    if max\
    \ == 0 {\n        return -1\n    }\n    return max\n}\n", "    if len(lst) ==\
    \ 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if\
    \ m[i] >= i {\n            return i\n        }\n    }\n    return -1\n}\n", " \
    \   if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    for _, v := range lst {\n        if v > 0 && m[v]\
    \ >= v {\n            return v\n        }\n    }\n    return -1\n}\n", "    var\
    \ result int\n    var max int\n    var maxCount int\n    var count int\n    var\
    \ num int\n    for _, num = range lst {\n        count = 0\n        for _, num2\
    \ := range lst {\n            if num == num2 {\n                count++\n    \
    \        }\n        }\n        if count >= num && count > maxCount {\n       \
    \     max = num\n            maxCount = count\n        }\n    }\n    if maxCount\
    \ > 0 {\n        result = max\n    } else {\n        result = -1\n    }\n    return\
    \ result\n}\n", "    // your code here\n    return -1\n}\n", "    // Write your\
    \ code here\n    return -1\n}\n", "    freq := make(map[int]int)\n    for _, v\
    \ := range lst {\n        freq[v]++\n    }\n    for _, v := range lst {\n    \
    \    if v > 0 && freq[v] >= v {\n            return v\n        }\n    }\n    return\
    \ -1\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n       \
    \ m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n\
    \            return i\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if v > 0 && m[v] >= v {\n            return v\n        }\n    }\n\
    \    return -1\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    for _, v := range lst {\n        if v > 0 && m[v]\
    \ >= v {\n            return v\n        }\n    }\n    return -1\n}\n", "    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n            return\
    \ i\n        }\n    }\n    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    var m = make(map[int]int)\n    for _, v := range lst {\n    \
    \    m[v]++\n    }\n    var max = -1\n    for k, v := range m {\n        if v\
    \ >= k && k > max {\n            max = k\n        }\n    }\n    return max\n}\n",
  "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    for _, v := range lst {\n        if v > 0 && m[v]\
    \ >= v {\n            return v\n        }\n    }\n    return -1\n}\n", "    //\
    \ Write your code here\n    return -1\n}\n", "    if len(lst) == 0 {\n       \
    \ return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst {\n\
    \        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >=\
    \ i {\n            return i\n        }\n    }\n    return -1\n}\n", "    // Write\
    \ your code here\n    return -1\n}\n", "    var max int\n    var count int\n \
    \   var maxCount int\n    var maxCountNum int\n    for i := 0; i < len(lst); i++\
    \ {\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n \
    \   for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            count++\n\
    \        }\n    }\n    if count >= max {\n        return max\n    }\n    for i\
    \ := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst); j++ {\n       \
    \     if lst[i] == lst[j] {\n                count++\n            }\n        }\n\
    \        if count >= lst[i] && lst[i] > maxCountNum {\n            maxCountNum\
    \ = lst[i]\n            maxCount = count\n        }\n        count = 0\n    }\n\
    \    if maxCountNum == 0 {\n        return -1\n    }\n    return maxCountNum\n\
    }\n", "    // Write your code here\n    return -1\n}\n", "    if len(lst) == 0\
    \ {\n        return -1\n    }\n    freq := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        freq[v]++\n    }\n    max := -1\n    for k, v := range\
    \ freq {\n        if v >= k && k > max {\n            max = k\n        }\n   \
    \ }\n    return max\n}\n", "    // Write your code here\n    return -1\n}\n",
  "    freq := make(map[int]int)\n    for _, v := range lst {\n        freq[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if freq[i] >= i {\n     \
    \       return i\n        }\n    }\n    return -1\n}\n", "    if len(lst) == 0\
    \ {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v := range\
    \ lst {\n        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if\
    \ m[i] >= i {\n            return i\n        }\n    }\n    return -1\n}\n", " \
    \   // Write your code here\n    return -1\n}\n", "    if len(lst) == 0 {\n  \
    \      return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n       \
    \ if v >= k && k > max {\n            max = k\n        }\n    }\n    return max\n\
    }\n", "    if len(lst) == 0 {\n        return -1\n    }\n    var max int\n   \
    \ for _, v := range lst {\n        if v > max {\n            max = v\n       \
    \ }\n    }\n    if max == 0 {\n        return -1\n    }\n    freq := make([]int,\
    \ max+1)\n    for _, v := range lst {\n        freq[v]++\n    }\n    for i :=\
    \ max; i > 0; i-- {\n        if freq[i] >= i {\n            return i\n       \
    \ }\n    }\n    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n\
    \    }\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    max := -1\n    for k, v := range m {\n        if k > v {\n       \
    \     continue\n        }\n        if k > max {\n            max = k\n       \
    \ }\n    }\n    return max\n}\n", "    if len(lst) == 0 {\n        return -1\n\
    \    }\n    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    max := -1\n    for k, v := range m {\n        if v >= k && k > max\
    \ {\n            max = k\n        }\n    }\n    return max\n}\n", "    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n  \
    \      if m[i] >= i {\n            return i\n        }\n    }\n    return -1\n\
    }\n", "    m := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n        \
    \    return i\n        }\n    }\n    return -1\n}\n", "    if len(lst) == 0 {\n\
    \        return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n       \
    \ if k > v {\n            continue\n        }\n        if k > max {\n        \
    \    max = k\n        }\n    }\n    return max\n}\n", "    // TODO: implement\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n \
    \   for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i >\
    \ 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n \
    \   return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "    if\
    \ len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for\
    \ _, v := range lst {\n        m[v]++\n    }\n    max := -1\n    for k, v := range\
    \ m {\n        if k <= v && k > max {\n            max = k\n        }\n    }\n\
    \    return max\n}\n", "    // Write your code here\n    return -1\n}\n", "  \
    \  if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    // TODO: implement\n    return -1\n}\n", "    // Write\
    \ your code here\n    return -1\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst {\n       \
    \ m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n        if m[i] >= i {\n\
    \            return i\n        }\n    }\n    return -1\n}\n", "    // Write your\
    \ code here\n    return -1\n}\n", "    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v]++\n    }\n    for i := len(lst); i > 0; i-- {\n  \
    \      if m[i] >= i {\n            return i\n        }\n    }\n    return -1\n\
    }\n", "    // TODO: Implement\n    return -1\n}\n", "    if len(lst) == 0 {\n\
    \        return -1\n    }\n    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n       \
    \ if v >= k && k > max {\n            max = k\n        }\n    }\n    return max\n\
    }\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    max := -1\n    for k,\
    \ v := range m {\n        if k <= v && k > max {\n            max = k\n      \
    \  }\n    }\n    return max\n}\n", "    // TODO: implement this function\n   \
    \ return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    // create\
    \ a map of integers and their frequencies\n    m := make(map[int]int)\n    for\
    \ _, v := range lst {\n        m[v]++\n    }\n    // iterate over the map and\
    \ find the greatest integer that is greater than zero,\n    // and has a frequency\
    \ greater than or equal to the value of the integer itself\n    var max int\n\
    \    for k, v := range m {\n        if k > 0 && k <= v && k > max {\n        \
    \    max = k\n        }\n    }\n    if max == 0 {\n        return -1\n    }\n\
    \    return max\n}\n", "    m := make(map[int]int)\n    for _, v := range lst\
    \ {\n        m[v]++\n    }\n    for _, v := range lst {\n        if v > 0 && m[v]\
    \ >= v {\n            return v\n        }\n    }\n    return -1\n}\n", "    if\
    \ len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for\
    \ _, v := range lst {\n        m[v]++\n    }\n    max := -1\n    for k, v := range\
    \ m {\n        if v >= k && k > max {\n            max = k\n        }\n    }\n\
    \    return max\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n   \
    \ freq := make(map[int]int)\n    for _, n := range lst {\n        freq[n]++\n\
    \    }\n    for i := len(lst); i > 0; i-- {\n        if freq[i] >= i {\n     \
    \       return i\n        }\n    }\n    return -1\n}\n", "    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for _, v := range lst\
    \ {\n        if v > 0 && m[v] >= v {\n            return v\n        }\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   max := -1\n    for k, v := range m {\n        if k > v {\n            continue\n\
    \        }\n        if k > max {\n            max = k\n        }\n    }\n    return\
    \ max\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m\
    \ := make(map[int]int)\n    for _, v := range lst {\n        m[v]++\n    }\n \
    \   max := 0\n    for k, v := range m {\n        if k > v {\n            continue\n\
    \        }\n        if k > max {\n            max = k\n        }\n    }\n    if\
    \ max == 0 {\n        return -1\n    }\n    return max\n}\n", "    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    freq := make(map[int]int)\n    for _,\
    \ v := range lst {\n        freq[v]++\n    }\n    for i := len(lst); i > 0; i--\
    \ {\n        if freq[i] >= i {\n            return i\n        }\n    }\n    return\
    \ -1\n}\n", "    if len(lst) == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    for i := len(lst); i\
    \ > 0; i-- {\n        if m[i] >= i {\n            return i\n        }\n    }\n\
    \    return -1\n}\n", "    // Write your code here\n    return -1\n}\n", "   \
    \ var max int\n    var count int\n    var result int\n    for _, v := range lst\
    \ {\n        if v > max {\n            max = v\n        }\n    }\n    for i :=\
    \ 1; i <= max; i++ {\n        count = 0\n        for _, v := range lst {\n   \
    \         if v == i {\n                count++\n            }\n        }\n   \
    \     if count >= i {\n            result = i\n        }\n    }\n    if result\
    \ == 0 {\n        return -1\n    }\n    return result\n}\n", "    if len(lst)\
    \ == 0 {\n        return -1\n    }\n    m := make(map[int]int)\n    for _, v :=\
    \ range lst {\n        m[v]++\n    }\n    max := -1\n    for k, v := range m {\n\
    \        if k > v {\n            continue\n        }\n        if k > max {\n \
    \           max = k\n        }\n    }\n    return max\n}\n", "    var m = make(map[int]int)\n\
    \    for _, v := range lst {\n        m[v]++\n    }\n    var max = -1\n    for\
    \ k, v := range m {\n        if v >= k && k > max {\n            max = k\n   \
    \     }\n    }\n    return max\n}\n", "    if len(lst) == 0 {\n        return\
    \ -1\n    }\n    freq := make(map[int]int)\n    for _, v := range lst {\n    \
    \    freq[v]++\n    }\n    max := -1\n    for k, v := range freq {\n        if\
    \ k <= v && k > max {\n            max = k\n        }\n    }\n    return max\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
