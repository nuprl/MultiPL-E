name: HumanEval_151_double_the_difference
language: go_test.go
prompt: "package double_the_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Given a list of numbers, return the sum of squares of the numbers\n//\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  // >>> double_the_difference([]int{1, 3, 2, 0})\n// 10\n// >>> double_the_difference([]int{-1,\
  \ -2, 0})\n// 0\n// >>> double_the_difference([]int{9, -2})\n// 81\n// >>> double_the_difference([]int{0})\n\
  // 0\n// If the input list is empty, return 0.\nfunc double_the_difference(lst []float64)\
  \ int {\n"
tests: "func TestDouble_The_Difference(t *testing.T) {\n  candidate := double_the_difference\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]float64{}), expected: 0 },\n  \
  \   { actual: candidate([]float64{5.0, 4.0}), expected: 25 },\n     { actual: candidate([]float64{0.1,\
  \ 0.2, 0.3}), expected: 0 },\n     { actual: candidate([]float64{-10.0, -20.0, -30.0}),\
  \ expected: 0 },\n     { actual: candidate([]float64{-1.0, -2.0, 8.0}), expected:\
  \ 0 },\n     { actual: candidate([]float64{0.2, 3.0, 5.0}), expected: 34 },\n  \
  \   { actual: candidate([]float64{-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0,\
  \ 9.0}), expected: 165 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    return 0\n}\n", "    return 0\n}\n", "    // Your code here\n \
    \   return 0\n}\n", "    var sum int\n    for _, v := range lst {\n        if\
    \ v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n        \
    \        sum += int(v) * int(v)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n", "    var sum int\n    for _, v := range lst {\n        if v > 0 &&\
    \ v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n                sum\
    \ += int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n}\n",
  "    var sum int = 0\n    for _, v := range lst {\n        if v > 0 && v == float64(int(v))\
    \ {\n            if int(v) % 2 == 1 {\n                sum += int(v) * int(v)\n\
    \            }\n        }\n    }\n    return sum * 2\n}\n", "    var sum int\n\
    \    for _, n := range lst {\n        if n > 0 && n == float64(int(n)) {\n   \
    \         if int(n) % 2 == 1 {\n                sum += int(n) * int(n)\n     \
    \       }\n        }\n    }\n    return sum * 2\n}\n", "    var sum int\n    for\
    \ _, v := range lst {\n        if v > 0 && v == float64(int(v)) {\n          \
    \  if v % 2 == 1 {\n                sum += int(v) * int(v)\n            }\n  \
    \      }\n    }\n    return sum * 2\n}\n", "    var sum int\n    for _, num :=\
    \ range lst {\n        if num > 0 && num == float64(int(num)) {\n            if\
    \ int(num) % 2 == 1 {\n                sum += int(num) * int(num)\n          \
    \  }\n        }\n    }\n    return sum * 2\n}\n", "    var sum int = 0\n    for\
    \ _, num := range lst {\n        if num > 0 && num == float64(int(num)) {\n  \
    \          sum += int(num) * int(num)\n        }\n    }\n    return sum * 2\n\
    }\n", "    var sum int\n    for _, v := range lst {\n        if v > 0 && v ==\
    \ float64(int(v)) {\n            if int(v) % 2 == 1 {\n                sum +=\
    \ int(v) * int(v)\n            }\n        }\n    }\n    return sum * 2\n}\n",
  "    var sum int\n    for _, num := range lst {\n        if num > 0 && num == float64(int(num))\
    \ {\n            if int(num) % 2 == 1 {\n                sum += int(num) * int(num)\n\
    \            }\n        }\n    }\n    return sum * 2\n}\n", "    // Your code\
    \ here\n    return 0\n}\n", "    var sum int = 0\n    for _, v := range lst {\n\
    \        if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n\
    \                sum += int(v) * int(v)\n            }\n        }\n    }\n   \
    \ return sum * 2\n}\n", "    var sum int\n    for _, v := range lst {\n      \
    \  if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n    \
    \            sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n", "    var sum int\n    for _, num := range lst {\n        if num\
    \ > 0 && num == float64(int(num)) {\n            if int(num) % 2 == 1 {\n    \
    \            sum += int(num) * int(num)\n            }\n        }\n    }\n   \
    \ return sum * 2\n}\n", "    var sum int\n    for _, v := range lst {\n      \
    \  if v > 0 && v == float64(int(v)) {\n            if int(v) % 2 == 1 {\n    \
    \            sum += int(v) * int(v)\n            }\n        }\n    }\n    return\
    \ sum * 2\n}\n", "    var sum int\n    for _, i := range lst {\n        if i >\
    \ 0 && i == float64(int(i)) {\n            if int(i) % 2 == 1 {\n            \
    \    sum += int(i) * int(i)\n            }\n        }\n    }\n    return sum *\
    \ 2\n}\n", "    var sum int = 0\n    for _, n := range lst {\n        if n > 0\
    \ && n == float64(int(n)) {\n            if int(n) % 2 == 1 {\n              \
    \  sum += int(n) * int(n)\n            }\n        }\n    }\n    return sum * 2\n\
    }\n", "    var sum int\n    for _, num := range lst {\n        if num > 0 && num\
    \ == float64(int(num)) {\n            if int(num) % 2 == 1 {\n               \
    \ sum += int(num) * int(num)\n            }\n        }\n    }\n    return sum\
    \ * 2\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
