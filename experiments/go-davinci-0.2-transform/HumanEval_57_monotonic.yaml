name: HumanEval_57_monotonic
language: go_test.go
prompt: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Return True is list elements are monotonically increasing or decreasing.\n// >>>\
  \ monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4, 10})\n\
  // false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l []int)\
  \ bool {\n"
tests: "func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
  \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests :=\
  \ []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n   \
  \  { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
  \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
  \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
  \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n \
  \    { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
  \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    if len(l) <= 1 {\n        return true\n    }\n    if l[0] < l[1]\
    \ {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1]\
    \ {\n                return false\n            }\n        }\n    } else {\n  \
    \      for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n \
    \               return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(l) < 2 {\n        return true\n    }\n    // Check if increasing\n\
    \    if l[0] < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n           \
    \ if l[i] > l[i + 1] {\n                return false\n            }\n        }\n\
    \        return true\n    }\n    // Check if decreasing\n    if l[0] > l[1] {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n        return true\n\
    \    }\n    // Check if equal\n    for i := 1; i < len(l) - 1; i++ {\n       \
    \ if l[i] != l[i + 1] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n", "    if len(l) <= 1 {\n        return true\n    }\n    if l[0] <\
    \ l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(l) <= 1 {\n        return true\n    }\n    if l[0] < l[1] {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n\
    \                return false\n            }\n        }\n    } else {\n      \
    \  for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n     \
    \           return false\n            }\n        }\n    }\n    return true\n}\n",
  "    if len(l) < 2 {\n        return true\n    }\n    if l[0] < l[1] {\n       \
    \ for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n      \
    \          return false\n            }\n        }\n    } else {\n        for i\
    \ := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n            \
    \    return false\n            }\n        }\n    }\n    return true\n}\n", " \
    \   if len(l) <= 1 {\n        return true\n    }\n    if l[0] < l[1] {\n     \
    \   for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n    \
    \            return false\n            }\n        }\n    } else {\n        for\
    \ i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n          \
    \      return false\n            }\n        }\n    }\n    return true\n}\n", " \
    \   if len(l) < 2 {\n        return true\n    }\n    if l[0] < l[1] {\n      \
    \  for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n     \
    \           return false\n            }\n        }\n    } else {\n        for\
    \ i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n          \
    \      return false\n            }\n        }\n    }\n    return true\n}\n", " \
    \   if len(l) <= 1 {\n        return true\n    }\n    if l[0] <= l[1] {\n    \
    \    for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n   \
    \             return false\n            }\n        }\n    } else {\n        for\
    \ i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n          \
    \      return false\n            }\n        }\n    }\n    return true\n}\n", " \
    \   if len(l) <= 1 {\n        return true\n    }\n    if l[0] > l[1] {\n     \
    \   for i := 1; i < len(l); i++ {\n            if l[i-1] < l[i] {\n          \
    \      return false\n            }\n        }\n    } else {\n        for i :=\
    \ 1; i < len(l); i++ {\n            if l[i-1] > l[i] {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n", "    if len(l)\
    \ <= 1 {\n        return true\n    }\n    if l[0] < l[1] {\n        for i := 1;\
    \ i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n                return\
    \ false\n            }\n        }\n    } else {\n        for i := 1; i < len(l)\
    \ - 1; i++ {\n            if l[i] < l[i + 1] {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n", "    if len(l) < 2 {\n\
    \        return true\n    }\n    if l[0] < l[1] {\n        for i := 1; i < len(l);\
    \ i++ {\n            if l[i] < l[i-1] {\n                return false\n      \
    \      }\n        }\n    } else {\n        for i := 1; i < len(l); i++ {\n   \
    \         if l[i] > l[i-1] {\n                return false\n            }\n  \
    \      }\n    }\n    return true\n}\n", "    if len(l) <= 1 {\n        return\
    \ true\n    }\n    if l[0] < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n\
    \            if l[i] > l[i + 1] {\n                return false\n            }\n\
    \        }\n    } else {\n        for i := 1; i < len(l) - 1; i++ {\n        \
    \    if l[i] < l[i + 1] {\n                return false\n            }\n     \
    \   }\n    }\n    return true\n}\n", "    if len(l) <= 1 {\n        return true\n\
    \    }\n    if l[0] < l[1] {\n        for i := 1; i < len(l); i++ {\n        \
    \    if l[i-1] > l[i] {\n                return false\n            }\n       \
    \ }\n    } else {\n        for i := 1; i < len(l); i++ {\n            if l[i-1]\
    \ < l[i] {\n                return false\n            }\n        }\n    }\n  \
    \  return true\n}\n", "    if len(l) <= 1 {\n        return true\n    }\n    if\
    \ l[0] < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i]\
    \ > l[i + 1] {\n                return false\n            }\n        }\n    }\
    \ else {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i\
    \ + 1] {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n", "    if len(l) <= 1 {\n        return true\n    }\n    if l[0] <\
    \ l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n", "    if len(l) <= 1 {\n        return true\n    }\n    if l[0] > l[1] {\n\
    \        for i := 1; i < len(l); i++ {\n            if l[i] > l[i-1] {\n     \
    \           return false\n            }\n        }\n    } else {\n        for\
    \ i := 1; i < len(l); i++ {\n            if l[i] < l[i-1] {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n", "    if len(l)\
    \ <= 1 {\n        return true\n    }\n    if l[0] < l[1] {\n        for i := 1;\
    \ i < len(l); i++ {\n            if l[i-1] > l[i] {\n                return false\n\
    \            }\n        }\n    } else {\n        for i := 1; i < len(l); i++ {\n\
    \            if l[i-1] < l[i] {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n", "    if len(l) <= 1 {\n        return\
    \ true\n    }\n    if l[0] < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n\
    \            if l[i] > l[i + 1] {\n                return false\n            }\n\
    \        }\n    } else {\n        for i := 1; i < len(l) - 1; i++ {\n        \
    \    if l[i] < l[i + 1] {\n                return false\n            }\n     \
    \   }\n    }\n    return true\n}\n", "    if len(l) <= 1 {\n        return true\n\
    \    }\n    if l[0] < l[1] {\n        for i := 1; i < len(l); i++ {\n        \
    \    if l[i-1] > l[i] {\n                return false\n            }\n       \
    \ }\n    } else {\n        for i := 1; i < len(l); i++ {\n            if l[i-1]\
    \ < l[i] {\n                return false\n            }\n        }\n    }\n  \
    \  return true\n}\n", "    if len(l) <= 1 {\n        return true\n    }\n    prev\
    \ := l[0]\n    increasing := true\n    decreasing := true\n    for _, v := range\
    \ l[1:] {\n        if v > prev {\n            decreasing = false\n        } else\
    \ if v < prev {\n            increasing = false\n        }\n        prev = v\n\
    \    }\n    return increasing || decreasing\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
