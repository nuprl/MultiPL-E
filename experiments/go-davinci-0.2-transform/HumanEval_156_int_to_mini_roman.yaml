name: HumanEval_156_int_to_mini_roman
language: go_test.go
prompt: "package int_to_mini_roman_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Given a positive integer, obtain its roman numeral equivalent as a string,\n\
  // and return it in lowercase.\n// Restrictions: 1 <= num <= 1000\n// Examples:\n\
  // >>> int_to_mini_roman(19)\n// \"xix\"\n// >>> int_to_mini_roman(152)\n// \"clii\"\
  \n// >>> int_to_mini_roman(426)\n// \"cdxxvi\"\nfunc int_to_mini_roman(number int)\
  \ string {\n"
tests: "func TestInt_To_Mini_Roman(t *testing.T) {\n  candidate := int_to_mini_roman\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(19), expected: \"xix\" },\n     {\
  \ actual: candidate(152), expected: \"clii\" },\n     { actual: candidate(251),\
  \ expected: \"ccli\" },\n     { actual: candidate(426), expected: \"cdxxvi\" },\n\
  \     { actual: candidate(500), expected: \"d\" },\n     { actual: candidate(1),\
  \ expected: \"i\" },\n     { actual: candidate(4), expected: \"iv\" },\n     { actual:\
  \ candidate(43), expected: \"xliii\" },\n     { actual: candidate(90), expected:\
  \ \"xc\" },\n     { actual: candidate(94), expected: \"xciv\" },\n     { actual:\
  \ candidate(532), expected: \"dxxxii\" },\n     { actual: candidate(900), expected:\
  \ \"cm\" },\n     { actual: candidate(994), expected: \"cmxciv\" },\n     { actual:\
  \ candidate(1000), expected: \"m\" },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
  t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
  %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
  \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // your code here\n    return \"\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    var result string\n    for number > 0 {\n       \
    \ if number >= 1000 {\n            result += \"m\"\n            number -= 1000\n\
    \        } else if number >= 900 {\n            result += \"cm\"\n           \
    \ number -= 900\n        } else if number >= 500 {\n            result += \"d\"\
    \n            number -= 500\n        } else if number >= 400 {\n            result\
    \ += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n  \
    \          result += \"c\"\n            number -= 100\n        } else if number\
    \ >= 90 {\n            result += \"xc\"\n            number -= 90\n        } else\
    \ if number >= 50 {\n            result += \"l\"\n            number -= 50\n \
    \       } else if number >= 40 {\n            result += \"xl\"\n            number\
    \ -= 40\n        } else if number >= 10 {\n            result += \"x\"\n     \
    \       number -= 10\n        } else if number >= 9 {\n            result += \"\
    ix\"\n            number -= 9\n        } else if number >= 5 {\n            result\
    \ += \"v\"\n            number -= 5\n        } else if number >= 4 {\n       \
    \     result += \"iv\"\n            number -= 4\n        } else if number >= 1\
    \ {\n            result += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return result\n}\n", "    var result string\n    for number > 0 {\n     \
    \   if number >= 1000 {\n            result += \"m\"\n            number -= 1000\n\
    \        } else if number >= 900 {\n            result += \"cm\"\n           \
    \ number -= 900\n        } else if number >= 500 {\n            result += \"d\"\
    \n            number -= 500\n        } else if number >= 400 {\n            result\
    \ += \"cd\"\n            number -= 400\n        } else if number >= 100 {\n  \
    \          result += \"c\"\n            number -= 100\n        } else if number\
    \ >= 90 {\n            result += \"xc\"\n            number -= 90\n        } else\
    \ if number >= 50 {\n            result += \"l\"\n            number -= 50\n \
    \       } else if number >= 40 {\n            result += \"xl\"\n            number\
    \ -= 40\n        } else if number >= 10 {\n            result += \"x\"\n     \
    \       number -= 10\n        } else if number >= 9 {\n            result += \"\
    ix\"\n            number -= 9\n        } else if number >= 5 {\n            result\
    \ += \"v\"\n            number -= 5\n        } else if number >= 4 {\n       \
    \     result += \"iv\"\n            number -= 4\n        } else if number >= 1\
    \ {\n            result += \"i\"\n            number -= 1\n        }\n    }\n\
    \    return result\n}\n", "    // your code here\n    return \"\"\n}\n", "   \
    \ // your code here\n    return \"\"\n}\n", "    var result string\n    for number\
    \ > 0 {\n        if number >= 1000 {\n            result += \"m\"\n          \
    \  number -= 1000\n        } else if number >= 900 {\n            result += \"\
    cm\"\n            number -= 900\n        } else if number >= 500 {\n         \
    \   result += \"d\"\n            number -= 500\n        } else if number >= 400\
    \ {\n            result += \"cd\"\n            number -= 400\n        } else if\
    \ number >= 100 {\n            result += \"c\"\n            number -= 100\n  \
    \      } else if number >= 90 {\n            result += \"xc\"\n            number\
    \ -= 90\n        } else if number >= 50 {\n            result += \"l\"\n     \
    \       number -= 50\n        } else if number >= 40 {\n            result +=\
    \ \"xl\"\n            number -= 40\n        } else if number >= 10 {\n       \
    \     result += \"x\"\n            number -= 10\n        } else if number >= 9\
    \ {\n            result += \"ix\"\n            number -= 9\n        } else if\
    \ number >= 5 {\n            result += \"v\"\n            number -= 5\n      \
    \  } else if number >= 4 {\n            result += \"iv\"\n            number -=\
    \ 4\n        } else if number >= 1 {\n            result += \"i\"\n          \
    \  number -= 1\n        }\n    }\n    return result\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    return \"\"\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    // your code\
    \ here\n    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n",
  "    // your code here\n    return \"\"\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    // your code\
    \ here\n    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n",
  "    // your code here\n    return \"\"\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
