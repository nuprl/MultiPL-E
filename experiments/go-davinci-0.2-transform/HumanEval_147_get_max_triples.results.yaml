language: go_test.go
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if a[i] + a[j] + a[k] % 3 == 0 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp5q7hgthk_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp5q7hgthk_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp5q7hgthk_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp5q7hgthk_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    // fmt.Println(a)\n    var count int\n    for i := 0; i < n - 2; i++\
    \ {\n        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n             \
    \       count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    count := 0\n    for i := 0; i < len(a); i++ {\n        for j := i\
    \ + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp8y7fxtv5_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i -\
    \ i + 1\n    }\n    var count int\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp8y7fxtv5_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    cnt := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n                }\n  \
    \          }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i -\
    \ i + 1\n    }\n    var count int\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    var count int\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    fmt.Println(a)\n    count := 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i -\
    \ i + 1\n    }\n    var count int\n    for i := 0; i < n-2; i++ {\n        for\
    \ j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.011s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 0; i\
    \ < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    count := 0\n    for i :=\
    \ 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp9q2q9c5o_test.go:55: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i -\
    \ i + 1\n    }\n    var count int\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp4ej48cku_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp4ej48cku_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp4ej48cku_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    count := 0\n    for i := 0; i < len(a); i++ {\n        for j := i\
    \ + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    // a[i] = i * i - i + 1\n    // a[i] +\
    \ a[j] + a[k] = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n    // = i * i\
    \ + j * j + k * k - i - j - k + 3\n    // = (i + j + k) * (i + j + k) - (i + j\
    \ + k) + 3\n    // = (i + j + k) * (i + j + k - 1) + 2\n    // = (i + j + k) *\
    \ (i + j + k - 1) + 1 + 1\n    // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n\
    \    // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n    // = (i + j + k) * (i +\
    \ j + k - 1) + (1 + 1)\n    // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n   \
    \ // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n    // = (i + j + k) * (i + j\
    \ + k - 1) + (1 + 1)\n    // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n    //\
    \ = (i + j + k) * (i + j + k - 1) + (1 + 1)\n    // = (i + j + k) * (i + j + k\
    \ - 1) + (1 + 1)\n    // = (i + j + k) * (i + j + k - 1) + (1 + 1)\n    // = (i\
    \ + j + k) * (i + j + k - 1) + (1 + 1)\n    // = (i + j + k) * (i + j + k - 1)\
    \ + (1 + 1)\n    // = (i + j + k) * (i + j + k\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmbn0sppl_test.go:41:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074211
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp8y7fxtv5_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i -\
    \ i + 1\n    }\n    var count int\n    for i := 0; i < n-2; i++ {\n        for\
    \ j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.011s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i -\
    \ i + 1\n    }\n    var count int\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    fmt.Println(a)\n    count := 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    fmt.Println(a)\n    var count int\n    for i := 0; i < n - 2; i++\
    \ {\n        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n             \
    \       count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp8y7fxtv5_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n       \
    \     for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    // fmt.Println(a)\n\
    \    count := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j <\
    \ n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    fmt.Println(a)\n   \
    \ count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++\
    \ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    count++\n                }\n         \
    \   }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i -\
    \ i + 1\n    }\n    var count int\n    for i := 0; i < n-2; i++ {\n        for\
    \ j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.011s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    fmt.Println(a)\n    count := 0\n    for i := 0; i < n; i++ {\n   \
    \     for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 1 3 7 13]\n[1 1 3 7 13 21]\n[1 1 3 7 13 21 31 43 57 73]\n[1 1 3 7 13\
    \ 21 31 43 57 73 91 111 133 157 183 211 241 273 307 343 381 421 463 507 553 601\
    \ 651 703 757 813 871 931 993 1057 1123 1191 1261 1333 1407 1483 1561 1641 1723\
    \ 1807 1893 1981 2071 2163 2257 2353 2451 2551 2653 2757 2863 2971 3081 3193 3307\
    \ 3423 3541 3661 3783 3907 4033 4161 4291 4423 4557 4693 4831 4971 5113 5257 5403\
    \ 5551 5701 5853 6007 6163 6321 6481 6643 6807 6973 7141 7311 7483 7657 7833 8011\
    \ 8191 8373 8557 8743 8931 9121 9313 9507 9703]\n--- FAIL: TestGet_Max_Triples\
    \ (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0 (0.00s)\n        tmp23pkstj2_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp4ej48cku_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp4ej48cku_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp4ej48cku_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i +\
    \ 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpop295e5v_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp4ej48cku_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp4ej48cku_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp4ej48cku_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 0; i\
    \ < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    count := 0\n    for i :=\
    \ 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp9q2q9c5o_test.go:55: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    var count int\n    for i := 0; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    count := 0\n    for i := 0; i < len(a); i++ {\n        for j := i\
    \ + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a); k++ {\n    \
    \            if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    var count int\n    for i := 0; i < n-2; i++ {\n        for j :=\
    \ i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i +\
    \ 1\n    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j\
    \ := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpthbyka80_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp8y7fxtv5_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n             \
    \   }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i +\
    \ 1\n    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j\
    \ := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpthbyka80_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    count++\n                }\n            }\n        }\n  \
    \  }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    fmt.Println(a)\n    count := 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplm5mucva_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplm5mucva_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i +\
    \ 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpop295e5v_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074213
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer array\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkkb3do9u_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkkb3do9u_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074213
