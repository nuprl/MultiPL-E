language: go_test.go
name: HumanEval_72_will_it_fly
results:
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    sum := 0\n    for _, v :=\
    \ range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n\
    \    }\n    for i := 0; i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i\
    \ - 1] {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual:\
    \ candidate([]int{1, 2}, 5), expected: false },\n     { actual: candidate([]int{3},\
    \ 5), expected: true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n\
    \     { actual: candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075009
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if sum(q) > w {\n        return false\n    }\n\
    \    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppzpc63tb_test.go:33:8: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpu9w4n3l__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    sum := 0\n    for _, v :=\
    \ range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n\n\
    \    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n\n    if sum\
    \ > w {\n        return false\n    }\n\n    for i := 0; i < len(q)/2; i++ {\n\
    \        if q[i] != q[len(q)-i-1] {\n            return false\n        }\n   \
    \ }\n\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum >\
    \ w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n    \
    \    if q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] + q[1] <= w\n    }\n    if len(q) == 3 {\n        return q[0]\
    \ + q[1] + q[2] <= w\n    }\n    if len(q) == 4 {\n        return q[0] + q[1]\
    \ + q[2] + q[3] <= w\n    }\n    if len(q) == 5 {\n        return q[0] + q[1]\
    \ + q[2] + q[3] + q[4] <= w\n    }\n    if len(q) == 6 {\n        return q[0]\
    \ + q[1] + q[2] + q[3] + q[4] + q[5] <= w\n    }\n    if len(q) == 7 {\n     \
    \   return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] <= w\n    }\n    if\
    \ len(q) == 8 {\n        return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6]\
    \ + q[7] <= w\n    }\n    if len(q) == 9 {\n        return q[0] + q[1] + q[2]\
    \ + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] <= w\n    }\n    if len(q) == 10 {\n\
    \        return q[0] + q[1] + q[2] + q[3] + q[4] + q[5] + q[6] + q[7] + q[8] +\
    \ q[9] <= w\n    }\n    if len(q) == 11 {\n        return q[0] + q[1] + q[2] +\
    \ q[3] + q[4] + q[5] + q[6] + q[\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpo7ws8p8h_test.go:59:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075007
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    sum := 0\n    for _, v := range q {\n        sum +=\
    \ v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0; i <\
    \ len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    var sum int\n    for _, v\
    \ := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    if len(q) == 11 {\n\
    \        return q[0] == q[10] && q[1] == q[9] && q[2] == q[8] && q[3] == q[7]\
    \ && q[4] == q[6]\n    }\n    if len(q) == 12 {\n        return q[0] == q[11]\
    \ && q[1] ==\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqeuve9fh_test.go:62:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075007
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    sum := 0\n    for _, v := range q {\n        sum +=\
    \ v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0; i <\
    \ len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    sum := 0\n    for _, v := range q {\n     \
    \   sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i\
    \ := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n\n\
    \    if len(q) == 1 {\n        return q[0] <= w\n    }\n\n    if len(q) == 2 {\n\
    \        return q[0] + q[1] <= w\n    }\n\n    if len(q) == 3 {\n        return\
    \ q[0] + q[1] + q[2] <= w\n    }\n\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__1\
    \ (0.00s)\n        tmpodao93l1_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmpodao93l1_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) % 2 == 0 {\n\
    \        return false\n    }\n    if len(q) == 2 {\n        return q[0] == q[1]\
    \ && q[0] + q[1] <= w\n    }\n    for i := 0; i < len(q)/2; i++ {\n        if\
    \ q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n    sum\
    \ := 0\n    for _, v := range q {\n        sum += v\n    }\n    return sum <=\
    \ w\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n\n\
    \    if len(q) == 1 {\n        return q[0] <= w\n    }\n\n    if len(q) % 2 ==\
    \ 0 {\n        return false\n    }\n\n    var sum int\n    for i := 0; i < len(q);\
    \ i++ {\n        sum += q[i]\n    }\n\n    if sum > w {\n        return false\n\
    \    }\n\n    var i, j int\n    for i, j = 0, len(q) - 1; i < j; i, j = i + 1,\
    \ j - 1 {\n        if q[i] != q[j] {\n            return false\n        }\n  \
    \  }\n\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp86xox9jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp86xox9jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    var sum int\n    for _, v := range q {\n     \
    \   sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i\
    \ := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) % 2 == 0 {\n        return false\n\
    \    }\n    if sum(q) > w {\n        return false\n    }\n    for i := 0; i <\
    \ len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqd_3_hj5_test.go:36:8: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] == q[1] && q[0] <= w\n    }\n    if q[0] != q[len(q)-1] {\n\
    \        return false\n    }\n    return will_it_fly(q[1:len(q)-1], w)\n}\n\n\
    func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n\n\
    \    if len(q) == 1 {\n        return true\n    }\n\n    if len(q) % 2 == 0 {\n\
    \        return false\n    }\n\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n\n    if q[0] != q[len(q)-1] {\n        return false\n    }\n\n    return\
    \ will_it_fly(q[1:len(q)-1], w)\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n \
    \ candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp74v0n3sh_test.go:65: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum = 0\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    sum := 0\n    for _, v :=\
    \ range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] + q[1] <= w\n    }\n    if len(q) == 3 {\n        return q[0]\
    \ + q[1] + q[2] <= w\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__1\
    \ (0.00s)\n        tmpv1qx83r2_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmpv1qx83r2_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] + q[1] <= w\n    }\n    if len(q) % 2 == 0 {\n        return\
    \ false\n    }\n    var sum int\n    for i := 0; i < len(q); i++ {\n        sum\
    \ += q[i]\n    }\n    if sum > w {\n        return false\n    }\n    for i :=\
    \ 0; i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__1\
    \ (0.00s)\n        tmpp45s740r_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpstnvwga6_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    return false\n}\n\n\
    func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpgy1j3i15_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] == q[1] && q[0] + q[1] <= w\n    }\n    if q[0] == q[len(q)-1]\
    \ {\n        return will_it_fly(q[1:len(q)-1], w)\n    }\n    return false\n}\n\
    \nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075012
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if sum(q) > w {\n        return false\n    }\n\
    \    for i := 0; i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1tbnd9kt_test.go:33:8: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    return false\n}\n\n\
    func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpgy1j3i15_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    var sum int\n    for _, v := range q {\n        sum += v\n\
    \    }\n    if sum > w {\n        return false\n    }\n    for i := 0; i < len(q)/2;\
    \ i++ {\n        if q[i] != q[len(q)-i-1] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpu9w4n3l__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 2 {\n        return q[0] == q[1]\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    sum := 0\n    for _, v :=\
    \ range q {\n        sum += v\n    }\n    return sum <= w\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075012
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    var sum int\n    for _, v\
    \ := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) % 2 == 0 {\n\
    \        return false\n    }\n    sum := 0\n    for i := 0; i < len(q); i++ {\n\
    \        sum += q[i]\n    }\n    if sum > w {\n        return false\n    }\n \
    \   for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075012
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] == q[1] && q[0] + q[1] <= w\n    }\n    if q[0] != q[len(q)-1]\
    \ {\n        return false\n    }\n    if q[0] + q[len(q)-1] > w {\n        return\
    \ false\n    }\n    return will_it_fly(q[1:len(q)-1], w)\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ if len(q) == 4 {\n        return false\n    }\n    if len(q) == 5 {\n      \
    \  return true\n    }\n    if len(q) == 6 {\n        return false\n    }\n   \
    \ if len(q) == 7 {\n        return true\n    }\n    if len(q) == 8 {\n       \
    \ return false\n    }\n    if len(q) == 9 {\n        return true\n    }\n    if\
    \ len(q) == 10 {\n        return false\n    }\n    if len(q) == 11 {\n       \
    \ return true\n    }\n    if len(q) == 12 {\n        return false\n    }\n   \
    \ if len(q) == 13 {\n        return true\n    }\n    if len(q) == 14 {\n     \
    \   return false\n    }\n    if len(q) == 15 {\n        return true\n    }\n \
    \   if len(q) == 16 {\n        return false\n    }\n    if len(q) == 17 {\n  \
    \      return true\n    }\n    if len(q) == 18 {\n        return false\n    }\n\
    \    if len(q) == 19 {\n        return true\n    }\n    if len(q) == 20 {\n  \
    \      return false\n    }\n    if len(q) == 21 {\n        return true\n    }\n\
    \    if len(q) == 22 {\n        return false\n    }\n    if len(q) == 23 {\n \
    \       return true\n    }\n    if len(q) == 24 {\n        return false\n    }\n\
    \    if len(q) == 25 {\n        return true\n    }\n    if len(q) == 26 {\n  \
    \      return false\n    }\n    if len(q) == 27 {\n        return true\n    }\n\
    \    if len(q) == 28 {\n        return false\n    }\n    if len(q) == 29 {\n \
    \       return true\n    }\n   \nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9v60z_w7_test.go:115:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum\
    \ > w {\n        return false\n    }\n    for i := 0; i < len(q) / 2; i++ {\n\
    \        if q[i] != q[len(q) - i - 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 2 {\n        return false\n    }\n\
    \    if len(q) == 3 {\n        return q[0] == q[2]\n    }\n    if len(q) == 5\
    \ {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n    if len(q) == 7 {\n\
    \        return q[0] == q[6] && q[1] == q[5] && q[2] == q[4]\n    }\n    if len(q)\
    \ == 9 {\n        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3]\
    \ == q[5]\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp59oyuwdx_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpstnvwga6_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum\
    \ > w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n  \
    \      if q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpu9w4n3l__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    if len(q) == 3 {\n        return true\n    }\n    if len(q) % 2 == 1 {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp_9z0n7r3_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp_9z0n7r3_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpu9w4n3l__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n    if sum(q) >\
    \ w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n    \
    \    if q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3k_r_ugc_test.go:39:8: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    return false\n}\n\n\
    func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpgy1j3i15_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpu9w4n3l__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 3 {\n        if q[0] + q[1] + q[2]\
    \ > w {\n            return false\n        }\n        if q[0] == q[2] {\n    \
    \        return true\n        }\n        return false\n    }\n    if q[0] + q[len(q)-1]\
    \ > w {\n        return false\n    }\n    if q[0] == q[len(q)-1] {\n        return\
    \ will_it_fly(q[1:len(q)-1], w)\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    sum := 0\n    for _, v :=\
    \ range q {\n        sum += v\n    }\n    return sum <= w\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpsq7dpqhd_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if sum(q) > w {\n        return false\n    }\n\
    \    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppzpc63tb_test.go:33:8: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) % 2 == 0 {\n        return false\n\
    \    }\n    var sum int\n    for _, v := range q {\n        sum += v\n    }\n\
    \    if sum > w {\n        return false\n    }\n    for i := 0; i < len(q)/2;\
    \ i++ {\n        if q[i] != q[len(q)-i-1] {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp86xox9jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp86xox9jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    return false\n}\n\n\
    func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpgy1j3i15_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n  \
    \  }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpx6bpmc9k_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    sum := 0\n    for _, v := range q {\n        sum +=\
    \ v\n    }\n    if sum > w {\n        return false\n    }\n    for i, j := 0,\
    \ len(q)-1; i < j; i, j = i+1, j-1 {\n        if q[i] != q[j] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075012
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpstnvwga6_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpu9w4n3l__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp86xox9jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp86xox9jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n\n\
    \    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n\n    if sum\
    \ > w {\n        return false\n    }\n\n    for i := 0; i < len(q)/2; i++ {\n\
    \        if q[i] != q[len(q)-i-1] {\n            return false\n        }\n   \
    \ }\n\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075009
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if sum(q) > w {\n       \
    \ return false\n    }\n    if !is_palindrome(q) {\n        return false\n    }\n\
    \    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp18wu6w1x_test.go:30:8: undefined: sum

    /tmp/tmp18wu6w1x_test.go:33:9: undefined: is_palindrome

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpstnvwga6_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpstnvwga6_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if sum(q) > w {\n        return false\n    }\n\
    \    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppzpc63tb_test.go:33:8: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075008
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] == q[1] && q[0] + q[1] <= w\n    }\n    if q[0] != q[len(q)-1]\
    \ {\n        return false\n    }\n    return will_it_fly(q[1:len(q)-1], w) &&\
    \ q[0] + q[len(q)-1] <= w\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    if len(q) == 3 {\n        return true\n    }\n    if len(q) == 5 {\n    \
    \    return true\n    }\n    if len(q) == 7 {\n        return true\n    }\n  \
    \  if len(q) == 9 {\n        return true\n    }\n    if len(q) == 11 {\n     \
    \   return true\n    }\n    if len(q) == 13 {\n        return true\n    }\n  \
    \  if len(q) == 15 {\n        return true\n    }\n    if len(q) == 17 {\n    \
    \    return true\n    }\n    if len(q) == 19 {\n        return true\n    }\n \
    \   if len(q) == 21 {\n        return true\n    }\n    if len(q) == 23 {\n   \
    \     return true\n    }\n    if len(q) == 25 {\n        return true\n    }\n\
    \    if len(q) == 27 {\n        return true\n    }\n    if len(q) == 29 {\n  \
    \      return true\n    }\n    if len(q) == 31 {\n        return true\n    }\n\
    \    if len(q) == 33 {\n        return true\n    }\n    if len(q) == 35 {\n  \
    \      return true\n    }\n    if len(q) == 37 {\n        return true\n    }\n\
    \    if len(q) == 39 {\n        return true\n    }\n    if len(q) == 41 {\n  \
    \      return true\n    }\n    if len(q) == 43 {\n        return true\n    }\n\
    \    if len(q) == 45 {\n        return true\n    }\n    if len(q) == 47 {\n  \
    \      return true\n    }\n    if len(q) == 49 {\n        return true\n    }\n\
    \    if len(q) == 51 {\n        return true\n    }\n    if len(q) == 53 {\n  \
    \      return true\n    }\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate :=\
    \ will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected:\
    \ true },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n    \
    \ { actual: candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprt30fey1_test.go:114:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075012
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    var sum int\n    for _, v := range q {\n        sum += v\n    }\n    if sum\
    \ > w {\n        return false\n    }\n    var i, j int\n    for i, j = 0, len(q)-1;\
    \ i < j; i, j = i+1, j-1 {\n        if q[i] != q[j] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075013
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) % 2 == 0 {\n\
    \        return false\n    }\n    if sum(q) > w {\n        return false\n    }\n\
    \    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_uj5apbp_test.go:33:8: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075013
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] == q[1] && q[0] + q[1] <= w\n    }\n    if q[0] != q[len(q)-1]\
    \ {\n        return false\n    }\n    if q[0] + q[len(q)-1] > w {\n        return\
    \ false\n    }\n    return will_it_fly(q[1:len(q)-1], w)\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075012
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    sum := 0\n    for _,\
    \ v := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075014
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n\n\
    \    if len(q) == 1 {\n        return q[0] <= w\n    }\n\n    if len(q) == 2 {\n\
    \        return q[0] + q[1] <= w\n    }\n\n    sum := 0\n    for _, v := range\
    \ q {\n        sum += v\n    }\n\n    if sum > w {\n        return false\n   \
    \ }\n\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n\
    \            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__1\
    \ (0.00s)\n        tmpk67v81az_test.go:72: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075014
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    if len(q) == 3 {\n        return true\n    }\n    if len(q) % 2 == 1 {\n\
    \        if q[0] + q[len(q)-1] > w {\n            return false\n        }\n  \
    \      return true\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpqzhr0eai_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmpqzhr0eai_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    if len(q) == 11 {\n\
    \        return q[0] == q[10] && q[1] == q[9] && q[2] == q[8] && q[3] == q[7]\
    \ && q[4] == q[6]\n    }\n    if len(q) == 12 {\n        return q[0] == q[11]\
    \ && q[1] ==\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqeuve9fh_test.go:62:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] + q[1] <= w\n    }\n    var sum int\n    for _, v := range\
    \ q {\n        sum += v\n    }\n    if sum > w {\n        return false\n    }\n\
    \    for i := 0; i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__1\
    \ (0.00s)\n        tmp_bituuhr_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    if len(q) == 3 {\n        return true\n    }\n    var sum int\n    for _,\
    \ v := range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n\
    \    }\n    var i int\n    var j int\n    for i, j = 0, len(q)-1; i < j; i, j\
    \ = i+1, j-1 {\n        if q[i] != q[j] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmproq4tdrq_test.go:74: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmproq4tdrq_test.go:74:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660075016
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum >\
    \ w {\n        return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075016
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ if len(q) == 4 {\n        return false\n    }\n    if len(q) == 5 {\n      \
    \  return true\n    }\n    if len(q) == 6 {\n        return false\n    }\n   \
    \ if len(q) == 7 {\n        return true\n    }\n    if len(q) == 8 {\n       \
    \ return false\n    }\n    if len(q) == 9 {\n        return true\n    }\n    if\
    \ len(q) == 10 {\n        return false\n    }\n    if len(q) == 11 {\n       \
    \ return true\n    }\n    if len(q) == 12 {\n        return false\n    }\n   \
    \ if len(q) == 13 {\n        return true\n    }\n    if len(q) == 14 {\n     \
    \   return false\n    }\n    if len(q) == 15 {\n        return true\n    }\n \
    \   if len(q) == 16 {\n        return false\n    }\n    if len(q) == 17 {\n  \
    \      return true\n    }\n    if len(q) == 18 {\n        return false\n    }\n\
    \    if len(q) == 19 {\n        return true\n    }\n    if len(q) == 20 {\n  \
    \      return false\n    }\n    if len(q) == 21 {\n        return true\n    }\n\
    \    if len(q) == 22 {\n        return false\n    }\n    if len(q) == 23 {\n \
    \       return true\n    }\n    if len(q) == 24 {\n        return false\n    }\n\
    \    if len(q) == 25 {\n        return true\n    }\n    if len(q) == 26 {\n  \
    \      return false\n    }\n    if len(q) == 27 {\n        return true\n    }\n\
    \    if len(q) == 28 {\n        return false\n    }\n    if len(q) == 29 {\n \
    \       return true\n    }\n   \nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9v60z_w7_test.go:115:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 3 {\n        return q[0] + q[1] +\
    \ q[2] <= w\n    }\n    if len(q) == 5 {\n        return q[0] + q[1] + q[2] +\
    \ q[3] + q[4] <= w\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__4\
    \ (0.00s)\n        tmpoxa_gu80_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ if len(q) % 2 == 0 {\n        return false\n    }\n    if len(q) % 2 == 1 {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpmi15nphx_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmpmi15nphx_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    sum := 0\n    for _, v := range q {\n     \
    \   sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i\
    \ := 0; i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075017
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] + q[1] <= w\n    }\n    if len(q) % 2 == 0 {\n        return\
    \ false\n    }\n    if sum(q) > w {\n        return false\n    }\n    for i :=\
    \ 0; i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ymuyvon_test.go:36:8: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075016
- exit_code: 2
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if sum(q) > w {\n        return false\n    }\n\
    \    for i := 0; i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1tbnd9kt_test.go:33:8: undefined: sum

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp86xox9jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp86xox9jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp86xox9jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp86xox9jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] + q[1] <= w\n    }\n    if len(q) % 2 == 0 {\n        return\
    \ false\n    }\n    sum := 0\n    for i := 0; i < len(q); i++ {\n        sum +=\
    \ q[i]\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__1\
    \ (0.00s)\n        tmpoao6qna1_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    sum := 0\n    for i := 0; i < len(q); i++ {\n        sum += q[i]\n    }\n\
    \    if sum > w {\n        return false\n    }\n    for i := 0; i < len(q) / 2;\
    \ i++ {\n        if q[i] != q[len(q) - i - 1] {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    sum := 0\n    for _, v := range q {\n     \
    \   sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i\
    \ := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    return false\n}\n\n\
    func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpgy1j3i15_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    return false\n}\n\n\
    func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpgy1j3i15_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum >\
    \ w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n    \
    \    if q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] + q[1] <= w\n    }\n    if q[0] + q[len(q)-1] <= w {\n   \
    \     return will_it_fly(q[1:len(q)-1], w)\n    }\n    return false\n}\n\nfunc\
    \ TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual:\
    \ candidate([]int{1, 2}, 5), expected: false },\n     { actual: candidate([]int{3},\
    \ 5), expected: true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n\
    \     { actual: candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__1\
    \ (0.00s)\n        tmpzw8dl1ie_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmpzw8dl1ie_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n\n\
    \    if len(q) == 1 {\n        return q[0] <= w\n    }\n\n    if len(q) == 2 {\n\
    \        return q[0] == q[1] && q[0] + q[1] <= w\n    }\n\n    if q[0] == q[len(q)-1]\
    \ {\n        return will_it_fly(q[1:len(q)-1], w)\n    }\n\n    return false\n\
    }\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075017
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    sum := 0\n    for _, v :=\
    \ range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpaxtn28ph_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    var sum int\n    for _, v := range q {\n     \
    \   sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i\
    \ := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpstnvwga6_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpstnvwga6_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    sum := 0\n    for _, v := range q {\n     \
    \   sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i\
    \ := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) % 2 == 0 {\n\
    \        return false\n    }\n    sum := 0\n    for i := 0; i < len(q); i++ {\n\
    \        sum += q[i]\n    }\n    if sum > w {\n        return false\n    }\n \
    \   for i := 0; i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075017
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) % 2 == 0 {\n\
    \        return false\n    }\n    var sum int\n    for i := 0; i < len(q); i++\
    \ {\n        sum += q[i]\n    }\n    if sum > w {\n        return false\n    }\n\
    \    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    var sum int\n    for _, v := range q {\n     \
    \   sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i,\
    \ j := 0, len(q)-1; i < j; i, j = i+1, j-1 {\n        if q[i] != q[j] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpu9w4n3l__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) > 3 {\n        return q[0] == q[len(q)-1] && will_it_fly(q[1:len(q)-1],\
    \ w)\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpxz5s7leo_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpu9w4n3l__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp85_e265l_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 3 {\n        if q[0] + q[1] + q[2]\
    \ <= w {\n            return true\n        }\n        return false\n    }\n  \
    \  if q[0] + q[len(q)-1] <= w {\n        return will_it_fly(q[1:len(q)-1], w)\n\
    \    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__4\
    \ (0.00s)\n        tmpktr7gyec_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp86xox9jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp86xox9jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp86xox9jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp86xox9jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    sum := 0\n    for _, v :=\
    \ range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    if len(q) % 2 == 1 {\n        if q[0] == q[len(q)-1] {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmprs6iym58_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075018
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] == q[1] && q[0] + q[1] <= w\n    }\n    if q[0] != q[len(q)-1]\
    \ {\n        return false\n    }\n    if q[0] + q[len(q)-1] > w {\n        return\
    \ false\n    }\n    return will_it_fly(q[1:len(q)-1], w)\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075012
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    if len(q) % 2 == 1 {\n        var sum int\n        for i := 0; i < len(q);\
    \ i++ {\n            sum += q[i]\n        }\n        if sum > w {\n          \
    \  return false\n        }\n        for i := 0; i < len(q)/2; i++ {\n        \
    \    if q[i] != q[len(q)-1-i] {\n                return false\n            }\n\
    \        }\n        return true\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if q[0] == q[len(q)-1] {\n        return will_it_fly(q[1:len(q)-1],\
    \ w)\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpusyz5peo_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075018
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] == q[1] && q[0] + q[1] <= w\n    }\n    if q[0] != q[len(q)-1]\
    \ {\n        return false\n    }\n    return will_it_fly(q[1:len(q)-1], w)\n}\n\
    \nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    if len(q) == 3 {\n        return true\n    }\n    var sum int\n    for i\
    \ := 0; i < len(q); i++ {\n        sum += q[i]\n    }\n    if sum > w {\n    \
    \    return false\n    }\n    var is_palindrome bool\n    for i := 0; i < len(q)\
    \ / 2; i++ {\n        if q[i] != q[len(q) - 1 - i] {\n            is_palindrome\
    \ = false\n            break\n        }\n        is_palindrome = true\n    }\n\
    \    return is_palindrome\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpoa87y16g_test.go:75: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmpoa87y16g_test.go:75:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    return false\n}\n\n\
    func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpgy1j3i15_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpstnvwga6_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpstnvwga6_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum >\
    \ w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n    \
    \    if q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    if len(q) == 11 {\n\
    \        return q[0] == q[10] && q[1] == q[9] && q[2] == q[8] && q[3] == q[7]\
    \ && q[4] == q[6]\n    }\n    if len(q) == 12 {\n        return q[0] == q[11]\
    \ && q[1] ==\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqeuve9fh_test.go:62:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    if len(q) == 11 {\n\
    \        return q[0] == q[10] && q[1] == q[9] && q[2] == q[8] && q[3] == q[7]\
    \ && q[4] == q[6]\n    }\n    if len(q) == 12 {\n        return q[0] == q[11]\
    \ && q[1] ==\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqeuve9fh_test.go:62:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpq2sf9h4z_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 2 {\n        return q[0] == q[1]\n\
    \    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n    }\n    if len(q)\
    \ == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n    }\n    if len(q) ==\
    \ 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n    if len(q) == 6\
    \ {\n        return q[0] == q[5] && q[1] == q[4] && q[2] == q[3]\n    }\n    if\
    \ len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5] && q[2] == q[4]\n\
    \    }\n    if len(q) == 8 {\n        return q[0] == q[7] && q[1] == q[6] && q[2]\
    \ == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n        return q[0] ==\
    \ q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n    }\n    if len(q) ==\
    \ 10 {\n        return q[0] == q[9] && q[1] == q[8] && q[2] == q[7] && q[3] ==\
    \ q[6] && q[4] == q[5]\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpyi41vksq_test.go:81: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 2 {\n        return q[0] == q[1]\n\
    \    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n    }\n    if len(q)\
    \ == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n    }\n    if len(q) ==\
    \ 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n    if len(q) == 6\
    \ {\n        return q[0] == q[5] && q[1] == q[4] && q[2] == q[3]\n    }\n    if\
    \ len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5] && q[2] == q[4]\n\
    \    }\n    if len(q) == 8 {\n        return q[0] == q[7] && q[1] == q[6] && q[2]\
    \ == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n        return q[0] ==\
    \ q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n    }\n    if len(q) ==\
    \ 10 {\n        return q[0] == q[9] && q[1] == q[8] && q[2] == q[7] && q[3] ==\
    \ q[6] && q[4] == q[5]\n    }\n    if len(q) == 11 {\n        return q[0] == q[10]\
    \ && q[1] == q[9] && q[2] == q[8] && q[3] == q[7] && q[4] == q[6]\n    }\n   \
    \ if len(q) == 12\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqg_nnkpu_test.go:64:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075018
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) % 2 == 0 {\n\
    \        return false\n    }\n    sum := 0\n    for i := 0; i < len(q); i++ {\n\
    \        sum += q[i]\n    }\n    if sum > w {\n        return false\n    }\n \
    \   for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ if len(q) % 2 == 0 {\n        return false\n    }\n    if len(q) % 2 == 1 {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpmi15nphx_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmpmi15nphx_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp86xox9jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp86xox9jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  sum := 0\n    for _, v := range q {\n        sum += v\n    }\n    if sum >\
    \ w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n    \
    \    if q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] + q[1] <= w\n    }\n    if len(q) % 2 == 0 {\n        return\
    \ false\n    }\n    var sum int\n    for i := 0; i < len(q); i++ {\n        sum\
    \ += q[i]\n    }\n    if sum > w {\n        return false\n    }\n    for i :=\
    \ 0; i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__1\
    \ (0.00s)\n        tmpp45s740r_test.go:69: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075010
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n    if len(q) %\
    \ 2 == 1 {\n        mid := len(q) / 2\n        for i := 0; i < mid; i++ {\n  \
    \          if q[i] != q[len(q)-i-1] {\n                return false\n        \
    \    }\n        }\n        sum := 0\n        for _, v := range q {\n         \
    \   sum += v\n        }\n        return sum <= w\n    }\n    return false\n}\n\
    \nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp0ivrns17_test.go:73: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    if len(q) == 11 {\n\
    \        return q[0] == q[10] && q[1] == q[9] && q[2] == q[8] && q[3] == q[7]\
    \ && q[4] == q[6]\n    }\n    if len(q) == 12 {\n        return q[0] == q[11]\
    \ && q[1] ==\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqeuve9fh_test.go:62:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075007
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    var sum int\n    for _, v := range q {\n        sum += v\n    }\n    if sum\
    \ > w {\n        return false\n    }\n    for i := 0; i < len(q)/2; i++ {\n  \
    \      if q[i] != q[len(q)-i-1] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp85_e265l_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ if len(q) % 2 == 0 {\n        return false\n    }\n    if len(q) % 2 == 1 {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpmi15nphx_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmpmi15nphx_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpq2sf9h4z_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    sum := 0\n    for _, v :=\
    \ range q {\n        sum += v\n    }\n    if sum > w {\n        return false\n\
    \    }\n    for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ if len(q) == 4 {\n        return false\n    }\n    if len(q) == 5 {\n      \
    \  return true\n    }\n    if len(q) == 6 {\n        return false\n    }\n   \
    \ if len(q) == 7 {\n        return true\n    }\n    if len(q) == 8 {\n       \
    \ return false\n    }\n    if len(q) == 9 {\n        return true\n    }\n    if\
    \ len(q) == 10 {\n        return false\n    }\n    if len(q) == 11 {\n       \
    \ return true\n    }\n    if len(q) == 12 {\n        return false\n    }\n   \
    \ if len(q) == 13 {\n        return true\n    }\n    if len(q) == 14 {\n     \
    \   return false\n    }\n    if len(q) == 15 {\n        return true\n    }\n \
    \   if len(q) == 16 {\n        return false\n    }\n    if len(q) == 17 {\n  \
    \      return true\n    }\n    if len(q) == 18 {\n        return false\n    }\n\
    \    if len(q) == 19 {\n        return true\n    }\n    if len(q) == 20 {\n  \
    \      return false\n    }\n    if len(q) == 21 {\n        return true\n    }\n\
    \    if len(q) == 22 {\n        return false\n    }\n    if len(q) == 23 {\n \
    \       return true\n    }\n    if len(q) == 24 {\n        return false\n    }\n\
    \    if len(q) == 25 {\n        return true\n    }\n    if len(q) == 26 {\n  \
    \      return false\n    }\n    if len(q) == 27 {\n        return true\n    }\n\
    \    if len(q) == 28 {\n        return false\n    }\n    if len(q) == 29 {\n \
    \       return true\n    }\n   \nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp9v60z_w7_test.go:115:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n\n\
    \    sum := 0\n    for _, v := range q {\n        sum += v\n    }\n\n    if sum\
    \ > w {\n        return false\n    }\n\n    for i := 0; i < len(q)/2; i++ {\n\
    \        if q[i] != q[len(q)-i-1] {\n            return false\n        }\n   \
    \ }\n\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ if len(q) % 2 == 0 {\n        return false\n    }\n    if len(q) % 2 == 1 {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpmi15nphx_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmpmi15nphx_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp86xox9jt_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp86xox9jt_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpu9w4n3l__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp85_e265l_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075017
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ if len(q) % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual:\
    \ candidate([]int{1, 2}, 5), expected: false },\n     { actual: candidate([]int{3},\
    \ 5), expected: true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n\
    \     { actual: candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp0nh0pwfp_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp0nh0pwfp_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 3 {\n        if q[0] == q[2] {\n\
    \            return true\n        }\n        return false\n    }\n    if len(q)\
    \ == 5 {\n        if q[0] == q[4] && q[1] == q[3] {\n            return true\n\
    \        }\n        return false\n    }\n    if len(q) == 7 {\n        if q[0]\
    \ == q[6] && q[1] == q[5] && q[2] == q[4] {\n            return true\n       \
    \ }\n        return false\n    }\n    if len(q) == 9 {\n        if q[0] == q[8]\
    \ && q[1] == q[7] && q[2] == q[6] && q[3] == q[5] {\n            return true\n\
    \        }\n        return false\n    }\n    if len(q) == 11 {\n        if q[0]\
    \ == q[10] && q[1] == q[9] && q[2] == q[8] && q[3] == q[7] && q[4] == q[6] {\n\
    \            return true\n        }\n        return false\n    }\n    if len(q)\
    \ == 13 {\n        if q[0] == q[12] && q[1] == q[11] && q[2] == q[10] && q[3]\
    \ == q[9] && q[4] == q[8] && q[5] == q[7] {\n            return true\n       \
    \ }\n        return false\n    }\n    if len(q) == 15 {\n        if q[0] == q[14]\
    \ && q[1] == q[13] && q[2] == q[12] && q[3] == q[11] && q[4] == q[10] && q[5]\
    \ == q[9] && q[6] == q[8] {\n            return true\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgyso77_k_test.go:72:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075015
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) == 3 {\n        return true\n    }\n   \
    \ if len(q) % 2 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual:\
    \ candidate([]int{1, 2}, 5), expected: false },\n     { actual: candidate([]int{3},\
    \ 5), expected: true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n\
    \     { actual: candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp0nh0pwfp_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp0nh0pwfp_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    sum := 0\n    for _, v := range q {\n        sum +=\
    \ v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0; i <\
    \ len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    if len(q) == 3 {\n        return true\n    }\n    if len(q) % 2 == 1 {\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmp_9z0n7r3_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__4 (0.00s)\n        tmp_9z0n7r3_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075012
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    if len(q) == 11 {\n\
    \        return q[0] == q[10] && q[1] == q[9] && q[2] == q[8] && q[3] == q[7]\
    \ && q[4] == q[6]\n    }\n    if len(q) == 12 {\n        return q[0] == q[11]\
    \ && q[1] ==\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true\
    \ },\n     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqeuve9fh_test.go:62:6: expected ''('', found TestWill_It_Fly

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075007
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 2 {\n        return false\n    }\n\
    \    if len(q) == 3 {\n        if q[0] == q[2] {\n            return true\n  \
    \      }\n        return false\n    }\n    if len(q) == 5 {\n        if q[0] ==\
    \ q[4] && q[1] == q[3] {\n            return true\n        }\n        return false\n\
    \    }\n    if len(q) == 7 {\n        if q[0] == q[6] && q[1] == q[5] && q[2]\
    \ == q[4] {\n            return true\n        }\n        return false\n    }\n\
    \    if len(q) == 9 {\n        if q[0] == q[8] && q[1] == q[7] && q[2] == q[6]\
    \ && q[3] == q[5] {\n            return true\n        }\n        return false\n\
    \    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpk1sctqze_test.go:81: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    var sum int\n    for i := 0; i < len(q); i++ {\n\
    \        sum += q[i]\n    }\n    if sum > w {\n        return false\n    }\n \
    \   for i := 0; i < len(q) / 2; i++ {\n        if q[i] != q[len(q) - i - 1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpu9w4n3l__test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpu9w4n3l__test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    var sum int\n    for _, v := range q {\n     \
    \   sum += v\n    }\n    if sum > w {\n        return false\n    }\n    for i\
    \ := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return q[0] == q[1]\n    }\n    if len(q) == 3 {\n        return q[0] == q[2]\n\
    \    }\n    if len(q) == 4 {\n        return q[0] == q[3] && q[1] == q[2]\n  \
    \  }\n    if len(q) == 5 {\n        return q[0] == q[4] && q[1] == q[3]\n    }\n\
    \    if len(q) == 6 {\n        return q[0] == q[5] && q[1] == q[4] && q[2] ==\
    \ q[3]\n    }\n    if len(q) == 7 {\n        return q[0] == q[6] && q[1] == q[5]\
    \ && q[2] == q[4]\n    }\n    if len(q) == 8 {\n        return q[0] == q[7] &&\
    \ q[1] == q[6] && q[2] == q[5] && q[3] == q[4]\n    }\n    if len(q) == 9 {\n\
    \        return q[0] == q[8] && q[1] == q[7] && q[2] == q[6] && q[3] == q[5]\n\
    \    }\n    if len(q) == 10 {\n        return q[0] == q[9] && q[1] == q[8] &&\
    \ q[2] == q[7] && q[3] == q[6] && q[4] == q[5]\n    }\n    return false\n}\n\n\
    func TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__3\
    \ (0.00s)\n        tmpgy1j3i15_test.go:78: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660075011
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return q[0] <= w\n    }\n    if len(q) == 2 {\n \
    \       return q[0] == q[1] && q[0] + q[1] <= w\n    }\n    if q[0] != q[len(q)-1]\
    \ {\n        return false\n    }\n    return will_it_fly(q[1:len(q)-1], w)\n}\n\
    \nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660075019
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    sum := 0\n    for i := 0; i < len(q); i++ {\n\
    \        sum += q[i]\n    }\n    if sum > w {\n        return false\n    }\n \
    \   for i := 0; i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 3 {\n        if q[0] + q[1] + q[2]\
    \ <= w {\n            return true\n        }\n        return false\n    }\n  \
    \  if len(q) == 5 {\n        if q[0] + q[1] + q[2] + q[3] + q[4] <= w {\n    \
    \        return true\n        }\n        return false\n    }\n    return false\n\
    }\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate := will_it_fly\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{3, 2, 3}, 9), expected: true },\n\
    \     { actual: candidate([]int{1, 2}, 5), expected: false },\n     { actual:\
    \ candidate([]int{3}, 5), expected: true },\n     { actual: candidate([]int{3,\
    \ 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1, 2, 3}, 6),\
    \ expected: false },\n     { actual: candidate([]int{5}, 5), expected: true },\n\
    \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
    , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__4\
    \ (0.00s)\n        tmpsx83_atd_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    if len(q) % 2 == 1 {\n        var sum int\n        for i := 0; i < len(q);\
    \ i++ {\n            sum += q[i]\n        }\n        if sum <= w {\n         \
    \   return true\n        }\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__4\
    \ (0.00s)\n        tmpwv2gi0of_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075020
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // your code here\n    return false\n}\n\nfunc TestWill_It_Fly(t\
    \ *testing.T) {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{3, 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1,\
    \ 2}, 5), expected: false },\n     { actual: candidate([]int{3}, 5), expected:\
    \ true },\n     { actual: candidate([]int{3, 2, 3}, 1), expected: false },\n \
    \    { actual: candidate([]int{1, 2, 3}, 6), expected: false },\n     { actual:\
    \ candidate([]int{5}, 5), expected: true },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmp4ch99hgv_test.go:46:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmp4ch99hgv_test.go:46: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 1
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    // Write your code here\n    // To print results to\
    \ the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestWill_It_Fly (0.00s)\n    --- FAIL: TestWill_It_Fly/test_num__0\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestWill_It_Fly/test_num__2 (0.00s)\n        tmpspa6g_63_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestWill_It_Fly/test_num__5\
    \ (0.00s)\n        tmpspa6g_63_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) == 2 {\n      \
    \  return false\n    }\n    if len(q) % 2 == 0 {\n        return false\n    }\n\
    \    var sum int\n    for _, v := range q {\n        sum += v\n    }\n    if sum\
    \ > w {\n        return false\n    }\n    for i := 0; i < len(q) / 2; i++ {\n\
    \        if q[i] != q[len(q) - i - 1] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n  candidate\
    \ := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 2,\
    \ 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660075020
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    sum := 0\n    for _, v := range q {\n        sum +=\
    \ v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0; i <\
    \ len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T) {\n\
    \  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n  \
    \  if len(q) == 1 {\n        return true\n    }\n    if len(q) % 2 == 0 {\n  \
    \      return false\n    }\n    if len(q) == 3 {\n        if q[0] == q[2] {\n\
    \            if q[0] + q[1] + q[2] <= w {\n                return true\n     \
    \       }\n        }\n        return false\n    }\n    if q[0] == q[len(q)-1]\
    \ {\n        if q[0] + q[len(q)-1] <= w {\n            return will_it_fly(q[1:len(q)-1],\
    \ w)\n        }\n    }\n    return false\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075020
- exit_code: 0
  program: "package will_it_fly_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// Write a function that returns True if the object q will fly, and False otherwise.\n\
    // The object q will fly if it's balanced (it is a palindromic list) and the sum\
    \ of its elements is less than or equal the maximum possible weight w.\n// Example:\n\
    // >>> will_it_fly([]int{1, 2}, 5)\n// false\n// # 1+2 is less than the maximum\
    \ possible weight, but it's unbalanced.\n// >>> will_it_fly([]int{3, 2, 3}, 1)\n\
    // false\n// # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
    // >>> will_it_fly([]int{3, 2, 3}, 9)\n// true\n// # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n// >>> will_it_fly([]int{3}, 5)\n// true\n\
    // # 3 is less than the maximum possible weight, and it's balanced.\nfunc will_it_fly(q\
    \ []int, w int) bool {\n    var sum int\n    for _, v := range q {\n        sum\
    \ += v\n    }\n    if sum > w {\n        return false\n    }\n    for i := 0;\
    \ i < len(q)/2; i++ {\n        if q[i] != q[len(q)-i-1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestWill_It_Fly(t *testing.T)\
    \ {\n  candidate := will_it_fly\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3,\
    \ 2, 3}, 9), expected: true },\n     { actual: candidate([]int{1, 2}, 5), expected:\
    \ false },\n     { actual: candidate([]int{3}, 5), expected: true },\n     { actual:\
    \ candidate([]int{3, 2, 3}, 1), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3}, 6), expected: false },\n     { actual: candidate([]int{5}, 5), expected:\
    \ true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075009
